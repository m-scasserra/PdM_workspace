
TrabajoFinal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000779c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  08007950  08007950  00017950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f74  08007f74  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  08007f74  08007f74  00017f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f7c  08007f7c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f7c  08007f7c  00017f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f80  08007f80  00017f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08007f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201ec  2**0
                  CONTENTS
 10 .bss          00000120  200001ec  200001ec  000201ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000030c  2000030c  000201ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000dc0b  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002401  00000000  00000000  0002de27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bf0  00000000  00000000  00030228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000af0  00000000  00000000  00030e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027611  00000000  00000000  00031908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b0c  00000000  00000000  00058f19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4464  00000000  00000000  0006ba25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014fe89  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040f0  00000000  00000000  0014fedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007934 	.word	0x08007934

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	08007934 	.word	0x08007934

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c7c:	f000 b974 	b.w	8000f68 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	468e      	mov	lr, r1
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d14d      	bne.n	8000d42 <__udivmoddi4+0xaa>
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	4694      	mov	ip, r2
 8000caa:	d969      	bls.n	8000d80 <__udivmoddi4+0xe8>
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	b152      	cbz	r2, 8000cc8 <__udivmoddi4+0x30>
 8000cb2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cb6:	f1c2 0120 	rsb	r1, r2, #32
 8000cba:	fa20 f101 	lsr.w	r1, r0, r1
 8000cbe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cc6:	4094      	lsls	r4, r2
 8000cc8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ccc:	0c21      	lsrs	r1, r4, #16
 8000cce:	fbbe f6f8 	udiv	r6, lr, r8
 8000cd2:	fa1f f78c 	uxth.w	r7, ip
 8000cd6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cda:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cde:	fb06 f107 	mul.w	r1, r6, r7
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	d90a      	bls.n	8000cfc <__udivmoddi4+0x64>
 8000ce6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cee:	f080 811f 	bcs.w	8000f30 <__udivmoddi4+0x298>
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	f240 811c 	bls.w	8000f30 <__udivmoddi4+0x298>
 8000cf8:	3e02      	subs	r6, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1a5b      	subs	r3, r3, r1
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d0c:	fb00 f707 	mul.w	r7, r0, r7
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	d90a      	bls.n	8000d2a <__udivmoddi4+0x92>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d1c:	f080 810a 	bcs.w	8000f34 <__udivmoddi4+0x29c>
 8000d20:	42a7      	cmp	r7, r4
 8000d22:	f240 8107 	bls.w	8000f34 <__udivmoddi4+0x29c>
 8000d26:	4464      	add	r4, ip
 8000d28:	3802      	subs	r0, #2
 8000d2a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d2e:	1be4      	subs	r4, r4, r7
 8000d30:	2600      	movs	r6, #0
 8000d32:	b11d      	cbz	r5, 8000d3c <__udivmoddi4+0xa4>
 8000d34:	40d4      	lsrs	r4, r2
 8000d36:	2300      	movs	r3, #0
 8000d38:	e9c5 4300 	strd	r4, r3, [r5]
 8000d3c:	4631      	mov	r1, r6
 8000d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d909      	bls.n	8000d5a <__udivmoddi4+0xc2>
 8000d46:	2d00      	cmp	r5, #0
 8000d48:	f000 80ef 	beq.w	8000f2a <__udivmoddi4+0x292>
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d52:	4630      	mov	r0, r6
 8000d54:	4631      	mov	r1, r6
 8000d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5a:	fab3 f683 	clz	r6, r3
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	d14a      	bne.n	8000df8 <__udivmoddi4+0x160>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d302      	bcc.n	8000d6c <__udivmoddi4+0xd4>
 8000d66:	4282      	cmp	r2, r0
 8000d68:	f200 80f9 	bhi.w	8000f5e <__udivmoddi4+0x2c6>
 8000d6c:	1a84      	subs	r4, r0, r2
 8000d6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d72:	2001      	movs	r0, #1
 8000d74:	469e      	mov	lr, r3
 8000d76:	2d00      	cmp	r5, #0
 8000d78:	d0e0      	beq.n	8000d3c <__udivmoddi4+0xa4>
 8000d7a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d7e:	e7dd      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000d80:	b902      	cbnz	r2, 8000d84 <__udivmoddi4+0xec>
 8000d82:	deff      	udf	#255	; 0xff
 8000d84:	fab2 f282 	clz	r2, r2
 8000d88:	2a00      	cmp	r2, #0
 8000d8a:	f040 8092 	bne.w	8000eb2 <__udivmoddi4+0x21a>
 8000d8e:	eba1 010c 	sub.w	r1, r1, ip
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f fe8c 	uxth.w	lr, ip
 8000d9a:	2601      	movs	r6, #1
 8000d9c:	0c20      	lsrs	r0, r4, #16
 8000d9e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000da2:	fb07 1113 	mls	r1, r7, r3, r1
 8000da6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000daa:	fb0e f003 	mul.w	r0, lr, r3
 8000dae:	4288      	cmp	r0, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0x12c>
 8000db2:	eb1c 0101 	adds.w	r1, ip, r1
 8000db6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x12a>
 8000dbc:	4288      	cmp	r0, r1
 8000dbe:	f200 80cb 	bhi.w	8000f58 <__udivmoddi4+0x2c0>
 8000dc2:	4643      	mov	r3, r8
 8000dc4:	1a09      	subs	r1, r1, r0
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dd4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d908      	bls.n	8000dee <__udivmoddi4+0x156>
 8000ddc:	eb1c 0404 	adds.w	r4, ip, r4
 8000de0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000de4:	d202      	bcs.n	8000dec <__udivmoddi4+0x154>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f200 80bb 	bhi.w	8000f62 <__udivmoddi4+0x2ca>
 8000dec:	4608      	mov	r0, r1
 8000dee:	eba4 040e 	sub.w	r4, r4, lr
 8000df2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000df6:	e79c      	b.n	8000d32 <__udivmoddi4+0x9a>
 8000df8:	f1c6 0720 	rsb	r7, r6, #32
 8000dfc:	40b3      	lsls	r3, r6
 8000dfe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e02:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e06:	fa20 f407 	lsr.w	r4, r0, r7
 8000e0a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	40f9      	lsrs	r1, r7
 8000e12:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e16:	fa00 f306 	lsl.w	r3, r0, r6
 8000e1a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e1e:	0c20      	lsrs	r0, r4, #16
 8000e20:	fa1f fe8c 	uxth.w	lr, ip
 8000e24:	fb09 1118 	mls	r1, r9, r8, r1
 8000e28:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e2c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e30:	4288      	cmp	r0, r1
 8000e32:	fa02 f206 	lsl.w	r2, r2, r6
 8000e36:	d90b      	bls.n	8000e50 <__udivmoddi4+0x1b8>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e40:	f080 8088 	bcs.w	8000f54 <__udivmoddi4+0x2bc>
 8000e44:	4288      	cmp	r0, r1
 8000e46:	f240 8085 	bls.w	8000f54 <__udivmoddi4+0x2bc>
 8000e4a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e4e:	4461      	add	r1, ip
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e58:	fb09 1110 	mls	r1, r9, r0, r1
 8000e5c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e64:	458e      	cmp	lr, r1
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x1e2>
 8000e68:	eb1c 0101 	adds.w	r1, ip, r1
 8000e6c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e70:	d26c      	bcs.n	8000f4c <__udivmoddi4+0x2b4>
 8000e72:	458e      	cmp	lr, r1
 8000e74:	d96a      	bls.n	8000f4c <__udivmoddi4+0x2b4>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4461      	add	r1, ip
 8000e7a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e7e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e82:	eba1 010e 	sub.w	r1, r1, lr
 8000e86:	42a1      	cmp	r1, r4
 8000e88:	46c8      	mov	r8, r9
 8000e8a:	46a6      	mov	lr, r4
 8000e8c:	d356      	bcc.n	8000f3c <__udivmoddi4+0x2a4>
 8000e8e:	d053      	beq.n	8000f38 <__udivmoddi4+0x2a0>
 8000e90:	b15d      	cbz	r5, 8000eaa <__udivmoddi4+0x212>
 8000e92:	ebb3 0208 	subs.w	r2, r3, r8
 8000e96:	eb61 010e 	sbc.w	r1, r1, lr
 8000e9a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e9e:	fa22 f306 	lsr.w	r3, r2, r6
 8000ea2:	40f1      	lsrs	r1, r6
 8000ea4:	431f      	orrs	r7, r3
 8000ea6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eaa:	2600      	movs	r6, #0
 8000eac:	4631      	mov	r1, r6
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	f1c2 0320 	rsb	r3, r2, #32
 8000eb6:	40d8      	lsrs	r0, r3
 8000eb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ebc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ec0:	4091      	lsls	r1, r2
 8000ec2:	4301      	orrs	r1, r0
 8000ec4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ec8:	fa1f fe8c 	uxth.w	lr, ip
 8000ecc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ed0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ed4:	0c0b      	lsrs	r3, r1, #16
 8000ed6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eda:	fb00 f60e 	mul.w	r6, r0, lr
 8000ede:	429e      	cmp	r6, r3
 8000ee0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ee4:	d908      	bls.n	8000ef8 <__udivmoddi4+0x260>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000eee:	d22f      	bcs.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef0:	429e      	cmp	r6, r3
 8000ef2:	d92d      	bls.n	8000f50 <__udivmoddi4+0x2b8>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	4463      	add	r3, ip
 8000ef8:	1b9b      	subs	r3, r3, r6
 8000efa:	b289      	uxth	r1, r1
 8000efc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f00:	fb07 3316 	mls	r3, r7, r6, r3
 8000f04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f08:	fb06 f30e 	mul.w	r3, r6, lr
 8000f0c:	428b      	cmp	r3, r1
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x28a>
 8000f10:	eb1c 0101 	adds.w	r1, ip, r1
 8000f14:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f18:	d216      	bcs.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d914      	bls.n	8000f48 <__udivmoddi4+0x2b0>
 8000f1e:	3e02      	subs	r6, #2
 8000f20:	4461      	add	r1, ip
 8000f22:	1ac9      	subs	r1, r1, r3
 8000f24:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f28:	e738      	b.n	8000d9c <__udivmoddi4+0x104>
 8000f2a:	462e      	mov	r6, r5
 8000f2c:	4628      	mov	r0, r5
 8000f2e:	e705      	b.n	8000d3c <__udivmoddi4+0xa4>
 8000f30:	4606      	mov	r6, r0
 8000f32:	e6e3      	b.n	8000cfc <__udivmoddi4+0x64>
 8000f34:	4618      	mov	r0, r3
 8000f36:	e6f8      	b.n	8000d2a <__udivmoddi4+0x92>
 8000f38:	454b      	cmp	r3, r9
 8000f3a:	d2a9      	bcs.n	8000e90 <__udivmoddi4+0x1f8>
 8000f3c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f40:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f44:	3801      	subs	r0, #1
 8000f46:	e7a3      	b.n	8000e90 <__udivmoddi4+0x1f8>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	e7ea      	b.n	8000f22 <__udivmoddi4+0x28a>
 8000f4c:	4620      	mov	r0, r4
 8000f4e:	e794      	b.n	8000e7a <__udivmoddi4+0x1e2>
 8000f50:	4640      	mov	r0, r8
 8000f52:	e7d1      	b.n	8000ef8 <__udivmoddi4+0x260>
 8000f54:	46d0      	mov	r8, sl
 8000f56:	e77b      	b.n	8000e50 <__udivmoddi4+0x1b8>
 8000f58:	3b02      	subs	r3, #2
 8000f5a:	4461      	add	r1, ip
 8000f5c:	e732      	b.n	8000dc4 <__udivmoddi4+0x12c>
 8000f5e:	4630      	mov	r0, r6
 8000f60:	e709      	b.n	8000d76 <__udivmoddi4+0xde>
 8000f62:	4464      	add	r4, ip
 8000f64:	3802      	subs	r0, #2
 8000f66:	e742      	b.n	8000dee <__udivmoddi4+0x156>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <MPU6050Init>:
 * 		   with the MPU6050 and set the necessary registers with the values from
 * 		   the defines so it will work.
 * @param  None
 * @retval True if all the initializations are successful, otherwise returns false
 */
bool_t MPU6050Init(){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
	int8_t who_value = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]
	bool_t returnValue = false;
 8000f76:	2300      	movs	r3, #0
 8000f78:	71fb      	strb	r3, [r7, #7]
	returnValue = I2C1ModuleInitPort();
 8000f7a:	f000 fc0b 	bl	8001794 <I2C1ModuleInitPort>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	GPIOPinInitPort();
 8000f82:	f000 fc5b 	bl	800183c <GPIOPinInitPort>
	if(returnValue == true){
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d01a      	beq.n	8000fc2 <MPU6050Init+0x56>
		MPUWritePort(PWR_MGMT_1, PWR_CONFIG);
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	206b      	movs	r0, #107	; 0x6b
 8000f90:	f000 fc7e 	bl	8001890 <MPUWritePort>
		MPUWritePort(SMPRT_DIV, SMPRT_CONFIG);
 8000f94:	2107      	movs	r1, #7
 8000f96:	2019      	movs	r0, #25
 8000f98:	f000 fc7a 	bl	8001890 <MPUWritePort>
		MPUWritePort(GYRO_CONFIG, GYRO_SMPRT << 3);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	201b      	movs	r0, #27
 8000fa0:	f000 fc76 	bl	8001890 <MPUWritePort>
		MPUWritePort(ACCEL_CONFIG, ACCEL_SMPRT << 3);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	201c      	movs	r0, #28
 8000fa8:	f000 fc72 	bl	8001890 <MPUWritePort>
		MPUReadPort(WHO_AM_I, &who_value);
 8000fac:	1dbb      	adds	r3, r7, #6
 8000fae:	4619      	mov	r1, r3
 8000fb0:	2075      	movs	r0, #117	; 0x75
 8000fb2:	f000 fc89 	bl	80018c8 <MPUReadPort>
		if(who_value != MPU6050_ADDR){
 8000fb6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000fba:	2b68      	cmp	r3, #104	; 0x68
 8000fbc:	d001      	beq.n	8000fc2 <MPU6050Init+0x56>
			returnValue = false;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	71fb      	strb	r3, [r7, #7]
		}
	}
	return returnValue;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <readGyro>:
 * 		   measure from all the gyroscope sensors
 * @param  gyroMeasure, pointer to the gyroValues_t structure that holds one
 * 		   read from the gyroscope sensor at the time.
 * @retval None
 */
void readGyro(gyroValues_t *gyroMeasure){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	gyroMeasure->gyroX = readGyroX();
 8000fd4:	f000 f87a 	bl	80010cc <readGyroX>
 8000fd8:	eef0 7a40 	vmov.f32	s15, s0
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	edc3 7a00 	vstr	s15, [r3]
	gyroMeasure->gyroY = readGyroY();
 8000fe2:	f000 f8a9 	bl	8001138 <readGyroY>
 8000fe6:	eef0 7a40 	vmov.f32	s15, s0
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	edc3 7a01 	vstr	s15, [r3, #4]
	gyroMeasure->gyroZ = readGyroZ();
 8000ff0:	f000 f8d8 	bl	80011a4 <readGyroZ>
 8000ff4:	eef0 7a40 	vmov.f32	s15, s0
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <readAccel>:
 * 		   measure from all the accelerometer sensors
 * @param  accelMeasure, pointer to the accelValues_t structure that holds one
 * 		   read from the accelerometer sensor at the time.
 * @retval None
 */
void readAccel(accelValues_t *accelMeasure){
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
	accelMeasure->accelX = readAccelX();
 800100e:	f000 f8ff 	bl	8001210 <readAccelX>
 8001012:	eef0 7a40 	vmov.f32	s15, s0
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	edc3 7a00 	vstr	s15, [r3]
	accelMeasure->accelY = readAccelY();
 800101c:	f000 f92e 	bl	800127c <readAccelY>
 8001020:	eef0 7a40 	vmov.f32	s15, s0
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	edc3 7a01 	vstr	s15, [r3, #4]
	accelMeasure->accelZ = readAccelZ();
 800102a:	f000 f95d 	bl	80012e8 <readAccelZ>
 800102e:	eef0 7a40 	vmov.f32	s15, s0
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <readTemp>:
 * 		   measure from all the temperature sensors.
 * @param  tempMeasure, pointer to the int16_t variable that holds one
 * 		   read from the temperature sensor at the time.
 * @retval None
 */
void readTemp(float *tempMeasure){
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	int8_t dataH_RAW = 0, dataL_RAW = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	737b      	strb	r3, [r7, #13]
 800104c:	2300      	movs	r3, #0
 800104e:	733b      	strb	r3, [r7, #12]
	int16_t returnValue_RAW = 0;
 8001050:	2300      	movs	r3, #0
 8001052:	81fb      	strh	r3, [r7, #14]
	MPUReadPort(TEMP_OUTH, &dataH_RAW);
 8001054:	f107 030d 	add.w	r3, r7, #13
 8001058:	4619      	mov	r1, r3
 800105a:	2041      	movs	r0, #65	; 0x41
 800105c:	f000 fc34 	bl	80018c8 <MPUReadPort>
	MPUReadPort(TEMP_OUTL, &dataL_RAW);
 8001060:	f107 030c 	add.w	r3, r7, #12
 8001064:	4619      	mov	r1, r3
 8001066:	2042      	movs	r0, #66	; 0x42
 8001068:	f000 fc2e 	bl	80018c8 <MPUReadPort>
	returnValue_RAW = (int16_t)(dataH_RAW << 8) | dataL_RAW;
 800106c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001070:	021b      	lsls	r3, r3, #8
 8001072:	b21a      	sxth	r2, r3
 8001074:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001078:	b21b      	sxth	r3, r3
 800107a:	4313      	orrs	r3, r2
 800107c:	81fb      	strh	r3, [r7, #14]

	*tempMeasure = (returnValue_RAW / 340.0) + 36.53;
 800107e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa5e 	bl	8000544 <__aeabi_i2d>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b0e      	ldr	r3, [pc, #56]	; (80010c8 <readTemp+0x88>)
 800108e:	f7ff fbed 	bl	800086c <__aeabi_ddiv>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	a309      	add	r3, pc, #36	; (adr r3, 80010c0 <readTemp+0x80>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff f904 	bl	80002ac <__adddf3>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd8c 	bl	8000bc8 <__aeabi_d2f>
 80010b0:	4602      	mov	r2, r0
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	601a      	str	r2, [r3, #0]
}
 80010b6:	bf00      	nop
 80010b8:	3710      	adds	r7, #16
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	0a3d70a4 	.word	0x0a3d70a4
 80010c4:	404243d7 	.word	0x404243d7
 80010c8:	40754000 	.word	0x40754000

080010cc <readGyroX>:
 * 		   separate values. To convert the data we need to divide it by the
 * 		   sensitivity.
 * @param  none
 * @retval float value of the gyroscope X axis sensor converted to °/s
 */
static float readGyroX(){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
	int8_t dataH_RAW = 0, dataL_RAW = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	71fb      	strb	r3, [r7, #7]
 80010d6:	2300      	movs	r3, #0
 80010d8:	71bb      	strb	r3, [r7, #6]
	int16_t returnValue_RAW = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	81fb      	strh	r3, [r7, #14]
	float returnValue = 0;
 80010de:	f04f 0300 	mov.w	r3, #0
 80010e2:	60bb      	str	r3, [r7, #8]
	MPUReadPort(GYRO_XOUTH, &dataH_RAW);
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	4619      	mov	r1, r3
 80010e8:	2043      	movs	r0, #67	; 0x43
 80010ea:	f000 fbed 	bl	80018c8 <MPUReadPort>
	MPUReadPort(GYRO_XOUTL, &dataL_RAW);
 80010ee:	1dbb      	adds	r3, r7, #6
 80010f0:	4619      	mov	r1, r3
 80010f2:	2044      	movs	r0, #68	; 0x44
 80010f4:	f000 fbe8 	bl	80018c8 <MPUReadPort>
	returnValue_RAW = (int16_t)(dataH_RAW << 8 ) | dataL_RAW;
 80010f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	b21a      	sxth	r2, r3
 8001100:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	81fb      	strh	r3, [r7, #14]
	returnValue = returnValue_RAW / GYRO_SENSITIVITY[GYRO_RANGE];
 800110a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800110e:	ee07 3a90 	vmov	s15, r3
 8001112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001116:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001134 <readGyroX+0x68>
 800111a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111e:	edc7 7a02 	vstr	s15, [r7, #8]
	return returnValue;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	ee07 3a90 	vmov	s15, r3
}
 8001128:	eeb0 0a67 	vmov.f32	s0, s15
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	43030000 	.word	0x43030000

08001138 <readGyroY>:
 * 		   separate values. To convert the data we need to divide it by the
 * 		   sensitivity.
 * @param  none
 * @retval float value of the gyroscope Y axis sensor converted to °/s
 */
static float readGyroY(){
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
	int8_t dataH_RAW = 0, dataL_RAW = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	71fb      	strb	r3, [r7, #7]
 8001142:	2300      	movs	r3, #0
 8001144:	71bb      	strb	r3, [r7, #6]
	int16_t returnValue_RAW = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	81fb      	strh	r3, [r7, #14]
	float returnValue = 0;
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
	MPUReadPort(GYRO_YOUTH, &dataH_RAW);
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	4619      	mov	r1, r3
 8001154:	2045      	movs	r0, #69	; 0x45
 8001156:	f000 fbb7 	bl	80018c8 <MPUReadPort>
	MPUReadPort(GYRO_YOUTL, &dataL_RAW);
 800115a:	1dbb      	adds	r3, r7, #6
 800115c:	4619      	mov	r1, r3
 800115e:	2046      	movs	r0, #70	; 0x46
 8001160:	f000 fbb2 	bl	80018c8 <MPUReadPort>
	returnValue_RAW = (int16_t)(dataH_RAW << 8 ) | dataL_RAW;
 8001164:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001170:	b21b      	sxth	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	81fb      	strh	r3, [r7, #14]
	returnValue = returnValue_RAW / GYRO_SENSITIVITY[GYRO_RANGE];
 8001176:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001182:	eddf 6a07 	vldr	s13, [pc, #28]	; 80011a0 <readGyroY+0x68>
 8001186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800118a:	edc7 7a02 	vstr	s15, [r7, #8]
	return returnValue;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	ee07 3a90 	vmov	s15, r3
}
 8001194:	eeb0 0a67 	vmov.f32	s0, s15
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	43030000 	.word	0x43030000

080011a4 <readGyroZ>:
 * 		   separate values. To convert the data we need to divide it by the
 * 		   sensitivity.
 * @param  none
 * @retval float value of the gyroscope Z axis sensor converted to °/s
 */
static float readGyroZ(){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
	int8_t dataH_RAW = 0, dataL_RAW = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	2300      	movs	r3, #0
 80011b0:	71bb      	strb	r3, [r7, #6]
	int16_t returnValue_RAW = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	81fb      	strh	r3, [r7, #14]
	float returnValue = 0;
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
	MPUReadPort(GYRO_ZOUTH, &dataH_RAW);
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	4619      	mov	r1, r3
 80011c0:	2047      	movs	r0, #71	; 0x47
 80011c2:	f000 fb81 	bl	80018c8 <MPUReadPort>
	MPUReadPort(GYRO_ZOUTL, &dataL_RAW);
 80011c6:	1dbb      	adds	r3, r7, #6
 80011c8:	4619      	mov	r1, r3
 80011ca:	2048      	movs	r0, #72	; 0x48
 80011cc:	f000 fb7c 	bl	80018c8 <MPUReadPort>
	returnValue_RAW = (int16_t)(dataH_RAW << 8 ) | dataL_RAW;
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	021b      	lsls	r3, r3, #8
 80011d6:	b21a      	sxth	r2, r3
 80011d8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011dc:	b21b      	sxth	r3, r3
 80011de:	4313      	orrs	r3, r2
 80011e0:	81fb      	strh	r3, [r7, #14]
	returnValue = returnValue_RAW / GYRO_SENSITIVITY[GYRO_RANGE];
 80011e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011e6:	ee07 3a90 	vmov	s15, r3
 80011ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ee:	eddf 6a07 	vldr	s13, [pc, #28]	; 800120c <readGyroZ+0x68>
 80011f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011f6:	edc7 7a02 	vstr	s15, [r7, #8]
	return returnValue;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	ee07 3a90 	vmov	s15, r3
}
 8001200:	eeb0 0a67 	vmov.f32	s0, s15
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	43030000 	.word	0x43030000

08001210 <readAccelX>:
 * 		   two separate values. To convert the data we need to divide it by
 * 		   the sensitivity.
 * @param  none
 * @retval float value of the accelerometer X axis sensor converted to g/s
 */
static float readAccelX(){
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
	int8_t dataH_RAW = 0, dataL_RAW = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	2300      	movs	r3, #0
 800121c:	71bb      	strb	r3, [r7, #6]
	int16_t returnValue_RAW = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	81fb      	strh	r3, [r7, #14]
	float returnValue = 0;
 8001222:	f04f 0300 	mov.w	r3, #0
 8001226:	60bb      	str	r3, [r7, #8]
	MPUReadPort(ACCEL_XOUTH, &dataH_RAW);
 8001228:	1dfb      	adds	r3, r7, #7
 800122a:	4619      	mov	r1, r3
 800122c:	203b      	movs	r0, #59	; 0x3b
 800122e:	f000 fb4b 	bl	80018c8 <MPUReadPort>
	MPUReadPort(ACCEL_XOUTL, &dataL_RAW);
 8001232:	1dbb      	adds	r3, r7, #6
 8001234:	4619      	mov	r1, r3
 8001236:	203c      	movs	r0, #60	; 0x3c
 8001238:	f000 fb46 	bl	80018c8 <MPUReadPort>
	returnValue_RAW = (int16_t)(dataH_RAW << 8 ) | dataL_RAW;
 800123c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001248:	b21b      	sxth	r3, r3
 800124a:	4313      	orrs	r3, r2
 800124c:	81fb      	strh	r3, [r7, #14]
	returnValue = returnValue_RAW / ACCEL_SENSITIVITY[ACCEL_RANGE];
 800124e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001278 <readAccelX+0x68>
 800125e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001262:	edc7 7a02 	vstr	s15, [r7, #8]
	return returnValue;
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	ee07 3a90 	vmov	s15, r3
}
 800126c:	eeb0 0a67 	vmov.f32	s0, s15
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	46800000 	.word	0x46800000

0800127c <readAccelY>:
 * 		   two separate values. To convert the data we need to divide it by
 * 		   the sensitivity.
 * @param  none
 * @retval float value of the accelerometer Y axis sensor converted to g/s
 */
static float readAccelY(){
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
	int8_t dataH_RAW = 0, dataL_RAW = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	71fb      	strb	r3, [r7, #7]
 8001286:	2300      	movs	r3, #0
 8001288:	71bb      	strb	r3, [r7, #6]
	int16_t returnValue_RAW = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	81fb      	strh	r3, [r7, #14]
	float returnValue = 0;
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
	MPUReadPort(ACCEL_YOUTH, &dataH_RAW);
 8001294:	1dfb      	adds	r3, r7, #7
 8001296:	4619      	mov	r1, r3
 8001298:	203d      	movs	r0, #61	; 0x3d
 800129a:	f000 fb15 	bl	80018c8 <MPUReadPort>
	MPUReadPort(ACCEL_YOUTL, &dataL_RAW);
 800129e:	1dbb      	adds	r3, r7, #6
 80012a0:	4619      	mov	r1, r3
 80012a2:	203e      	movs	r0, #62	; 0x3e
 80012a4:	f000 fb10 	bl	80018c8 <MPUReadPort>
	returnValue_RAW = (int16_t)(dataH_RAW << 8 ) | dataL_RAW;
 80012a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ac:	021b      	lsls	r3, r3, #8
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012b4:	b21b      	sxth	r3, r3
 80012b6:	4313      	orrs	r3, r2
 80012b8:	81fb      	strh	r3, [r7, #14]
	returnValue = returnValue_RAW / ACCEL_SENSITIVITY[ACCEL_RANGE];
 80012ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012be:	ee07 3a90 	vmov	s15, r3
 80012c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012c6:	eddf 6a07 	vldr	s13, [pc, #28]	; 80012e4 <readAccelY+0x68>
 80012ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ce:	edc7 7a02 	vstr	s15, [r7, #8]
	return returnValue;
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	ee07 3a90 	vmov	s15, r3
}
 80012d8:	eeb0 0a67 	vmov.f32	s0, s15
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	46800000 	.word	0x46800000

080012e8 <readAccelZ>:
 * 		   two separate values. To convert the data we need to divide it by
 * 		   the sensitivity.
 * @param  none
 * @retval float value of the accelerometer Z axis sensor converted to g/s
 */
static float readAccelZ(){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0
	int8_t dataH_RAW = 0, dataL_RAW = 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	2300      	movs	r3, #0
 80012f4:	71bb      	strb	r3, [r7, #6]
	int16_t returnValue_RAW = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	81fb      	strh	r3, [r7, #14]
	float returnValue = 0;
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	60bb      	str	r3, [r7, #8]
	MPUReadPort(ACCEL_ZOUTH, &dataH_RAW);
 8001300:	1dfb      	adds	r3, r7, #7
 8001302:	4619      	mov	r1, r3
 8001304:	203f      	movs	r0, #63	; 0x3f
 8001306:	f000 fadf 	bl	80018c8 <MPUReadPort>
	MPUReadPort(ACCEL_ZOUTL, &dataL_RAW);
 800130a:	1dbb      	adds	r3, r7, #6
 800130c:	4619      	mov	r1, r3
 800130e:	2040      	movs	r0, #64	; 0x40
 8001310:	f000 fada 	bl	80018c8 <MPUReadPort>
	returnValue_RAW = (int16_t)(dataH_RAW << 8 ) | dataL_RAW;
 8001314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	b21a      	sxth	r2, r3
 800131c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001320:	b21b      	sxth	r3, r3
 8001322:	4313      	orrs	r3, r2
 8001324:	81fb      	strh	r3, [r7, #14]
	returnValue = returnValue_RAW / ACCEL_SENSITIVITY[ACCEL_RANGE];
 8001326:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800132a:	ee07 3a90 	vmov	s15, r3
 800132e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001332:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001350 <readAccelZ+0x68>
 8001336:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800133a:	edc7 7a02 	vstr	s15, [r7, #8]
	return returnValue;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	ee07 3a90 	vmov	s15, r3
}
 8001344:	eeb0 0a67 	vmov.f32	s0, s15
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	46800000 	.word	0x46800000

08001354 <readKeyFE>:
 * @brief  Reads the variable fallingEdge and returns it. If the variable
 * 		   is true, it will reset it.
 * @param  None
 * @retval true if the variable is true, false otherwise.
 */
bool_t readKeyFE(){
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
	bool_t returnValue = false;
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]
	if(fallingEdge == true){
 800135e:	4b08      	ldr	r3, [pc, #32]	; (8001380 <readKeyFE+0x2c>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d004      	beq.n	8001370 <readKeyFE+0x1c>
		returnValue = true;
 8001366:	2301      	movs	r3, #1
 8001368:	71fb      	strb	r3, [r7, #7]
		fallingEdge = false;
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <readKeyFE+0x2c>)
 800136c:	2200      	movs	r2, #0
 800136e:	701a      	strb	r2, [r3, #0]
	}
	return returnValue;
 8001370:	79fb      	ldrb	r3, [r7, #7]
}
 8001372:	4618      	mov	r0, r3
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	20000209 	.word	0x20000209

08001384 <debounceFSM_Init>:
 * @brief  debounceFSM_Init, initializes the debounce FSM with a initial state
 * and initializes the timer for the debounce routine
 * @param  None
 * @retval None
 */
void debounceFSM_Init(){
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	debounceState = ESTADO_INICIAL;
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <debounceFSM_Init+0x18>)
 800138a:	2200      	movs	r2, #0
 800138c:	701a      	strb	r2, [r3, #0]
	/* Initialize the timer struct for the debouncing*/
	delayInit(&debounceTimer, DEBOUNCE_DELAY);
 800138e:	2128      	movs	r1, #40	; 0x28
 8001390:	4803      	ldr	r0, [pc, #12]	; (80013a0 <debounceFSM_Init+0x1c>)
 8001392:	f000 f875 	bl	8001480 <delayInit>
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000208 	.word	0x20000208
 80013a0:	2000020c 	.word	0x2000020c

080013a4 <debounceFSM_Update>:
/**
 * @brief  debounceFSM_Update, updates the debounce FSM
 * @param  None
 * @retval None
 */
void debounceFSM_Update(){
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	switch(debounceState){
 80013a8:	4b31      	ldr	r3, [pc, #196]	; (8001470 <debounceFSM_Update+0xcc>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b03      	cmp	r3, #3
 80013ae:	d853      	bhi.n	8001458 <debounceFSM_Update+0xb4>
 80013b0:	a201      	add	r2, pc, #4	; (adr r2, 80013b8 <debounceFSM_Update+0x14>)
 80013b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b6:	bf00      	nop
 80013b8:	080013c9 	.word	0x080013c9
 80013bc:	080013e3 	.word	0x080013e3
 80013c0:	08001411 	.word	0x08001411
 80013c4:	0800142b 	.word	0x0800142b
		case BUTTON_UP:
			if(BSP_PB_GetState(BUTTON_USER)){
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 fb71 	bl	8001ab0 <BSP_PB_GetState>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d044      	beq.n	800145e <debounceFSM_Update+0xba>
				debounceState = BUTTON_FALLING;
 80013d4:	4b26      	ldr	r3, [pc, #152]	; (8001470 <debounceFSM_Update+0xcc>)
 80013d6:	2201      	movs	r2, #1
 80013d8:	701a      	strb	r2, [r3, #0]
				delayRead(&debounceTimer);
 80013da:	4826      	ldr	r0, [pc, #152]	; (8001474 <debounceFSM_Update+0xd0>)
 80013dc:	f000 f870 	bl	80014c0 <delayRead>
			}
		break;
 80013e0:	e03d      	b.n	800145e <debounceFSM_Update+0xba>
		case BUTTON_FALLING:
			if(delayRead(&debounceTimer)){
 80013e2:	4824      	ldr	r0, [pc, #144]	; (8001474 <debounceFSM_Update+0xd0>)
 80013e4:	f000 f86c 	bl	80014c0 <delayRead>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d039      	beq.n	8001462 <debounceFSM_Update+0xbe>
				if(BSP_PB_GetState(BUTTON_USER)){
 80013ee:	2000      	movs	r0, #0
 80013f0:	f000 fb5e 	bl	8001ab0 <BSP_PB_GetState>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <debounceFSM_Update+0x64>
					fallingEdge = true;
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <debounceFSM_Update+0xd4>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
					debounceState = BUTTON_DOWN;
 8001400:	4b1b      	ldr	r3, [pc, #108]	; (8001470 <debounceFSM_Update+0xcc>)
 8001402:	2202      	movs	r2, #2
 8001404:	701a      	strb	r2, [r3, #0]
				}else{
					debounceState = BUTTON_UP;
				}
			}
		break;
 8001406:	e02c      	b.n	8001462 <debounceFSM_Update+0xbe>
					debounceState = BUTTON_UP;
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <debounceFSM_Update+0xcc>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
		break;
 800140e:	e028      	b.n	8001462 <debounceFSM_Update+0xbe>
		case BUTTON_DOWN:
			if(!BSP_PB_GetState(BUTTON_USER)){
 8001410:	2000      	movs	r0, #0
 8001412:	f000 fb4d 	bl	8001ab0 <BSP_PB_GetState>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d124      	bne.n	8001466 <debounceFSM_Update+0xc2>
				debounceState = BUTTON_RAISING;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <debounceFSM_Update+0xcc>)
 800141e:	2203      	movs	r2, #3
 8001420:	701a      	strb	r2, [r3, #0]
				delayRead(&debounceTimer);
 8001422:	4814      	ldr	r0, [pc, #80]	; (8001474 <debounceFSM_Update+0xd0>)
 8001424:	f000 f84c 	bl	80014c0 <delayRead>
			}
		break;
 8001428:	e01d      	b.n	8001466 <debounceFSM_Update+0xc2>
		case BUTTON_RAISING:
			if(delayRead(&debounceTimer)){
 800142a:	4812      	ldr	r0, [pc, #72]	; (8001474 <debounceFSM_Update+0xd0>)
 800142c:	f000 f848 	bl	80014c0 <delayRead>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d019      	beq.n	800146a <debounceFSM_Update+0xc6>
				if(!BSP_PB_GetState(BUTTON_USER)){
 8001436:	2000      	movs	r0, #0
 8001438:	f000 fb3a 	bl	8001ab0 <BSP_PB_GetState>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d106      	bne.n	8001450 <debounceFSM_Update+0xac>
					raisingEdge = true;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <debounceFSM_Update+0xd8>)
 8001444:	2201      	movs	r2, #1
 8001446:	701a      	strb	r2, [r3, #0]
					debounceState = BUTTON_UP;
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <debounceFSM_Update+0xcc>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
				}else{
					debounceState = BUTTON_DOWN;
				}
			}
		break;
 800144e:	e00c      	b.n	800146a <debounceFSM_Update+0xc6>
					debounceState = BUTTON_DOWN;
 8001450:	4b07      	ldr	r3, [pc, #28]	; (8001470 <debounceFSM_Update+0xcc>)
 8001452:	2202      	movs	r2, #2
 8001454:	701a      	strb	r2, [r3, #0]
		break;
 8001456:	e008      	b.n	800146a <debounceFSM_Update+0xc6>
		default:
			debounceFSM_Init();
 8001458:	f7ff ff94 	bl	8001384 <debounceFSM_Init>
	}
}
 800145c:	e006      	b.n	800146c <debounceFSM_Update+0xc8>
		break;
 800145e:	bf00      	nop
 8001460:	e004      	b.n	800146c <debounceFSM_Update+0xc8>
		break;
 8001462:	bf00      	nop
 8001464:	e002      	b.n	800146c <debounceFSM_Update+0xc8>
		break;
 8001466:	bf00      	nop
 8001468:	e000      	b.n	800146c <debounceFSM_Update+0xc8>
		break;
 800146a:	bf00      	nop
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	20000208 	.word	0x20000208
 8001474:	2000020c 	.word	0x2000020c
 8001478:	20000209 	.word	0x20000209
 800147c:	2000020a 	.word	0x2000020a

08001480 <delayInit>:
 * @brief  Initializes a delay of milliseconds
 * @param  *delay pointer to the delay structure
 * @param  duration duration of the delay, must be a positive integer
 * @retval None
 */
void delayInit(delay_t *delay, tick_t duration){
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
	if(delay != NULL && duration > 0 && duration < MAX_DELAY){
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d011      	beq.n	80014b4 <delayInit+0x34>
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d00e      	beq.n	80014b4 <delayInit+0x34>
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	f247 522f 	movw	r2, #29999	; 0x752f
 800149c:	4293      	cmp	r3, r2
 800149e:	d809      	bhi.n	80014b4 <delayInit+0x34>
		delay->duration = duration;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	683a      	ldr	r2, [r7, #0]
 80014a4:	605a      	str	r2, [r3, #4]
		delay->running = false;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2200      	movs	r2, #0
 80014aa:	721a      	strb	r2, [r3, #8]
		delay->startTime = 0;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]
	}else{
		while(1){
		}
	}
}
 80014b2:	e000      	b.n	80014b6 <delayInit+0x36>
		while(1){
 80014b4:	e7fe      	b.n	80014b4 <delayInit+0x34>
}
 80014b6:	370c      	adds	r7, #12
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <delayRead>:
/**
 * @brief  Reads the current time of the delay, if the delay is not running it initializes it
 * @param  *delay pointer to the delay structure
 * @retval True if its running, otherwise returns false
 */
bool_t delayRead(delay_t *delay){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	bool timerFinish = false;
 80014c8:	2300      	movs	r3, #0
 80014ca:	73fb      	strb	r3, [r7, #15]

	if(delay != NULL){
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d023      	beq.n	800151a <delayRead+0x5a>
		if(delay->running == false){
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	7a1b      	ldrb	r3, [r3, #8]
 80014d6:	f083 0301 	eor.w	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d008      	beq.n	80014f2 <delayRead+0x32>
			delay->startTime = HAL_GetTick();
 80014e0:	f000 fc86 	bl	8001df0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	601a      	str	r2, [r3, #0]
			delay->running = true;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2201      	movs	r2, #1
 80014ee:	721a      	strb	r2, [r3, #8]
 80014f0:	e011      	b.n	8001516 <delayRead+0x56>
		}else{
			if(HAL_GetTick() - delay->startTime >= delay->duration){
 80014f2:	f000 fc7d 	bl	8001df0 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	1ad2      	subs	r2, r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	d307      	bcc.n	8001516 <delayRead+0x56>
				delay->running = false;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	721a      	strb	r2, [r3, #8]
				delay->startTime = 0;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
				timerFinish = true;
 8001512:	2301      	movs	r3, #1
 8001514:	73fb      	strb	r3, [r7, #15]
			}
		}
		return timerFinish;
 8001516:	7bfb      	ldrb	r3, [r7, #15]
 8001518:	e000      	b.n	800151c <delayRead+0x5c>

	}else{
		while(1){
 800151a:	e7fe      	b.n	800151a <delayRead+0x5a>
		}
	}
}
 800151c:	4618      	mov	r0, r3
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <okInitMessage>:
 * 		   send the full characteristics of the communication via the UART
 * @param  UartHandle pointer to the UART_Handle structure which holds the
 * 		   parameters and makes the communication
 * @retval None
 */
static void okInitMessage(UART_HandleTypeDef *UartHandle){
 8001524:	b5b0      	push	{r4, r5, r7, lr}
 8001526:	b092      	sub	sp, #72	; 0x48
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	uartCLRScreen(UartHandle);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 f8e7 	bl	8001700 <uartCLRScreen>
	char okInitString[] = "USART initialized correctly with the following parameters:\n\r";
 8001532:	4b50      	ldr	r3, [pc, #320]	; (8001674 <okInitMessage+0x150>)
 8001534:	f107 0408 	add.w	r4, r7, #8
 8001538:	461d      	mov	r5, r3
 800153a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800153c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800153e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001546:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800154a:	c407      	stmia	r4!, {r0, r1, r2}
 800154c:	7023      	strb	r3, [r4, #0]
	uartSendString(UartHandle, okInitString);
 800154e:	f107 0308 	add.w	r3, r7, #8
 8001552:	4619      	mov	r1, r3
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f8ff 	bl	8001758 <uartSendString>
	strcpy(okInitString, "USART instance: 3 \n\r");
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4a46      	ldr	r2, [pc, #280]	; (8001678 <okInitMessage+0x154>)
 8001560:	461c      	mov	r4, r3
 8001562:	4615      	mov	r5, r2
 8001564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001568:	e895 0003 	ldmia.w	r5, {r0, r1}
 800156c:	6020      	str	r0, [r4, #0]
 800156e:	3404      	adds	r4, #4
 8001570:	7021      	strb	r1, [r4, #0]
	uartSendString(UartHandle, okInitString);
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	4619      	mov	r1, r3
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 f8ed 	bl	8001758 <uartSendString>
	strcpy(okInitString, "Baud Rate: 9600 \n\r");
 800157e:	f107 0308 	add.w	r3, r7, #8
 8001582:	4a3e      	ldr	r2, [pc, #248]	; (800167c <okInitMessage+0x158>)
 8001584:	461c      	mov	r4, r3
 8001586:	4615      	mov	r5, r2
 8001588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800158a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800158c:	682b      	ldr	r3, [r5, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	8022      	strh	r2, [r4, #0]
 8001592:	3402      	adds	r4, #2
 8001594:	0c1b      	lsrs	r3, r3, #16
 8001596:	7023      	strb	r3, [r4, #0]
	uartSendString(UartHandle, okInitString);
 8001598:	f107 0308 	add.w	r3, r7, #8
 800159c:	4619      	mov	r1, r3
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 f8da 	bl	8001758 <uartSendString>
	strcpy(okInitString, "Word Length: 8 \n\r");
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	4a35      	ldr	r2, [pc, #212]	; (8001680 <okInitMessage+0x15c>)
 80015aa:	461c      	mov	r4, r3
 80015ac:	4615      	mov	r5, r2
 80015ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015b2:	682b      	ldr	r3, [r5, #0]
 80015b4:	8023      	strh	r3, [r4, #0]
	uartSendString(UartHandle, okInitString);
 80015b6:	f107 0308 	add.w	r3, r7, #8
 80015ba:	4619      	mov	r1, r3
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 f8cb 	bl	8001758 <uartSendString>
	strcpy(okInitString, "Stop bits: 1 \n\r");
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4a2f      	ldr	r2, [pc, #188]	; (8001684 <okInitMessage+0x160>)
 80015c8:	461c      	mov	r4, r3
 80015ca:	4613      	mov	r3, r2
 80015cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uartSendString(UartHandle, okInitString);
 80015d2:	f107 0308 	add.w	r3, r7, #8
 80015d6:	4619      	mov	r1, r3
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 f8bd 	bl	8001758 <uartSendString>
	strcpy(okInitString, "Parity: Odd \n\r");
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	4a29      	ldr	r2, [pc, #164]	; (8001688 <okInitMessage+0x164>)
 80015e4:	461c      	mov	r4, r3
 80015e6:	4613      	mov	r3, r2
 80015e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ea:	c407      	stmia	r4!, {r0, r1, r2}
 80015ec:	8023      	strh	r3, [r4, #0]
 80015ee:	3402      	adds	r4, #2
 80015f0:	0c1b      	lsrs	r3, r3, #16
 80015f2:	7023      	strb	r3, [r4, #0]
	uartSendString(UartHandle, okInitString);
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	4619      	mov	r1, r3
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 f8ac 	bl	8001758 <uartSendString>
	strcpy(okInitString, "Hardware Control: None \n\r");
 8001600:	f107 0308 	add.w	r3, r7, #8
 8001604:	4a21      	ldr	r2, [pc, #132]	; (800168c <okInitMessage+0x168>)
 8001606:	461c      	mov	r4, r3
 8001608:	4615      	mov	r5, r2
 800160a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800160c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800160e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001612:	c403      	stmia	r4!, {r0, r1}
 8001614:	8022      	strh	r2, [r4, #0]
	uartSendString(UartHandle, okInitString);
 8001616:	f107 0308 	add.w	r3, r7, #8
 800161a:	4619      	mov	r1, r3
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f89b 	bl	8001758 <uartSendString>
	strcpy(okInitString, "Mode: Tx and Rx \n\r");
 8001622:	f107 0308 	add.w	r3, r7, #8
 8001626:	4a1a      	ldr	r2, [pc, #104]	; (8001690 <okInitMessage+0x16c>)
 8001628:	461c      	mov	r4, r3
 800162a:	4615      	mov	r5, r2
 800162c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001630:	682b      	ldr	r3, [r5, #0]
 8001632:	461a      	mov	r2, r3
 8001634:	8022      	strh	r2, [r4, #0]
 8001636:	3402      	adds	r4, #2
 8001638:	0c1b      	lsrs	r3, r3, #16
 800163a:	7023      	strb	r3, [r4, #0]
	uartSendString(UartHandle, okInitString);
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	4619      	mov	r1, r3
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f888 	bl	8001758 <uartSendString>
	strcpy(okInitString, "Over Sampling: 16 \n\r");
 8001648:	f107 0308 	add.w	r3, r7, #8
 800164c:	4a11      	ldr	r2, [pc, #68]	; (8001694 <okInitMessage+0x170>)
 800164e:	461c      	mov	r4, r3
 8001650:	4615      	mov	r5, r2
 8001652:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001654:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001656:	e895 0003 	ldmia.w	r5, {r0, r1}
 800165a:	6020      	str	r0, [r4, #0]
 800165c:	3404      	adds	r4, #4
 800165e:	7021      	strb	r1, [r4, #0]
	uartSendString(UartHandle, okInitString);
 8001660:	f107 0308 	add.w	r3, r7, #8
 8001664:	4619      	mov	r1, r3
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 f876 	bl	8001758 <uartSendString>
}
 800166c:	bf00      	nop
 800166e:	3748      	adds	r7, #72	; 0x48
 8001670:	46bd      	mov	sp, r7
 8001672:	bdb0      	pop	{r4, r5, r7, pc}
 8001674:	080079f8 	.word	0x080079f8
 8001678:	08007950 	.word	0x08007950
 800167c:	08007968 	.word	0x08007968
 8001680:	0800797c 	.word	0x0800797c
 8001684:	08007990 	.word	0x08007990
 8001688:	080079a0 	.word	0x080079a0
 800168c:	080079b0 	.word	0x080079b0
 8001690:	080079cc 	.word	0x080079cc
 8001694:	080079e0 	.word	0x080079e0

08001698 <uartInit>:
 * @param  UartHandle pointer to the UART_Handle structure which holds the
 * 		   parameters
 * @retval Boolean, true if the module initializes properly, otherwise it
 * 	       returns false
 */
bool_t uartInit(UART_HandleTypeDef *UartHandle){
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

	bool_t returnValue = true;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
	if(BAUD_RATE < 0){
		while(1){}
	}

	UartHandle->Instance        = USART3;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4a15      	ldr	r2, [pc, #84]	; (80016fc <uartInit+0x64>)
 80016a8:	601a      	str	r2, [r3, #0]
	UartHandle->Init.BaudRate   = BAUD_RATE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016b0:	605a      	str	r2, [r3, #4]
	UartHandle->Init.WordLength = UART_WORDLENGTH_8B;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
	UartHandle->Init.StopBits   = UART_STOPBITS_1;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
	UartHandle->Init.Parity     = UART_PARITY_ODD;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80016c4:	611a      	str	r2, [r3, #16]
	UartHandle->Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
	UartHandle->Init.Mode       = UART_MODE_TX_RX;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	220c      	movs	r2, #12
 80016d0:	615a      	str	r2, [r3, #20]
	UartHandle->Init.OverSampling = UART_OVERSAMPLING_16;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	61da      	str	r2, [r3, #28]

	if(HAL_UART_Init(UartHandle) != HAL_OK)
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	f002 fc0b 	bl	8003ef4 <HAL_UART_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d002      	beq.n	80016ea <uartInit+0x52>
	{
		/* Initialization Error */
		returnValue = false;
 80016e4:	2300      	movs	r3, #0
 80016e6:	73fb      	strb	r3, [r7, #15]
 80016e8:	e002      	b.n	80016f0 <uartInit+0x58>
	}else{
		okInitMessage(UartHandle);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ff1a 	bl	8001524 <okInitMessage>
	}
	return returnValue;
 80016f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3710      	adds	r7, #16
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40004800 	.word	0x40004800

08001700 <uartCLRScreen>:
 * 		   screen and send the cursor come to the UART module selected
 * @param  UartHandle, pointer to theUart structure that sets which uart module
 * 		   to use
 * @retval None
 */
void uartCLRScreen(UART_HandleTypeDef *UartHandle){
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	if(UartHandle != NULL){
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d01b      	beq.n	8001746 <uartCLRScreen+0x46>
		char str[10];
		sprintf(str, "%c[2J", ESC_CMD);
 800170e:	f107 030c 	add.w	r3, r7, #12
 8001712:	221b      	movs	r2, #27
 8001714:	490e      	ldr	r1, [pc, #56]	; (8001750 <uartCLRScreen+0x50>)
 8001716:	4618      	mov	r0, r3
 8001718:	f003 fea2 	bl	8005460 <siprintf>
		HAL_UART_Transmit(UartHandle, (uint8_t *)str, 4, TIMEOUT_DELAY);
 800171c:	f107 010c 	add.w	r1, r7, #12
 8001720:	2364      	movs	r3, #100	; 0x64
 8001722:	2204      	movs	r2, #4
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f002 fc32 	bl	8003f8e <HAL_UART_Transmit>
		sprintf(str, "%c[H", ESC_CMD);
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	221b      	movs	r2, #27
 8001730:	4908      	ldr	r1, [pc, #32]	; (8001754 <uartCLRScreen+0x54>)
 8001732:	4618      	mov	r0, r3
 8001734:	f003 fe94 	bl	8005460 <siprintf>
		HAL_UART_Transmit(UartHandle, (uint8_t *)str, 3, TIMEOUT_DELAY);
 8001738:	f107 010c 	add.w	r1, r7, #12
 800173c:	2364      	movs	r3, #100	; 0x64
 800173e:	2203      	movs	r2, #3
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f002 fc24 	bl	8003f8e <HAL_UART_Transmit>
	}
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	08007a38 	.word	0x08007a38
 8001754:	08007a40 	.word	0x08007a40

08001758 <uartSendString>:
 * @param  UartHandle, pointer to theUart structure that sets
 * 		   which uart module to use
 * @param  txString, pointer to the string to send fully
 * @retval None
 */
void uartSendString(UART_HandleTypeDef *UartHandle, char *txString){
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
	if(UartHandle != NULL && txString != NULL){
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d010      	beq.n	800178a <uartSendString+0x32>
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00d      	beq.n	800178a <uartSendString+0x32>
		// You have to add 1 to the length so it sends the \0 char at the end of the string
		uint16_t messageLength = strlen((const char*)txString) + 1;
 800176e:	6838      	ldr	r0, [r7, #0]
 8001770:	f7fe fd3e 	bl	80001f0 <strlen>
 8001774:	4603      	mov	r3, r0
 8001776:	b29b      	uxth	r3, r3
 8001778:	3301      	adds	r3, #1
 800177a:	81fb      	strh	r3, [r7, #14]
		HAL_UART_Transmit(UartHandle, (uint8_t *)txString, messageLength, TIMEOUT_DELAY);
 800177c:	89fa      	ldrh	r2, [r7, #14]
 800177e:	2364      	movs	r3, #100	; 0x64
 8001780:	6839      	ldr	r1, [r7, #0]
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f002 fc03 	bl	8003f8e <HAL_UART_Transmit>
	if(UartHandle != NULL && txString != NULL){
 8001788:	e000      	b.n	800178c <uartSendString+0x34>
	}else{
		while(1){}
 800178a:	e7fe      	b.n	800178a <uartSendString+0x32>
	}
}
 800178c:	bf00      	nop
 800178e:	3710      	adds	r7, #16
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <I2C1ModuleInitPort>:
 * @brief  I2C1ModuleInitPort, Initializes the I2C1 module of the board with
 * 		   the default parameters.
 * @param  none
 * @retval true if the initialization is successful, otherwise returns false
 */
bool_t I2C1ModuleInitPort(){
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
	I2C1Handler.Instance = I2C1;
 800179a:	4b24      	ldr	r3, [pc, #144]	; (800182c <I2C1ModuleInitPort+0x98>)
 800179c:	4a24      	ldr	r2, [pc, #144]	; (8001830 <I2C1ModuleInitPort+0x9c>)
 800179e:	601a      	str	r2, [r3, #0]
	I2C1Handler.Init.ClockSpeed = 100000;
 80017a0:	4b22      	ldr	r3, [pc, #136]	; (800182c <I2C1ModuleInitPort+0x98>)
 80017a2:	4a24      	ldr	r2, [pc, #144]	; (8001834 <I2C1ModuleInitPort+0xa0>)
 80017a4:	605a      	str	r2, [r3, #4]
	I2C1Handler.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a6:	4b21      	ldr	r3, [pc, #132]	; (800182c <I2C1ModuleInitPort+0x98>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
	I2C1Handler.Init.OwnAddress1 = 0;
 80017ac:	4b1f      	ldr	r3, [pc, #124]	; (800182c <I2C1ModuleInitPort+0x98>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
	I2C1Handler.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b2:	4b1e      	ldr	r3, [pc, #120]	; (800182c <I2C1ModuleInitPort+0x98>)
 80017b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017b8:	611a      	str	r2, [r3, #16]
	I2C1Handler.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ba:	4b1c      	ldr	r3, [pc, #112]	; (800182c <I2C1ModuleInitPort+0x98>)
 80017bc:	2200      	movs	r2, #0
 80017be:	615a      	str	r2, [r3, #20]
	I2C1Handler.Init.OwnAddress2 = 0;
 80017c0:	4b1a      	ldr	r3, [pc, #104]	; (800182c <I2C1ModuleInitPort+0x98>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]
	I2C1Handler.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c6:	4b19      	ldr	r3, [pc, #100]	; (800182c <I2C1ModuleInitPort+0x98>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	61da      	str	r2, [r3, #28]
	I2C1Handler.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017cc:	4b17      	ldr	r3, [pc, #92]	; (800182c <I2C1ModuleInitPort+0x98>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	621a      	str	r2, [r3, #32]
	__I2C1_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b18      	ldr	r3, [pc, #96]	; (8001838 <I2C1ModuleInitPort+0xa4>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a17      	ldr	r2, [pc, #92]	; (8001838 <I2C1ModuleInitPort+0xa4>)
 80017dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b15      	ldr	r3, [pc, #84]	; (8001838 <I2C1ModuleInitPort+0xa4>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
	if (HAL_I2C_Init(&I2C1Handler) != HAL_OK)
 80017ee:	480f      	ldr	r0, [pc, #60]	; (800182c <I2C1ModuleInitPort+0x98>)
 80017f0:	f000 fdfa 	bl	80023e8 <HAL_I2C_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <I2C1ModuleInitPort+0x6a>
	{
		return false;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e012      	b.n	8001824 <I2C1ModuleInitPort+0x90>
	}

	/* Configure Analogue filter*/
	if (HAL_I2CEx_ConfigAnalogFilter(&I2C1Handler, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017fe:	2100      	movs	r1, #0
 8001800:	480a      	ldr	r0, [pc, #40]	; (800182c <I2C1ModuleInitPort+0x98>)
 8001802:	f001 fdba 	bl	800337a <HAL_I2CEx_ConfigAnalogFilter>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <I2C1ModuleInitPort+0x7c>
	{
		return false;
 800180c:	2300      	movs	r3, #0
 800180e:	e009      	b.n	8001824 <I2C1ModuleInitPort+0x90>
	}

	/* Configure Digital filter*/
	if (HAL_I2CEx_ConfigDigitalFilter(&I2C1Handler, 0) != HAL_OK)
 8001810:	2100      	movs	r1, #0
 8001812:	4806      	ldr	r0, [pc, #24]	; (800182c <I2C1ModuleInitPort+0x98>)
 8001814:	f001 fded 	bl	80033f2 <HAL_I2CEx_ConfigDigitalFilter>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <I2C1ModuleInitPort+0x8e>
	{
		return false;
 800181e:	2300      	movs	r3, #0
 8001820:	e000      	b.n	8001824 <I2C1ModuleInitPort+0x90>
	}
	return true;
 8001822:	2301      	movs	r3, #1
}
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000218 	.word	0x20000218
 8001830:	40005400 	.word	0x40005400
 8001834:	000186a0 	.word	0x000186a0
 8001838:	40023800 	.word	0x40023800

0800183c <GPIOPinInitPort>:
 * @brief  GPIOPinInitPort, Configures the GPIO module of the board so the I2C1
 * 		   module can work. Pin 6 and Pin 9 are the SCL and SDA respectively.
 * @param  none
 * @retval none
 */
void GPIOPinInitPort(){
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;

	GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_9;
 8001842:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001846:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001848:	2312      	movs	r3, #18
 800184a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800184c:	2301      	movs	r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001850:	2302      	movs	r3, #2
 8001852:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001854:	2304      	movs	r3, #4
 8001856:	617b      	str	r3, [r7, #20]

	__GPIOB_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	603b      	str	r3, [r7, #0]
 800185c:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <GPIOPinInitPort+0x4c>)
 800185e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001860:	4a09      	ldr	r2, [pc, #36]	; (8001888 <GPIOPinInitPort+0x4c>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	6313      	str	r3, [r2, #48]	; 0x30
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <GPIOPinInitPort+0x4c>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	603b      	str	r3, [r7, #0]
 8001872:	683b      	ldr	r3, [r7, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	1d3b      	adds	r3, r7, #4
 8001876:	4619      	mov	r1, r3
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <GPIOPinInitPort+0x50>)
 800187a:	f000 fbd7 	bl	800202c <HAL_GPIO_Init>
}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	40020400 	.word	0x40020400

08001890 <MPUWritePort>:
 * @param  uint8_t REG_ADDR, Address where the I2C slave will write the given
 * 		   data
 * 		   uin8_t data, Data to be written
 * @retval none
 */
void MPUWritePort(uint8_t REG_ADDR, uint8_t data){
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af04      	add	r7, sp, #16
 8001896:	4603      	mov	r3, r0
 8001898:	460a      	mov	r2, r1
 800189a:	71fb      	strb	r3, [r7, #7]
 800189c:	4613      	mov	r3, r2
 800189e:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Mem_Write(&I2C1Handler, I2C_ADDR, REG_ADDR, 1, &data, 1, MAX_TIMEOUT_MS);
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018a8:	9302      	str	r3, [sp, #8]
 80018aa:	2301      	movs	r3, #1
 80018ac:	9301      	str	r3, [sp, #4]
 80018ae:	1dbb      	adds	r3, r7, #6
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	2301      	movs	r3, #1
 80018b4:	21d0      	movs	r1, #208	; 0xd0
 80018b6:	4803      	ldr	r0, [pc, #12]	; (80018c4 <MPUWritePort+0x34>)
 80018b8:	f000 fee4 	bl	8002684 <HAL_I2C_Mem_Write>
}
 80018bc:	bf00      	nop
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000218 	.word	0x20000218

080018c8 <MPUReadPort>:
 * 		   be written on the pointer parameter given.
 * @param  uint8_t REG_ADDR, Address that the I2C slave will transmit
 * 		   in8_t *data, pointer to where the data will be written.
 * @retval none
 */
void MPUReadPort(uint8_t REG_ADDR, int8_t *value){
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af04      	add	r7, sp, #16
 80018ce:	4603      	mov	r3, r0
 80018d0:	6039      	str	r1, [r7, #0]
 80018d2:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Read(&I2C1Handler, I2C_ADDR, REG_ADDR, 1, value, 1, MAX_TIMEOUT_MS);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018dc:	9302      	str	r3, [sp, #8]
 80018de:	2301      	movs	r3, #1
 80018e0:	9301      	str	r3, [sp, #4]
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	9300      	str	r3, [sp, #0]
 80018e6:	2301      	movs	r3, #1
 80018e8:	21d0      	movs	r1, #208	; 0xd0
 80018ea:	4803      	ldr	r0, [pc, #12]	; (80018f8 <MPUReadPort+0x30>)
 80018ec:	f000 ffc4 	bl	8002878 <HAL_I2C_Mem_Read>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000218 	.word	0x20000218

080018fc <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08a      	sub	sp, #40	; 0x28
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d10e      	bne.n	800192a <BSP_LED_Init+0x2e>
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <BSP_LED_Init+0x94>)
 8001912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001914:	4a1e      	ldr	r2, [pc, #120]	; (8001990 <BSP_LED_Init+0x94>)
 8001916:	f043 0302 	orr.w	r3, r3, #2
 800191a:	6313      	str	r3, [r2, #48]	; 0x30
 800191c:	4b1c      	ldr	r3, [pc, #112]	; (8001990 <BSP_LED_Init+0x94>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	e00d      	b.n	8001946 <BSP_LED_Init+0x4a>
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <BSP_LED_Init+0x94>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a17      	ldr	r2, [pc, #92]	; (8001990 <BSP_LED_Init+0x94>)
 8001934:	f043 0302 	orr.w	r3, r3, #2
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <BSP_LED_Init+0x94>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0302 	and.w	r3, r3, #2
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4a12      	ldr	r2, [pc, #72]	; (8001994 <BSP_LED_Init+0x98>)
 800194a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800194e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001950:	2301      	movs	r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001958:	2302      	movs	r3, #2
 800195a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	4a0e      	ldr	r2, [pc, #56]	; (8001998 <BSP_LED_Init+0x9c>)
 8001960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001964:	f107 0214 	add.w	r2, r7, #20
 8001968:	4611      	mov	r1, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f000 fb5e 	bl	800202c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	4a09      	ldr	r2, [pc, #36]	; (8001998 <BSP_LED_Init+0x9c>)
 8001974:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	4a06      	ldr	r2, [pc, #24]	; (8001994 <BSP_LED_Init+0x98>)
 800197c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001980:	2200      	movs	r2, #0
 8001982:	4619      	mov	r1, r3
 8001984:	f000 fd16 	bl	80023b4 <HAL_GPIO_WritePin>
}
 8001988:	bf00      	nop
 800198a:	3728      	adds	r7, #40	; 0x28
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	08007b78 	.word	0x08007b78
 8001998:	20000000 	.word	0x20000000

0800199c <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <BSP_LED_On+0x2c>)
 80019aa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	4a06      	ldr	r2, [pc, #24]	; (80019cc <BSP_LED_On+0x30>)
 80019b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019b6:	2201      	movs	r2, #1
 80019b8:	4619      	mov	r1, r3
 80019ba:	f000 fcfb 	bl	80023b4 <HAL_GPIO_WritePin>
}
 80019be:	bf00      	nop
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000000 	.word	0x20000000
 80019cc:	08007b78 	.word	0x08007b78

080019d0 <BSP_LED_Off>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	4a07      	ldr	r2, [pc, #28]	; (80019fc <BSP_LED_Off+0x2c>)
 80019de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <BSP_LED_Off+0x30>)
 80019e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019ea:	2200      	movs	r2, #0
 80019ec:	4619      	mov	r1, r3
 80019ee:	f000 fce1 	bl	80023b4 <HAL_GPIO_WritePin>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000000 	.word	0x20000000
 8001a00:	08007b78 	.word	0x08007b78

08001a04 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	71fb      	strb	r3, [r7, #7]
 8001a10:	4613      	mov	r3, r2
 8001a12:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8001a14:	2300      	movs	r3, #0
 8001a16:	60bb      	str	r3, [r7, #8]
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <BSP_PB_Init+0xa4>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	4a22      	ldr	r2, [pc, #136]	; (8001aa8 <BSP_PB_Init+0xa4>)
 8001a1e:	f043 0304 	orr.w	r3, r3, #4
 8001a22:	6313      	str	r3, [r2, #48]	; 0x30
 8001a24:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <BSP_PB_Init+0xa4>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001a30:	79bb      	ldrb	r3, [r7, #6]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d112      	bne.n	8001a5c <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001a36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a40:	2302      	movs	r3, #2
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	4a18      	ldr	r2, [pc, #96]	; (8001aac <BSP_PB_Init+0xa8>)
 8001a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a50:	f107 020c 	add.w	r2, r7, #12
 8001a54:	4611      	mov	r1, r2
 8001a56:	4618      	mov	r0, r3
 8001a58:	f000 fae8 	bl	800202c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001a5c:	79bb      	ldrb	r3, [r7, #6]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d11d      	bne.n	8001a9e <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8001a62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a66:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001a6c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001a70:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	; (8001aac <BSP_PB_Init+0xa8>)
 8001a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7a:	f107 020c 	add.w	r2, r7, #12
 8001a7e:	4611      	mov	r1, r2
 8001a80:	4618      	mov	r0, r3
 8001a82:	f000 fad3 	bl	800202c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8001a86:	2328      	movs	r3, #40	; 0x28
 8001a88:	b25b      	sxtb	r3, r3
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	210f      	movs	r1, #15
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fa95 	bl	8001fbe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8001a94:	2328      	movs	r3, #40	; 0x28
 8001a96:	b25b      	sxtb	r3, r3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 faac 	bl	8001ff6 <HAL_NVIC_EnableIRQ>
  }
}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	2000000c 	.word	0x2000000c

08001ab0 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8001aba:	79fb      	ldrb	r3, [r7, #7]
 8001abc:	4a06      	ldr	r2, [pc, #24]	; (8001ad8 <BSP_PB_GetState+0x28>)
 8001abe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac6:	4611      	mov	r1, r2
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f000 fc5b 	bl	8002384 <HAL_GPIO_ReadPin>
 8001ace:	4603      	mov	r3, r0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	2000000c 	.word	0x2000000c

08001adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <SystemInit+0x60>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ae6:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <SystemInit+0x60>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <SystemInit+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <SystemInit+0x64>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001afc:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <SystemInit+0x64>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b02:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <SystemInit+0x64>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a0e      	ldr	r2, [pc, #56]	; (8001b40 <SystemInit+0x64>)
 8001b08:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b10:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <SystemInit+0x64>)
 8001b14:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <SystemInit+0x68>)
 8001b16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <SystemInit+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a08      	ldr	r2, [pc, #32]	; (8001b40 <SystemInit+0x64>)
 8001b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <SystemInit+0x64>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <SystemInit+0x60>)
 8001b2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b30:	609a      	str	r2, [r3, #8]
#endif
}
 8001b32:	bf00      	nop
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000ed00 	.word	0xe000ed00
 8001b40:	40023800 	.word	0x40023800
 8001b44:	24003010 	.word	0x24003010

08001b48 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001b5a:	e7fe      	b.n	8001b5a <HardFault_Handler+0x4>

08001b5c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001b60:	e7fe      	b.n	8001b60 <MemManage_Handler+0x4>

08001b62 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001b62:	b480      	push	{r7}
 8001b64:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001b66:	e7fe      	b.n	8001b66 <BusFault_Handler+0x4>

08001b68 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001b6c:	e7fe      	b.n	8001b6c <UsageFault_Handler+0x4>

08001b6e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001b9c:	f000 f914 	bl	8001dc8 <HAL_IncTick>
}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
	return 1;
 8001ba8:	2301      	movs	r3, #1
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr

08001bb4 <_kill>:

int _kill(int pid, int sig)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bbe:	f002 ffa5 	bl	8004b0c <__errno>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2216      	movs	r2, #22
 8001bc6:	601a      	str	r2, [r3, #0]
	return -1;
 8001bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <_exit>:

void _exit (int status)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	f7ff ffe7 	bl	8001bb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001be6:	e7fe      	b.n	8001be6 <_exit+0x12>

08001be8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
 8001bf8:	e00a      	b.n	8001c10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bfa:	f3af 8000 	nop.w
 8001bfe:	4601      	mov	r1, r0
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	60ba      	str	r2, [r7, #8]
 8001c06:	b2ca      	uxtb	r2, r1
 8001c08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	617b      	str	r3, [r7, #20]
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	dbf0      	blt.n	8001bfa <_read+0x12>
	}

return len;
 8001c18:	687b      	ldr	r3, [r7, #4]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c22:	b580      	push	{r7, lr}
 8001c24:	b086      	sub	sp, #24
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	60f8      	str	r0, [r7, #12]
 8001c2a:	60b9      	str	r1, [r7, #8]
 8001c2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]
 8001c32:	e009      	b.n	8001c48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	60ba      	str	r2, [r7, #8]
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	3301      	adds	r3, #1
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	697a      	ldr	r2, [r7, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dbf1      	blt.n	8001c34 <_write+0x12>
	}
	return len;
 8001c50:	687b      	ldr	r3, [r7, #4]
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <_close>:

int _close(int file)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
	return -1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c82:	605a      	str	r2, [r3, #4]
	return 0;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr

08001c92 <_isatty>:

int _isatty(int file)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
	return 1;
 8001c9a:	2301      	movs	r3, #1
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
	return 0;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3714      	adds	r7, #20
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
	...

08001cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ccc:	4a14      	ldr	r2, [pc, #80]	; (8001d20 <_sbrk+0x5c>)
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <_sbrk+0x60>)
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd8:	4b13      	ldr	r3, [pc, #76]	; (8001d28 <_sbrk+0x64>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d102      	bne.n	8001ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <_sbrk+0x64>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <_sbrk+0x68>)
 8001ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <_sbrk+0x64>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4413      	add	r3, r2
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d207      	bcs.n	8001d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cf4:	f002 ff0a 	bl	8004b0c <__errno>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d02:	e009      	b.n	8001d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <_sbrk+0x64>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <_sbrk+0x64>)
 8001d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d16:	68fb      	ldr	r3, [r7, #12]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3718      	adds	r7, #24
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	20030000 	.word	0x20030000
 8001d24:	00000400 	.word	0x00000400
 8001d28:	2000026c 	.word	0x2000026c
 8001d2c:	20000310 	.word	0x20000310

08001d30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d34:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <HAL_Init+0x34>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <HAL_Init+0x34>)
 8001d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d3e:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d40:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <HAL_Init+0x34>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_Init+0x34>)
 8001d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	f000 f92b 	bl	8001fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d52:	200f      	movs	r0, #15
 8001d54:	f000 f808 	bl	8001d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d58:	f001 fbdc 	bl	8003514 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023c00 	.word	0x40023c00

08001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <HAL_InitTick+0x54>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_InitTick+0x58>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 f943 	bl	8002012 <HAL_SYSTICK_Config>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e00e      	b.n	8001db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2b0f      	cmp	r3, #15
 8001d9a:	d80a      	bhi.n	8001db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001da4:	f000 f90b 	bl	8001fbe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001da8:	4a06      	ldr	r2, [pc, #24]	; (8001dc4 <HAL_InitTick+0x5c>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
 8001db0:	e000      	b.n	8001db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000010 	.word	0x20000010
 8001dc0:	20000018 	.word	0x20000018
 8001dc4:	20000014 	.word	0x20000014

08001dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <HAL_IncTick+0x20>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <HAL_IncTick+0x24>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	4a04      	ldr	r2, [pc, #16]	; (8001dec <HAL_IncTick+0x24>)
 8001dda:	6013      	str	r3, [r2, #0]
}
 8001ddc:	bf00      	nop
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000018 	.word	0x20000018
 8001dec:	20000270 	.word	0x20000270

08001df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return uwTick;
 8001df4:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <HAL_GetTick+0x14>)
 8001df6:	681b      	ldr	r3, [r3, #0]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20000270 	.word	0x20000270

08001e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1e:	68ba      	ldr	r2, [r7, #8]
 8001e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e24:	4013      	ands	r3, r2
 8001e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3a:	4a04      	ldr	r2, [pc, #16]	; (8001e4c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	60d3      	str	r3, [r2, #12]
}
 8001e40:	bf00      	nop
 8001e42:	3714      	adds	r7, #20
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00

08001e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e54:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <__NVIC_GetPriorityGrouping+0x18>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	0a1b      	lsrs	r3, r3, #8
 8001e5a:	f003 0307 	and.w	r3, r3, #7
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	e000ed00 	.word	0xe000ed00

08001e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	db0b      	blt.n	8001e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	f003 021f 	and.w	r2, r3, #31
 8001e84:	4907      	ldr	r1, [pc, #28]	; (8001ea4 <__NVIC_EnableIRQ+0x38>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	095b      	lsrs	r3, r3, #5
 8001e8c:	2001      	movs	r0, #1
 8001e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e96:	bf00      	nop
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000e100 	.word	0xe000e100

08001ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db0a      	blt.n	8001ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	490c      	ldr	r1, [pc, #48]	; (8001ef4 <__NVIC_SetPriority+0x4c>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed0:	e00a      	b.n	8001ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4908      	ldr	r1, [pc, #32]	; (8001ef8 <__NVIC_SetPriority+0x50>)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	761a      	strb	r2, [r3, #24]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000e100 	.word	0xe000e100
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f1c3 0307 	rsb	r3, r3, #7
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	bf28      	it	cs
 8001f1a:	2304      	movcs	r3, #4
 8001f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d902      	bls.n	8001f2c <NVIC_EncodePriority+0x30>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b03      	subs	r3, #3
 8001f2a:	e000      	b.n	8001f2e <NVIC_EncodePriority+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	4313      	orrs	r3, r2
         );
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f74:	d301      	bcc.n	8001f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00f      	b.n	8001f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <SysTick_Config+0x40>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f82:	210f      	movs	r1, #15
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f88:	f7ff ff8e 	bl	8001ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <SysTick_Config+0x40>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <SysTick_Config+0x40>)
 8001f94:	2207      	movs	r2, #7
 8001f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	e000e010 	.word	0xe000e010

08001fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff29 	bl	8001e08 <__NVIC_SetPriorityGrouping>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd0:	f7ff ff3e 	bl	8001e50 <__NVIC_GetPriorityGrouping>
 8001fd4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f7ff ff8e 	bl	8001efc <NVIC_EncodePriority>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff5d 	bl	8001ea8 <__NVIC_SetPriority>
}
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002000:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff ff31 	bl	8001e6c <__NVIC_EnableIRQ>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}

08002012 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b082      	sub	sp, #8
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ffa2 	bl	8001f64 <SysTick_Config>
 8002020:	4603      	mov	r3, r0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
	...

0800202c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	; 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800203e:	2300      	movs	r3, #0
 8002040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002042:	2300      	movs	r3, #0
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e177      	b.n	8002338 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002048:	2201      	movs	r2, #1
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	429a      	cmp	r2, r3
 8002062:	f040 8166 	bne.w	8002332 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d005      	beq.n	800207e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800207a:	2b02      	cmp	r3, #2
 800207c:	d130      	bne.n	80020e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2203      	movs	r2, #3
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4013      	ands	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020b4:	2201      	movs	r2, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	091b      	lsrs	r3, r3, #4
 80020ca:	f003 0201 	and.w	r2, r3, #1
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d017      	beq.n	800211c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	2203      	movs	r2, #3
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	43db      	mvns	r3, r3
 80020fe:	69ba      	ldr	r2, [r7, #24]
 8002100:	4013      	ands	r3, r2
 8002102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d123      	bne.n	8002170 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	08da      	lsrs	r2, r3, #3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3208      	adds	r2, #8
 8002130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002134:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	220f      	movs	r2, #15
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0307 	and.w	r3, r3, #7
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4313      	orrs	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	08da      	lsrs	r2, r3, #3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	3208      	adds	r2, #8
 800216a:	69b9      	ldr	r1, [r7, #24]
 800216c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2203      	movs	r2, #3
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	69ba      	ldr	r2, [r7, #24]
 8002184:	4013      	ands	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0203 	and.w	r2, r3, #3
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4313      	orrs	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f000 80c0 	beq.w	8002332 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b66      	ldr	r3, [pc, #408]	; (8002350 <HAL_GPIO_Init+0x324>)
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	4a65      	ldr	r2, [pc, #404]	; (8002350 <HAL_GPIO_Init+0x324>)
 80021bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021c0:	6453      	str	r3, [r2, #68]	; 0x44
 80021c2:	4b63      	ldr	r3, [pc, #396]	; (8002350 <HAL_GPIO_Init+0x324>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ce:	4a61      	ldr	r2, [pc, #388]	; (8002354 <HAL_GPIO_Init+0x328>)
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	089b      	lsrs	r3, r3, #2
 80021d4:	3302      	adds	r3, #2
 80021d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	220f      	movs	r2, #15
 80021e6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ea:	43db      	mvns	r3, r3
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	4013      	ands	r3, r2
 80021f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a58      	ldr	r2, [pc, #352]	; (8002358 <HAL_GPIO_Init+0x32c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d037      	beq.n	800226a <HAL_GPIO_Init+0x23e>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a57      	ldr	r2, [pc, #348]	; (800235c <HAL_GPIO_Init+0x330>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d031      	beq.n	8002266 <HAL_GPIO_Init+0x23a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a56      	ldr	r2, [pc, #344]	; (8002360 <HAL_GPIO_Init+0x334>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d02b      	beq.n	8002262 <HAL_GPIO_Init+0x236>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a55      	ldr	r2, [pc, #340]	; (8002364 <HAL_GPIO_Init+0x338>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d025      	beq.n	800225e <HAL_GPIO_Init+0x232>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a54      	ldr	r2, [pc, #336]	; (8002368 <HAL_GPIO_Init+0x33c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d01f      	beq.n	800225a <HAL_GPIO_Init+0x22e>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a53      	ldr	r2, [pc, #332]	; (800236c <HAL_GPIO_Init+0x340>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d019      	beq.n	8002256 <HAL_GPIO_Init+0x22a>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a52      	ldr	r2, [pc, #328]	; (8002370 <HAL_GPIO_Init+0x344>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d013      	beq.n	8002252 <HAL_GPIO_Init+0x226>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a51      	ldr	r2, [pc, #324]	; (8002374 <HAL_GPIO_Init+0x348>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00d      	beq.n	800224e <HAL_GPIO_Init+0x222>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a50      	ldr	r2, [pc, #320]	; (8002378 <HAL_GPIO_Init+0x34c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <HAL_GPIO_Init+0x21e>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a4f      	ldr	r2, [pc, #316]	; (800237c <HAL_GPIO_Init+0x350>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d101      	bne.n	8002246 <HAL_GPIO_Init+0x21a>
 8002242:	2309      	movs	r3, #9
 8002244:	e012      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002246:	230a      	movs	r3, #10
 8002248:	e010      	b.n	800226c <HAL_GPIO_Init+0x240>
 800224a:	2308      	movs	r3, #8
 800224c:	e00e      	b.n	800226c <HAL_GPIO_Init+0x240>
 800224e:	2307      	movs	r3, #7
 8002250:	e00c      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002252:	2306      	movs	r3, #6
 8002254:	e00a      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002256:	2305      	movs	r3, #5
 8002258:	e008      	b.n	800226c <HAL_GPIO_Init+0x240>
 800225a:	2304      	movs	r3, #4
 800225c:	e006      	b.n	800226c <HAL_GPIO_Init+0x240>
 800225e:	2303      	movs	r3, #3
 8002260:	e004      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002262:	2302      	movs	r3, #2
 8002264:	e002      	b.n	800226c <HAL_GPIO_Init+0x240>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_GPIO_Init+0x240>
 800226a:	2300      	movs	r3, #0
 800226c:	69fa      	ldr	r2, [r7, #28]
 800226e:	f002 0203 	and.w	r2, r2, #3
 8002272:	0092      	lsls	r2, r2, #2
 8002274:	4093      	lsls	r3, r2
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800227c:	4935      	ldr	r1, [pc, #212]	; (8002354 <HAL_GPIO_Init+0x328>)
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	089b      	lsrs	r3, r3, #2
 8002282:	3302      	adds	r3, #2
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800228a:	4b3d      	ldr	r3, [pc, #244]	; (8002380 <HAL_GPIO_Init+0x354>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022ae:	4a34      	ldr	r2, [pc, #208]	; (8002380 <HAL_GPIO_Init+0x354>)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022b4:	4b32      	ldr	r3, [pc, #200]	; (8002380 <HAL_GPIO_Init+0x354>)
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d8:	4a29      	ldr	r2, [pc, #164]	; (8002380 <HAL_GPIO_Init+0x354>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022de:	4b28      	ldr	r3, [pc, #160]	; (8002380 <HAL_GPIO_Init+0x354>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	43db      	mvns	r3, r3
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	4013      	ands	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d003      	beq.n	8002302 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002302:	4a1f      	ldr	r2, [pc, #124]	; (8002380 <HAL_GPIO_Init+0x354>)
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002308:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <HAL_GPIO_Init+0x354>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800232c:	4a14      	ldr	r2, [pc, #80]	; (8002380 <HAL_GPIO_Init+0x354>)
 800232e:	69bb      	ldr	r3, [r7, #24]
 8002330:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3301      	adds	r3, #1
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	2b0f      	cmp	r3, #15
 800233c:	f67f ae84 	bls.w	8002048 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002340:	bf00      	nop
 8002342:	bf00      	nop
 8002344:	3724      	adds	r7, #36	; 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	40023800 	.word	0x40023800
 8002354:	40013800 	.word	0x40013800
 8002358:	40020000 	.word	0x40020000
 800235c:	40020400 	.word	0x40020400
 8002360:	40020800 	.word	0x40020800
 8002364:	40020c00 	.word	0x40020c00
 8002368:	40021000 	.word	0x40021000
 800236c:	40021400 	.word	0x40021400
 8002370:	40021800 	.word	0x40021800
 8002374:	40021c00 	.word	0x40021c00
 8002378:	40022000 	.word	0x40022000
 800237c:	40022400 	.word	0x40022400
 8002380:	40013c00 	.word	0x40013c00

08002384 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	887b      	ldrh	r3, [r7, #2]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d002      	beq.n	80023a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800239c:	2301      	movs	r3, #1
 800239e:	73fb      	strb	r3, [r7, #15]
 80023a0:	e001      	b.n	80023a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	807b      	strh	r3, [r7, #2]
 80023c0:	4613      	mov	r3, r2
 80023c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023c4:	787b      	ldrb	r3, [r7, #1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023ca:	887a      	ldrh	r2, [r7, #2]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023d0:	e003      	b.n	80023da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023d2:	887b      	ldrh	r3, [r7, #2]
 80023d4:	041a      	lsls	r2, r3, #16
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	619a      	str	r2, [r3, #24]
}
 80023da:	bf00      	nop
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e12b      	b.n	8002652 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002400:	b2db      	uxtb	r3, r3
 8002402:	2b00      	cmp	r3, #0
 8002404:	d106      	bne.n	8002414 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f92e 	bl	8002670 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2224      	movs	r2, #36	; 0x24
 8002418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800243a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800244a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800244c:	f001 fd2a 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 8002450:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	4a81      	ldr	r2, [pc, #516]	; (800265c <HAL_I2C_Init+0x274>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d807      	bhi.n	800246c <HAL_I2C_Init+0x84>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	4a80      	ldr	r2, [pc, #512]	; (8002660 <HAL_I2C_Init+0x278>)
 8002460:	4293      	cmp	r3, r2
 8002462:	bf94      	ite	ls
 8002464:	2301      	movls	r3, #1
 8002466:	2300      	movhi	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e006      	b.n	800247a <HAL_I2C_Init+0x92>
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4a7d      	ldr	r2, [pc, #500]	; (8002664 <HAL_I2C_Init+0x27c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	bf94      	ite	ls
 8002474:	2301      	movls	r3, #1
 8002476:	2300      	movhi	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0e7      	b.n	8002652 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4a78      	ldr	r2, [pc, #480]	; (8002668 <HAL_I2C_Init+0x280>)
 8002486:	fba2 2303 	umull	r2, r3, r2, r3
 800248a:	0c9b      	lsrs	r3, r3, #18
 800248c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68ba      	ldr	r2, [r7, #8]
 800249e:	430a      	orrs	r2, r1
 80024a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	4a6a      	ldr	r2, [pc, #424]	; (800265c <HAL_I2C_Init+0x274>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d802      	bhi.n	80024bc <HAL_I2C_Init+0xd4>
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	3301      	adds	r3, #1
 80024ba:	e009      	b.n	80024d0 <HAL_I2C_Init+0xe8>
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024c2:	fb02 f303 	mul.w	r3, r2, r3
 80024c6:	4a69      	ldr	r2, [pc, #420]	; (800266c <HAL_I2C_Init+0x284>)
 80024c8:	fba2 2303 	umull	r2, r3, r2, r3
 80024cc:	099b      	lsrs	r3, r3, #6
 80024ce:	3301      	adds	r3, #1
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	430b      	orrs	r3, r1
 80024d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	495c      	ldr	r1, [pc, #368]	; (800265c <HAL_I2C_Init+0x274>)
 80024ec:	428b      	cmp	r3, r1
 80024ee:	d819      	bhi.n	8002524 <HAL_I2C_Init+0x13c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	1e59      	subs	r1, r3, #1
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	005b      	lsls	r3, r3, #1
 80024fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80024fe:	1c59      	adds	r1, r3, #1
 8002500:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002504:	400b      	ands	r3, r1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_I2C_Init+0x138>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1e59      	subs	r1, r3, #1
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fbb1 f3f3 	udiv	r3, r1, r3
 8002518:	3301      	adds	r3, #1
 800251a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251e:	e051      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 8002520:	2304      	movs	r3, #4
 8002522:	e04f      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d111      	bne.n	8002550 <HAL_I2C_Init+0x168>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	1e58      	subs	r0, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	460b      	mov	r3, r1
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	440b      	add	r3, r1
 800253a:	fbb0 f3f3 	udiv	r3, r0, r3
 800253e:	3301      	adds	r3, #1
 8002540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e012      	b.n	8002576 <HAL_I2C_Init+0x18e>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	0099      	lsls	r1, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	fbb0 f3f3 	udiv	r3, r0, r3
 8002566:	3301      	adds	r3, #1
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Init+0x196>
 800257a:	2301      	movs	r3, #1
 800257c:	e022      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10e      	bne.n	80025a4 <HAL_I2C_Init+0x1bc>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	1e58      	subs	r0, r3, #1
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	460b      	mov	r3, r1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	440b      	add	r3, r1
 8002594:	fbb0 f3f3 	udiv	r3, r0, r3
 8002598:	3301      	adds	r3, #1
 800259a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a2:	e00f      	b.n	80025c4 <HAL_I2C_Init+0x1dc>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e58      	subs	r0, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6859      	ldr	r1, [r3, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	0099      	lsls	r1, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ba:	3301      	adds	r3, #1
 80025bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	6809      	ldr	r1, [r1, #0]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69da      	ldr	r2, [r3, #28]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	431a      	orrs	r2, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6911      	ldr	r1, [r2, #16]
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68d2      	ldr	r2, [r2, #12]
 80025fe:	4311      	orrs	r1, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	430b      	orrs	r3, r1
 8002606:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695a      	ldr	r2, [r3, #20]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2200      	movs	r2, #0
 800264c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002650:	2300      	movs	r3, #0
}
 8002652:	4618      	mov	r0, r3
 8002654:	3710      	adds	r7, #16
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	000186a0 	.word	0x000186a0
 8002660:	001e847f 	.word	0x001e847f
 8002664:	003d08ff 	.word	0x003d08ff
 8002668:	431bde83 	.word	0x431bde83
 800266c:	10624dd3 	.word	0x10624dd3

08002670 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af02      	add	r7, sp, #8
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	4608      	mov	r0, r1
 800268e:	4611      	mov	r1, r2
 8002690:	461a      	mov	r2, r3
 8002692:	4603      	mov	r3, r0
 8002694:	817b      	strh	r3, [r7, #10]
 8002696:	460b      	mov	r3, r1
 8002698:	813b      	strh	r3, [r7, #8]
 800269a:	4613      	mov	r3, r2
 800269c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800269e:	f7ff fba7 	bl	8001df0 <HAL_GetTick>
 80026a2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	2b20      	cmp	r3, #32
 80026ae:	f040 80d9 	bne.w	8002864 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	2319      	movs	r3, #25
 80026b8:	2201      	movs	r2, #1
 80026ba:	496d      	ldr	r1, [pc, #436]	; (8002870 <HAL_I2C_Mem_Write+0x1ec>)
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 fc7f 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80026c8:	2302      	movs	r3, #2
 80026ca:	e0cc      	b.n	8002866 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_I2C_Mem_Write+0x56>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e0c5      	b.n	8002866 <HAL_I2C_Mem_Write+0x1e2>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d007      	beq.n	8002700 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800270e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2221      	movs	r2, #33	; 0x21
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2240      	movs	r2, #64	; 0x40
 800271c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	6a3a      	ldr	r2, [r7, #32]
 800272a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002730:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002736:	b29a      	uxth	r2, r3
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	4a4d      	ldr	r2, [pc, #308]	; (8002874 <HAL_I2C_Mem_Write+0x1f0>)
 8002740:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002742:	88f8      	ldrh	r0, [r7, #6]
 8002744:	893a      	ldrh	r2, [r7, #8]
 8002746:	8979      	ldrh	r1, [r7, #10]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	4603      	mov	r3, r0
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fab6 	bl	8002cc4 <I2C_RequestMemoryWrite>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d052      	beq.n	8002804 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e081      	b.n	8002866 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f000 fd00 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00d      	beq.n	800278e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002776:	2b04      	cmp	r3, #4
 8002778:	d107      	bne.n	800278a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002788:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e06b      	b.n	8002866 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	1c5a      	adds	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	3b01      	subs	r3, #1
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	695b      	ldr	r3, [r3, #20]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d11b      	bne.n	8002804 <HAL_I2C_Mem_Write+0x180>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d017      	beq.n	8002804 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d8:	781a      	ldrb	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1aa      	bne.n	8002762 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 fcec 	bl	80031ee <I2C_WaitOnBTFFlagUntilTimeout>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00d      	beq.n	8002838 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002820:	2b04      	cmp	r3, #4
 8002822:	d107      	bne.n	8002834 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002832:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e016      	b.n	8002866 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002846:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2220      	movs	r2, #32
 800284c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002860:	2300      	movs	r3, #0
 8002862:	e000      	b.n	8002866 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002864:	2302      	movs	r3, #2
  }
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	00100002 	.word	0x00100002
 8002874:	ffff0000 	.word	0xffff0000

08002878 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b08c      	sub	sp, #48	; 0x30
 800287c:	af02      	add	r7, sp, #8
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	4608      	mov	r0, r1
 8002882:	4611      	mov	r1, r2
 8002884:	461a      	mov	r2, r3
 8002886:	4603      	mov	r3, r0
 8002888:	817b      	strh	r3, [r7, #10]
 800288a:	460b      	mov	r3, r1
 800288c:	813b      	strh	r3, [r7, #8]
 800288e:	4613      	mov	r3, r2
 8002890:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002892:	f7ff faad 	bl	8001df0 <HAL_GetTick>
 8002896:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	f040 8208 	bne.w	8002cb6 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	9300      	str	r3, [sp, #0]
 80028aa:	2319      	movs	r3, #25
 80028ac:	2201      	movs	r2, #1
 80028ae:	497b      	ldr	r1, [pc, #492]	; (8002a9c <HAL_I2C_Mem_Read+0x224>)
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fb85 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d001      	beq.n	80028c0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80028bc:	2302      	movs	r3, #2
 80028be:	e1fb      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_I2C_Mem_Read+0x56>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e1f4      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x440>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d007      	beq.n	80028f4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 0201 	orr.w	r2, r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002902:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2222      	movs	r2, #34	; 0x22
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2240      	movs	r2, #64	; 0x40
 8002910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4a5b      	ldr	r2, [pc, #364]	; (8002aa0 <HAL_I2C_Mem_Read+0x228>)
 8002934:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002936:	88f8      	ldrh	r0, [r7, #6]
 8002938:	893a      	ldrh	r2, [r7, #8]
 800293a:	8979      	ldrh	r1, [r7, #10]
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	4603      	mov	r3, r0
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 fa52 	bl	8002df0 <I2C_RequestMemoryRead>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e1b0      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800295a:	2b00      	cmp	r3, #0
 800295c:	d113      	bne.n	8002986 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295e:	2300      	movs	r3, #0
 8002960:	623b      	str	r3, [r7, #32]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	623b      	str	r3, [r7, #32]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	623b      	str	r3, [r7, #32]
 8002972:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e184      	b.n	8002c90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298a:	2b01      	cmp	r3, #1
 800298c:	d11b      	bne.n	80029c6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800299c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	61fb      	str	r3, [r7, #28]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	61fb      	str	r3, [r7, #28]
 80029b2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	e164      	b.n	8002c90 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d11b      	bne.n	8002a06 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029dc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ee:	2300      	movs	r3, #0
 80029f0:	61bb      	str	r3, [r7, #24]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	695b      	ldr	r3, [r3, #20]
 80029f8:	61bb      	str	r3, [r7, #24]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	e144      	b.n	8002c90 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a06:	2300      	movs	r3, #0
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a1c:	e138      	b.n	8002c90 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	f200 80f1 	bhi.w	8002c0a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d123      	bne.n	8002a78 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 fc1b 	bl	8003270 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e139      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	b2d2      	uxtb	r2, r2
 8002a50:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	1c5a      	adds	r2, r3, #1
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a76:	e10b      	b.n	8002c90 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d14e      	bne.n	8002b1e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a86:	2200      	movs	r2, #0
 8002a88:	4906      	ldr	r1, [pc, #24]	; (8002aa4 <HAL_I2C_Mem_Read+0x22c>)
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 fa98 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d008      	beq.n	8002aa8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e10e      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x440>
 8002a9a:	bf00      	nop
 8002a9c:	00100002 	.word	0x00100002
 8002aa0:	ffff0000 	.word	0xffff0000
 8002aa4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	b2d2      	uxtb	r2, r2
 8002af6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afc:	1c5a      	adds	r2, r3, #1
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b1c:	e0b8      	b.n	8002c90 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b24:	2200      	movs	r2, #0
 8002b26:	4966      	ldr	r1, [pc, #408]	; (8002cc0 <HAL_I2C_Mem_Read+0x448>)
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 fa49 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0bf      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691a      	ldr	r2, [r3, #16]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5a:	1c5a      	adds	r2, r3, #1
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b64:	3b01      	subs	r3, #1
 8002b66:	b29a      	uxth	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b80:	2200      	movs	r2, #0
 8002b82:	494f      	ldr	r1, [pc, #316]	; (8002cc0 <HAL_I2C_Mem_Read+0x448>)
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fa1b 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e091      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	691a      	ldr	r2, [r3, #16]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	b2d2      	uxtb	r2, r2
 8002bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb6:	1c5a      	adds	r2, r3, #1
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bfe:	b29b      	uxth	r3, r3
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b29a      	uxth	r2, r3
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c08:	e042      	b.n	8002c90 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f000 fb2e 	bl	8003270 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e04c      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	691a      	ldr	r2, [r3, #16]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	1c5a      	adds	r2, r3, #1
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b29a      	uxth	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d118      	bne.n	8002c90 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f47f aec2 	bne.w	8002a1e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	e000      	b.n	8002cb8 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002cb6:	2302      	movs	r3, #2
  }
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3728      	adds	r7, #40	; 0x28
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	00010004 	.word	0x00010004

08002cc4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	4608      	mov	r0, r1
 8002cce:	4611      	mov	r1, r2
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	817b      	strh	r3, [r7, #10]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	813b      	strh	r3, [r7, #8]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f960 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d14:	d103      	bne.n	8002d1e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d1c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e05f      	b.n	8002de2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d22:	897b      	ldrh	r3, [r7, #10]
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	461a      	mov	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d30:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	6a3a      	ldr	r2, [r7, #32]
 8002d36:	492d      	ldr	r1, [pc, #180]	; (8002dec <I2C_RequestMemoryWrite+0x128>)
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f998 	bl	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e04c      	b.n	8002de2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695b      	ldr	r3, [r3, #20]
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d60:	6a39      	ldr	r1, [r7, #32]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fa02 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00d      	beq.n	8002d8a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	2b04      	cmp	r3, #4
 8002d74:	d107      	bne.n	8002d86 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d84:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e02b      	b.n	8002de2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d90:	893b      	ldrh	r3, [r7, #8]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	611a      	str	r2, [r3, #16]
 8002d9a:	e021      	b.n	8002de0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d9c:	893b      	ldrh	r3, [r7, #8]
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	b29b      	uxth	r3, r3
 8002da2:	b2da      	uxtb	r2, r3
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dac:	6a39      	ldr	r1, [r7, #32]
 8002dae:	68f8      	ldr	r0, [r7, #12]
 8002db0:	f000 f9dc 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00d      	beq.n	8002dd6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d107      	bne.n	8002dd2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e005      	b.n	8002de2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002dd6:	893b      	ldrh	r3, [r7, #8]
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3718      	adds	r7, #24
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	00010002 	.word	0x00010002

08002df0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af02      	add	r7, sp, #8
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	4608      	mov	r0, r1
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	817b      	strh	r3, [r7, #10]
 8002e02:	460b      	mov	r3, r1
 8002e04:	813b      	strh	r3, [r7, #8]
 8002e06:	4613      	mov	r3, r2
 8002e08:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e18:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e36:	68f8      	ldr	r0, [r7, #12]
 8002e38:	f000 f8c2 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00d      	beq.n	8002e5e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e50:	d103      	bne.n	8002e5a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e0aa      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e5e:	897b      	ldrh	r3, [r7, #10]
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	6a3a      	ldr	r2, [r7, #32]
 8002e72:	4952      	ldr	r1, [pc, #328]	; (8002fbc <I2C_RequestMemoryRead+0x1cc>)
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f8fa 	bl	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e097      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e84:	2300      	movs	r3, #0
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e9c:	6a39      	ldr	r1, [r7, #32]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f964 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00d      	beq.n	8002ec6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d107      	bne.n	8002ec2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ec0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e076      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002ecc:	893b      	ldrh	r3, [r7, #8]
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	611a      	str	r2, [r3, #16]
 8002ed6:	e021      	b.n	8002f1c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ed8:	893b      	ldrh	r3, [r7, #8]
 8002eda:	0a1b      	lsrs	r3, r3, #8
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	b2da      	uxtb	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee8:	6a39      	ldr	r1, [r7, #32]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 f93e 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d00d      	beq.n	8002f12 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2b04      	cmp	r3, #4
 8002efc:	d107      	bne.n	8002f0e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e050      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f12:	893b      	ldrh	r3, [r7, #8]
 8002f14:	b2da      	uxtb	r2, r3
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f1e:	6a39      	ldr	r1, [r7, #32]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 f923 	bl	800316c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00d      	beq.n	8002f48 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f30:	2b04      	cmp	r3, #4
 8002f32:	d107      	bne.n	8002f44 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f42:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e035      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f56:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	6a3b      	ldr	r3, [r7, #32]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f000 f82b 	bl	8002fc0 <I2C_WaitOnFlagUntilTimeout>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00d      	beq.n	8002f8c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f7e:	d103      	bne.n	8002f88 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e013      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f8c:	897b      	ldrh	r3, [r7, #10]
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	b2da      	uxtb	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9e:	6a3a      	ldr	r2, [r7, #32]
 8002fa0:	4906      	ldr	r1, [pc, #24]	; (8002fbc <I2C_RequestMemoryRead+0x1cc>)
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 f863 	bl	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	00010002 	.word	0x00010002

08002fc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	603b      	str	r3, [r7, #0]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fd0:	e025      	b.n	800301e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd8:	d021      	beq.n	800301e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fda:	f7fe ff09 	bl	8001df0 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d302      	bcc.n	8002ff0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d116      	bne.n	800301e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	f043 0220 	orr.w	r2, r3, #32
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e023      	b.n	8003066 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b01      	cmp	r3, #1
 8003026:	d10d      	bne.n	8003044 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf0c      	ite	eq
 800303a:	2301      	moveq	r3, #1
 800303c:	2300      	movne	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	461a      	mov	r2, r3
 8003042:	e00c      	b.n	800305e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	43da      	mvns	r2, r3
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4013      	ands	r3, r2
 8003050:	b29b      	uxth	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf0c      	ite	eq
 8003056:	2301      	moveq	r3, #1
 8003058:	2300      	movne	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	461a      	mov	r2, r3
 800305e:	79fb      	ldrb	r3, [r7, #7]
 8003060:	429a      	cmp	r2, r3
 8003062:	d0b6      	beq.n	8002fd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
 8003076:	60b9      	str	r1, [r7, #8]
 8003078:	607a      	str	r2, [r7, #4]
 800307a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800307c:	e051      	b.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308c:	d123      	bne.n	80030d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2220      	movs	r2, #32
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f043 0204 	orr.w	r2, r3, #4
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e046      	b.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030dc:	d021      	beq.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030de:	f7fe fe87 	bl	8001df0 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d302      	bcc.n	80030f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d116      	bne.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2220      	movs	r2, #32
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e020      	b.n	8003164 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	0c1b      	lsrs	r3, r3, #16
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b01      	cmp	r3, #1
 800312a:	d10c      	bne.n	8003146 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	43da      	mvns	r2, r3
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	4013      	ands	r3, r2
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	bf14      	ite	ne
 800313e:	2301      	movne	r3, #1
 8003140:	2300      	moveq	r3, #0
 8003142:	b2db      	uxtb	r3, r3
 8003144:	e00b      	b.n	800315e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	43da      	mvns	r2, r3
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	4013      	ands	r3, r2
 8003152:	b29b      	uxth	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	bf14      	ite	ne
 8003158:	2301      	movne	r3, #1
 800315a:	2300      	moveq	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d18d      	bne.n	800307e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003178:	e02d      	b.n	80031d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f000 f8ce 	bl	800331c <I2C_IsAcknowledgeFailed>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e02d      	b.n	80031e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003190:	d021      	beq.n	80031d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003192:	f7fe fe2d 	bl	8001df0 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d302      	bcc.n	80031a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d116      	bne.n	80031d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f043 0220 	orr.w	r2, r3, #32
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e007      	b.n	80031e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e0:	2b80      	cmp	r3, #128	; 0x80
 80031e2:	d1ca      	bne.n	800317a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031e4:	2300      	movs	r3, #0
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3710      	adds	r7, #16
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b084      	sub	sp, #16
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	60f8      	str	r0, [r7, #12]
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031fa:	e02d      	b.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 f88d 	bl	800331c <I2C_IsAcknowledgeFailed>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e02d      	b.n	8003268 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003212:	d021      	beq.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003214:	f7fe fdec 	bl	8001df0 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	429a      	cmp	r2, r3
 8003222:	d302      	bcc.n	800322a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d116      	bne.n	8003258 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e007      	b.n	8003268 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b04      	cmp	r3, #4
 8003264:	d1ca      	bne.n	80031fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800327c:	e042      	b.n	8003304 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b10      	cmp	r3, #16
 800328a:	d119      	bne.n	80032c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f06f 0210 	mvn.w	r2, #16
 8003294:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e029      	b.n	8003314 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032c0:	f7fe fd96 	bl	8001df0 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d302      	bcc.n	80032d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d116      	bne.n	8003304 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f043 0220 	orr.w	r2, r3, #32
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e007      	b.n	8003314 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d1b5      	bne.n	800327e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003332:	d11b      	bne.n	800336c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800333c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2200      	movs	r2, #0
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003358:	f043 0204 	orr.w	r2, r3, #4
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e000      	b.n	800336e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800337a:	b480      	push	{r7}
 800337c:	b083      	sub	sp, #12
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b20      	cmp	r3, #32
 800338e:	d129      	bne.n	80033e4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2224      	movs	r2, #36	; 0x24
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f022 0201 	bic.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0210 	bic.w	r2, r2, #16
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	683a      	ldr	r2, [r7, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b085      	sub	sp, #20
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80033fc:	2300      	movs	r3, #0
 80033fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b20      	cmp	r3, #32
 800340a:	d12a      	bne.n	8003462 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	; 0x24
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0201 	bic.w	r2, r2, #1
 8003422:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800342c:	89fb      	ldrh	r3, [r7, #14]
 800342e:	f023 030f 	bic.w	r3, r3, #15
 8003432:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	b29a      	uxth	r2, r3
 8003438:	89fb      	ldrh	r3, [r7, #14]
 800343a:	4313      	orrs	r3, r2
 800343c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	89fa      	ldrh	r2, [r7, #14]
 8003444:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0201 	orr.w	r2, r2, #1
 8003454:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2220      	movs	r2, #32
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	e000      	b.n	8003464 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003462:	2302      	movs	r3, #2
  }
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b08a      	sub	sp, #40	; 0x28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8003478:	2300      	movs	r3, #0
 800347a:	613b      	str	r3, [r7, #16]
 800347c:	4b23      	ldr	r3, [pc, #140]	; (800350c <HAL_UART_MspInit+0x9c>)
 800347e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003480:	4a22      	ldr	r2, [pc, #136]	; (800350c <HAL_UART_MspInit+0x9c>)
 8003482:	f043 0308 	orr.w	r3, r3, #8
 8003486:	6313      	str	r3, [r2, #48]	; 0x30
 8003488:	4b20      	ldr	r3, [pc, #128]	; (800350c <HAL_UART_MspInit+0x9c>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	4b1c      	ldr	r3, [pc, #112]	; (800350c <HAL_UART_MspInit+0x9c>)
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	4a1b      	ldr	r2, [pc, #108]	; (800350c <HAL_UART_MspInit+0x9c>)
 800349e:	f043 0308 	orr.w	r3, r3, #8
 80034a2:	6313      	str	r3, [r2, #48]	; 0x30
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_UART_MspInit+0x9c>)
 80034a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a8:	f003 0308 	and.w	r3, r3, #8
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80034b0:	2300      	movs	r3, #0
 80034b2:	60bb      	str	r3, [r7, #8]
 80034b4:	4b15      	ldr	r3, [pc, #84]	; (800350c <HAL_UART_MspInit+0x9c>)
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	4a14      	ldr	r2, [pc, #80]	; (800350c <HAL_UART_MspInit+0x9c>)
 80034ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034be:	6413      	str	r3, [r2, #64]	; 0x40
 80034c0:	4b12      	ldr	r3, [pc, #72]	; (800350c <HAL_UART_MspInit+0x9c>)
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c8:	60bb      	str	r3, [r7, #8]
 80034ca:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80034cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80034d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80034d2:	2302      	movs	r3, #2
 80034d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80034d6:	2301      	movs	r3, #1
 80034d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80034da:	2303      	movs	r3, #3
 80034dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80034de:	2307      	movs	r3, #7
 80034e0:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	4619      	mov	r1, r3
 80034e8:	4809      	ldr	r0, [pc, #36]	; (8003510 <HAL_UART_MspInit+0xa0>)
 80034ea:	f7fe fd9f 	bl	800202c <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80034ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80034f4:	2307      	movs	r3, #7
 80034f6:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80034f8:	f107 0314 	add.w	r3, r7, #20
 80034fc:	4619      	mov	r1, r3
 80034fe:	4804      	ldr	r0, [pc, #16]	; (8003510 <HAL_UART_MspInit+0xa0>)
 8003500:	f7fe fd94 	bl	800202c <HAL_GPIO_Init>
}
 8003504:	bf00      	nop
 8003506:	3728      	adds	r7, #40	; 0x28
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	40023800 	.word	0x40023800
 8003510:	40020c00 	.word	0x40020c00

08003514 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0

}
 8003518:	bf00      	nop
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
	...

08003524 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4b20      	ldr	r3, [pc, #128]	; (80035b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800353c:	6413      	str	r3, [r2, #64]	; 0x40
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800354a:	4b1b      	ldr	r3, [pc, #108]	; (80035b8 <HAL_PWREx_EnableOverDrive+0x94>)
 800354c:	2201      	movs	r2, #1
 800354e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003550:	f7fe fc4e 	bl	8001df0 <HAL_GetTick>
 8003554:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003556:	e009      	b.n	800356c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003558:	f7fe fc4a 	bl	8001df0 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003566:	d901      	bls.n	800356c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e01f      	b.n	80035ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <HAL_PWREx_EnableOverDrive+0x98>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003578:	d1ee      	bne.n	8003558 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800357a:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800357c:	2201      	movs	r2, #1
 800357e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003580:	f7fe fc36 	bl	8001df0 <HAL_GetTick>
 8003584:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003586:	e009      	b.n	800359c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003588:	f7fe fc32 	bl	8001df0 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003596:	d901      	bls.n	800359c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e007      	b.n	80035ac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800359c:	4b07      	ldr	r3, [pc, #28]	; (80035bc <HAL_PWREx_EnableOverDrive+0x98>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035a8:	d1ee      	bne.n	8003588 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3708      	adds	r7, #8
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40023800 	.word	0x40023800
 80035b8:	420e0040 	.word	0x420e0040
 80035bc:	40007000 	.word	0x40007000
 80035c0:	420e0044 	.word	0x420e0044

080035c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e267      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d075      	beq.n	80036ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035e2:	4b88      	ldr	r3, [pc, #544]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b04      	cmp	r3, #4
 80035ec:	d00c      	beq.n	8003608 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ee:	4b85      	ldr	r3, [pc, #532]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035f6:	2b08      	cmp	r3, #8
 80035f8:	d112      	bne.n	8003620 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035fa:	4b82      	ldr	r3, [pc, #520]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003602:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003606:	d10b      	bne.n	8003620 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003608:	4b7e      	ldr	r3, [pc, #504]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d05b      	beq.n	80036cc <HAL_RCC_OscConfig+0x108>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d157      	bne.n	80036cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e242      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003628:	d106      	bne.n	8003638 <HAL_RCC_OscConfig+0x74>
 800362a:	4b76      	ldr	r3, [pc, #472]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a75      	ldr	r2, [pc, #468]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e01d      	b.n	8003674 <HAL_RCC_OscConfig+0xb0>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003640:	d10c      	bne.n	800365c <HAL_RCC_OscConfig+0x98>
 8003642:	4b70      	ldr	r3, [pc, #448]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a6f      	ldr	r2, [pc, #444]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003648:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800364c:	6013      	str	r3, [r2, #0]
 800364e:	4b6d      	ldr	r3, [pc, #436]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6c      	ldr	r2, [pc, #432]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003654:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	e00b      	b.n	8003674 <HAL_RCC_OscConfig+0xb0>
 800365c:	4b69      	ldr	r3, [pc, #420]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a68      	ldr	r2, [pc, #416]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003662:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	4b66      	ldr	r3, [pc, #408]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a65      	ldr	r2, [pc, #404]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 800366e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003672:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d013      	beq.n	80036a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800367c:	f7fe fbb8 	bl	8001df0 <HAL_GetTick>
 8003680:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003682:	e008      	b.n	8003696 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003684:	f7fe fbb4 	bl	8001df0 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	2b64      	cmp	r3, #100	; 0x64
 8003690:	d901      	bls.n	8003696 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e207      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003696:	4b5b      	ldr	r3, [pc, #364]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f0      	beq.n	8003684 <HAL_RCC_OscConfig+0xc0>
 80036a2:	e014      	b.n	80036ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a4:	f7fe fba4 	bl	8001df0 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036ac:	f7fe fba0 	bl	8001df0 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b64      	cmp	r3, #100	; 0x64
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e1f3      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036be:	4b51      	ldr	r3, [pc, #324]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0xe8>
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d063      	beq.n	80037a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036da:	4b4a      	ldr	r3, [pc, #296]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 030c 	and.w	r3, r3, #12
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00b      	beq.n	80036fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e6:	4b47      	ldr	r3, [pc, #284]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ee:	2b08      	cmp	r3, #8
 80036f0:	d11c      	bne.n	800372c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f2:	4b44      	ldr	r3, [pc, #272]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d116      	bne.n	800372c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fe:	4b41      	ldr	r3, [pc, #260]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d005      	beq.n	8003716 <HAL_RCC_OscConfig+0x152>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d001      	beq.n	8003716 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e1c7      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003716:	4b3b      	ldr	r3, [pc, #236]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4937      	ldr	r1, [pc, #220]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003726:	4313      	orrs	r3, r2
 8003728:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800372a:	e03a      	b.n	80037a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003734:	4b34      	ldr	r3, [pc, #208]	; (8003808 <HAL_RCC_OscConfig+0x244>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373a:	f7fe fb59 	bl	8001df0 <HAL_GetTick>
 800373e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003740:	e008      	b.n	8003754 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003742:	f7fe fb55 	bl	8001df0 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e1a8      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003754:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d0f0      	beq.n	8003742 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003760:	4b28      	ldr	r3, [pc, #160]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4925      	ldr	r1, [pc, #148]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003770:	4313      	orrs	r3, r2
 8003772:	600b      	str	r3, [r1, #0]
 8003774:	e015      	b.n	80037a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003776:	4b24      	ldr	r3, [pc, #144]	; (8003808 <HAL_RCC_OscConfig+0x244>)
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800377c:	f7fe fb38 	bl	8001df0 <HAL_GetTick>
 8003780:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003782:	e008      	b.n	8003796 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003784:	f7fe fb34 	bl	8001df0 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e187      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003796:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0302 	and.w	r3, r3, #2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d1f0      	bne.n	8003784 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d036      	beq.n	800381c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d016      	beq.n	80037e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b6:	4b15      	ldr	r3, [pc, #84]	; (800380c <HAL_RCC_OscConfig+0x248>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037bc:	f7fe fb18 	bl	8001df0 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c4:	f7fe fb14 	bl	8001df0 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e167      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <HAL_RCC_OscConfig+0x240>)
 80037d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037da:	f003 0302 	and.w	r3, r3, #2
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0x200>
 80037e2:	e01b      	b.n	800381c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <HAL_RCC_OscConfig+0x248>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ea:	f7fe fb01 	bl	8001df0 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f0:	e00e      	b.n	8003810 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f2:	f7fe fafd 	bl	8001df0 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d907      	bls.n	8003810 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e150      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
 8003804:	40023800 	.word	0x40023800
 8003808:	42470000 	.word	0x42470000
 800380c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003810:	4b88      	ldr	r3, [pc, #544]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1ea      	bne.n	80037f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0304 	and.w	r3, r3, #4
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8097 	beq.w	8003958 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800382a:	2300      	movs	r3, #0
 800382c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382e:	4b81      	ldr	r3, [pc, #516]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d10f      	bne.n	800385a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800383a:	2300      	movs	r3, #0
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	4b7d      	ldr	r3, [pc, #500]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a7c      	ldr	r2, [pc, #496]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
 800384a:	4b7a      	ldr	r3, [pc, #488]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003852:	60bb      	str	r3, [r7, #8]
 8003854:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003856:	2301      	movs	r3, #1
 8003858:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800385a:	4b77      	ldr	r3, [pc, #476]	; (8003a38 <HAL_RCC_OscConfig+0x474>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003862:	2b00      	cmp	r3, #0
 8003864:	d118      	bne.n	8003898 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003866:	4b74      	ldr	r3, [pc, #464]	; (8003a38 <HAL_RCC_OscConfig+0x474>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a73      	ldr	r2, [pc, #460]	; (8003a38 <HAL_RCC_OscConfig+0x474>)
 800386c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003870:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003872:	f7fe fabd 	bl	8001df0 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800387a:	f7fe fab9 	bl	8001df0 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e10c      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <HAL_RCC_OscConfig+0x474>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d106      	bne.n	80038ae <HAL_RCC_OscConfig+0x2ea>
 80038a0:	4b64      	ldr	r3, [pc, #400]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a4:	4a63      	ldr	r2, [pc, #396]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038a6:	f043 0301 	orr.w	r3, r3, #1
 80038aa:	6713      	str	r3, [r2, #112]	; 0x70
 80038ac:	e01c      	b.n	80038e8 <HAL_RCC_OscConfig+0x324>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b05      	cmp	r3, #5
 80038b4:	d10c      	bne.n	80038d0 <HAL_RCC_OscConfig+0x30c>
 80038b6:	4b5f      	ldr	r3, [pc, #380]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ba:	4a5e      	ldr	r2, [pc, #376]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038bc:	f043 0304 	orr.w	r3, r3, #4
 80038c0:	6713      	str	r3, [r2, #112]	; 0x70
 80038c2:	4b5c      	ldr	r3, [pc, #368]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a5b      	ldr	r2, [pc, #364]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038c8:	f043 0301 	orr.w	r3, r3, #1
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70
 80038ce:	e00b      	b.n	80038e8 <HAL_RCC_OscConfig+0x324>
 80038d0:	4b58      	ldr	r3, [pc, #352]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d4:	4a57      	ldr	r2, [pc, #348]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	6713      	str	r3, [r2, #112]	; 0x70
 80038dc:	4b55      	ldr	r3, [pc, #340]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a54      	ldr	r2, [pc, #336]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80038e2:	f023 0304 	bic.w	r3, r3, #4
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d015      	beq.n	800391c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fe fa7e 	bl	8001df0 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f6:	e00a      	b.n	800390e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f8:	f7fe fa7a 	bl	8001df0 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	f241 3288 	movw	r2, #5000	; 0x1388
 8003906:	4293      	cmp	r3, r2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e0cb      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390e:	4b49      	ldr	r3, [pc, #292]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0ee      	beq.n	80038f8 <HAL_RCC_OscConfig+0x334>
 800391a:	e014      	b.n	8003946 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391c:	f7fe fa68 	bl	8001df0 <HAL_GetTick>
 8003920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003922:	e00a      	b.n	800393a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003924:	f7fe fa64 	bl	8001df0 <HAL_GetTick>
 8003928:	4602      	mov	r2, r0
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003932:	4293      	cmp	r3, r2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e0b5      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393a:	4b3e      	ldr	r3, [pc, #248]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 800393c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ee      	bne.n	8003924 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003946:	7dfb      	ldrb	r3, [r7, #23]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d105      	bne.n	8003958 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800394c:	4b39      	ldr	r3, [pc, #228]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 800394e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003950:	4a38      	ldr	r2, [pc, #224]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003956:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80a1 	beq.w	8003aa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003962:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 030c 	and.w	r3, r3, #12
 800396a:	2b08      	cmp	r3, #8
 800396c:	d05c      	beq.n	8003a28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d141      	bne.n	80039fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003976:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <HAL_RCC_OscConfig+0x478>)
 8003978:	2200      	movs	r2, #0
 800397a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe fa38 	bl	8001df0 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003984:	f7fe fa34 	bl	8001df0 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e087      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003996:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69da      	ldr	r2, [r3, #28]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6a1b      	ldr	r3, [r3, #32]
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	019b      	lsls	r3, r3, #6
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	3b01      	subs	r3, #1
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	061b      	lsls	r3, r3, #24
 80039c6:	491b      	ldr	r1, [pc, #108]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <HAL_RCC_OscConfig+0x478>)
 80039ce:	2201      	movs	r2, #1
 80039d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039d2:	f7fe fa0d 	bl	8001df0 <HAL_GetTick>
 80039d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d8:	e008      	b.n	80039ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039da:	f7fe fa09 	bl	8001df0 <HAL_GetTick>
 80039de:	4602      	mov	r2, r0
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	1ad3      	subs	r3, r2, r3
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d901      	bls.n	80039ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e05c      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ec:	4b11      	ldr	r3, [pc, #68]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d0f0      	beq.n	80039da <HAL_RCC_OscConfig+0x416>
 80039f8:	e054      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fa:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <HAL_RCC_OscConfig+0x478>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a00:	f7fe f9f6 	bl	8001df0 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a06:	e008      	b.n	8003a1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a08:	f7fe f9f2 	bl	8001df0 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e045      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1a:	4b06      	ldr	r3, [pc, #24]	; (8003a34 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1f0      	bne.n	8003a08 <HAL_RCC_OscConfig+0x444>
 8003a26:	e03d      	b.n	8003aa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e038      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
 8003a34:	40023800 	.word	0x40023800
 8003a38:	40007000 	.word	0x40007000
 8003a3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a40:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <HAL_RCC_OscConfig+0x4ec>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d028      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d121      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d11a      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a70:	4013      	ands	r3, r2
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d111      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a86:	085b      	lsrs	r3, r3, #1
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d107      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d001      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e000      	b.n	8003aa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3718      	adds	r7, #24
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	40023800 	.word	0x40023800

08003ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e0cc      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b68      	ldr	r3, [pc, #416]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d90c      	bls.n	8003af0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	4b65      	ldr	r3, [pc, #404]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	b2d2      	uxtb	r2, r2
 8003adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ade:	4b63      	ldr	r3, [pc, #396]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d001      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e0b8      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d020      	beq.n	8003b3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0304 	and.w	r3, r3, #4
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b08:	4b59      	ldr	r3, [pc, #356]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	4a58      	ldr	r2, [pc, #352]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0308 	and.w	r3, r3, #8
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d005      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b20:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	4a52      	ldr	r2, [pc, #328]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2c:	4b50      	ldr	r3, [pc, #320]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	494d      	ldr	r1, [pc, #308]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d044      	beq.n	8003bd4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b47      	ldr	r3, [pc, #284]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d119      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e07f      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d003      	beq.n	8003b72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6e:	2b03      	cmp	r3, #3
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b72:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e06f      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b82:	4b3b      	ldr	r3, [pc, #236]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e067      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b92:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f023 0203 	bic.w	r2, r3, #3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	4934      	ldr	r1, [pc, #208]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ba4:	f7fe f924 	bl	8001df0 <HAL_GetTick>
 8003ba8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003baa:	e00a      	b.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bac:	f7fe f920 	bl	8001df0 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e04f      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc2:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f003 020c 	and.w	r2, r3, #12
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d1eb      	bne.n	8003bac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bd4:	4b25      	ldr	r3, [pc, #148]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 030f 	and.w	r3, r3, #15
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d20c      	bcs.n	8003bfc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003be2:	4b22      	ldr	r3, [pc, #136]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bea:	4b20      	ldr	r3, [pc, #128]	; (8003c6c <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 030f 	and.w	r3, r3, #15
 8003bf2:	683a      	ldr	r2, [r7, #0]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d001      	beq.n	8003bfc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e032      	b.n	8003c62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0304 	and.w	r3, r3, #4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d008      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c08:	4b19      	ldr	r3, [pc, #100]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	4916      	ldr	r1, [pc, #88]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d009      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c26:	4b12      	ldr	r3, [pc, #72]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	490e      	ldr	r1, [pc, #56]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c3a:	f000 f821 	bl	8003c80 <HAL_RCC_GetSysClockFreq>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	091b      	lsrs	r3, r3, #4
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	490a      	ldr	r1, [pc, #40]	; (8003c74 <HAL_RCC_ClockConfig+0x1c0>)
 8003c4c:	5ccb      	ldrb	r3, [r1, r3]
 8003c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c52:	4a09      	ldr	r2, [pc, #36]	; (8003c78 <HAL_RCC_ClockConfig+0x1c4>)
 8003c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c56:	4b09      	ldr	r3, [pc, #36]	; (8003c7c <HAL_RCC_ClockConfig+0x1c8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f7fe f884 	bl	8001d68 <HAL_InitTick>

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023c00 	.word	0x40023c00
 8003c70:	40023800 	.word	0x40023800
 8003c74:	08007b80 	.word	0x08007b80
 8003c78:	20000010 	.word	0x20000010
 8003c7c:	20000014 	.word	0x20000014

08003c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c84:	b094      	sub	sp, #80	; 0x50
 8003c86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c90:	2300      	movs	r3, #0
 8003c92:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c98:	4b79      	ldr	r3, [pc, #484]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	f003 030c 	and.w	r3, r3, #12
 8003ca0:	2b08      	cmp	r3, #8
 8003ca2:	d00d      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	f200 80e1 	bhi.w	8003e6c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d002      	beq.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d003      	beq.n	8003cba <HAL_RCC_GetSysClockFreq+0x3a>
 8003cb2:	e0db      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cb4:	4b73      	ldr	r3, [pc, #460]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cb6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cb8:	e0db      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cba:	4b73      	ldr	r3, [pc, #460]	; (8003e88 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cbc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cbe:	e0d8      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc0:	4b6f      	ldr	r3, [pc, #444]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cc8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cca:	4b6d      	ldr	r3, [pc, #436]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d063      	beq.n	8003d9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cd6:	4b6a      	ldr	r3, [pc, #424]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	099b      	lsrs	r3, r3, #6
 8003cdc:	2200      	movs	r2, #0
 8003cde:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ce0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce8:	633b      	str	r3, [r7, #48]	; 0x30
 8003cea:	2300      	movs	r3, #0
 8003cec:	637b      	str	r3, [r7, #52]	; 0x34
 8003cee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003cf2:	4622      	mov	r2, r4
 8003cf4:	462b      	mov	r3, r5
 8003cf6:	f04f 0000 	mov.w	r0, #0
 8003cfa:	f04f 0100 	mov.w	r1, #0
 8003cfe:	0159      	lsls	r1, r3, #5
 8003d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d04:	0150      	lsls	r0, r2, #5
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4621      	mov	r1, r4
 8003d0c:	1a51      	subs	r1, r2, r1
 8003d0e:	6139      	str	r1, [r7, #16]
 8003d10:	4629      	mov	r1, r5
 8003d12:	eb63 0301 	sbc.w	r3, r3, r1
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d24:	4659      	mov	r1, fp
 8003d26:	018b      	lsls	r3, r1, #6
 8003d28:	4651      	mov	r1, sl
 8003d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d2e:	4651      	mov	r1, sl
 8003d30:	018a      	lsls	r2, r1, #6
 8003d32:	4651      	mov	r1, sl
 8003d34:	ebb2 0801 	subs.w	r8, r2, r1
 8003d38:	4659      	mov	r1, fp
 8003d3a:	eb63 0901 	sbc.w	r9, r3, r1
 8003d3e:	f04f 0200 	mov.w	r2, #0
 8003d42:	f04f 0300 	mov.w	r3, #0
 8003d46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d52:	4690      	mov	r8, r2
 8003d54:	4699      	mov	r9, r3
 8003d56:	4623      	mov	r3, r4
 8003d58:	eb18 0303 	adds.w	r3, r8, r3
 8003d5c:	60bb      	str	r3, [r7, #8]
 8003d5e:	462b      	mov	r3, r5
 8003d60:	eb49 0303 	adc.w	r3, r9, r3
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	f04f 0300 	mov.w	r3, #0
 8003d6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d72:	4629      	mov	r1, r5
 8003d74:	024b      	lsls	r3, r1, #9
 8003d76:	4621      	mov	r1, r4
 8003d78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d7c:	4621      	mov	r1, r4
 8003d7e:	024a      	lsls	r2, r1, #9
 8003d80:	4610      	mov	r0, r2
 8003d82:	4619      	mov	r1, r3
 8003d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d86:	2200      	movs	r2, #0
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d90:	f7fc ff6a 	bl	8000c68 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4613      	mov	r3, r2
 8003d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d9c:	e058      	b.n	8003e50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d9e:	4b38      	ldr	r3, [pc, #224]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	099b      	lsrs	r3, r3, #6
 8003da4:	2200      	movs	r2, #0
 8003da6:	4618      	mov	r0, r3
 8003da8:	4611      	mov	r1, r2
 8003daa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dae:	623b      	str	r3, [r7, #32]
 8003db0:	2300      	movs	r3, #0
 8003db2:	627b      	str	r3, [r7, #36]	; 0x24
 8003db4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003db8:	4642      	mov	r2, r8
 8003dba:	464b      	mov	r3, r9
 8003dbc:	f04f 0000 	mov.w	r0, #0
 8003dc0:	f04f 0100 	mov.w	r1, #0
 8003dc4:	0159      	lsls	r1, r3, #5
 8003dc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dca:	0150      	lsls	r0, r2, #5
 8003dcc:	4602      	mov	r2, r0
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003de8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003dec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003df0:	ebb2 040a 	subs.w	r4, r2, sl
 8003df4:	eb63 050b 	sbc.w	r5, r3, fp
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	00eb      	lsls	r3, r5, #3
 8003e02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e06:	00e2      	lsls	r2, r4, #3
 8003e08:	4614      	mov	r4, r2
 8003e0a:	461d      	mov	r5, r3
 8003e0c:	4643      	mov	r3, r8
 8003e0e:	18e3      	adds	r3, r4, r3
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	464b      	mov	r3, r9
 8003e14:	eb45 0303 	adc.w	r3, r5, r3
 8003e18:	607b      	str	r3, [r7, #4]
 8003e1a:	f04f 0200 	mov.w	r2, #0
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e26:	4629      	mov	r1, r5
 8003e28:	028b      	lsls	r3, r1, #10
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e30:	4621      	mov	r1, r4
 8003e32:	028a      	lsls	r2, r1, #10
 8003e34:	4610      	mov	r0, r2
 8003e36:	4619      	mov	r1, r3
 8003e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	61bb      	str	r3, [r7, #24]
 8003e3e:	61fa      	str	r2, [r7, #28]
 8003e40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e44:	f7fc ff10 	bl	8000c68 <__aeabi_uldivmod>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e50:	4b0b      	ldr	r3, [pc, #44]	; (8003e80 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	0c1b      	lsrs	r3, r3, #16
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	005b      	lsls	r3, r3, #1
 8003e5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e6a:	e002      	b.n	8003e72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	3750      	adds	r7, #80	; 0x50
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e7e:	bf00      	nop
 8003e80:	40023800 	.word	0x40023800
 8003e84:	00f42400 	.word	0x00f42400
 8003e88:	007a1200 	.word	0x007a1200

08003e8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e92:	681b      	ldr	r3, [r3, #0]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	20000010 	.word	0x20000010

08003ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ea8:	f7ff fff0 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0a9b      	lsrs	r3, r3, #10
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4903      	ldr	r1, [pc, #12]	; (8003ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	08007b90 	.word	0x08007b90

08003ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ed0:	f7ff ffdc 	bl	8003e8c <HAL_RCC_GetHCLKFreq>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	0b5b      	lsrs	r3, r3, #13
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	4903      	ldr	r1, [pc, #12]	; (8003ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ee2:	5ccb      	ldrb	r3, [r1, r3]
 8003ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	08007b90 	.word	0x08007b90

08003ef4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e03f      	b.n	8003f86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff faa8 	bl	8003470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2224      	movs	r2, #36	; 0x24
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68da      	ldr	r2, [r3, #12]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	f000 f929 	bl	8004190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	695a      	ldr	r2, [r3, #20]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68da      	ldr	r2, [r3, #12]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b08a      	sub	sp, #40	; 0x28
 8003f92:	af02      	add	r7, sp, #8
 8003f94:	60f8      	str	r0, [r7, #12]
 8003f96:	60b9      	str	r1, [r7, #8]
 8003f98:	603b      	str	r3, [r7, #0]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b20      	cmp	r3, #32
 8003fac:	d17c      	bne.n	80040a8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d002      	beq.n	8003fba <HAL_UART_Transmit+0x2c>
 8003fb4:	88fb      	ldrh	r3, [r7, #6]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d101      	bne.n	8003fbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e075      	b.n	80040aa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_UART_Transmit+0x3e>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e06e      	b.n	80040aa <HAL_UART_Transmit+0x11c>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2221      	movs	r2, #33	; 0x21
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fe2:	f7fd ff05 	bl	8001df0 <HAL_GetTick>
 8003fe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	88fa      	ldrh	r2, [r7, #6]
 8003fec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	88fa      	ldrh	r2, [r7, #6]
 8003ff2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ffc:	d108      	bne.n	8004010 <HAL_UART_Transmit+0x82>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d104      	bne.n	8004010 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004006:	2300      	movs	r3, #0
 8004008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	e003      	b.n	8004018 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004014:	2300      	movs	r3, #0
 8004016:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004020:	e02a      	b.n	8004078 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2200      	movs	r2, #0
 800402a:	2180      	movs	r1, #128	; 0x80
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f840 	bl	80040b2 <UART_WaitOnFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e036      	b.n	80040aa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10b      	bne.n	800405a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004050:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	3302      	adds	r3, #2
 8004056:	61bb      	str	r3, [r7, #24]
 8004058:	e007      	b.n	800406a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	781a      	ldrb	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	3301      	adds	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800407c:	b29b      	uxth	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1cf      	bne.n	8004022 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2200      	movs	r2, #0
 800408a:	2140      	movs	r1, #64	; 0x40
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f000 f810 	bl	80040b2 <UART_WaitOnFlagUntilTimeout>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d001      	beq.n	800409c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e006      	b.n	80040aa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2220      	movs	r2, #32
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80040a4:	2300      	movs	r3, #0
 80040a6:	e000      	b.n	80040aa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040a8:	2302      	movs	r3, #2
  }
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3720      	adds	r7, #32
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b090      	sub	sp, #64	; 0x40
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	603b      	str	r3, [r7, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040c2:	e050      	b.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040ca:	d04c      	beq.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80040d2:	f7fd fe8d 	bl	8001df0 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040de:	429a      	cmp	r2, r3
 80040e0:	d241      	bcs.n	8004166 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	330c      	adds	r3, #12
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	330c      	adds	r3, #12
 8004100:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004102:	637a      	str	r2, [r7, #52]	; 0x34
 8004104:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004106:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004108:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800410a:	e841 2300 	strex	r3, r2, [r1]
 800410e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e5      	bne.n	80040e2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3314      	adds	r3, #20
 800411c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	e853 3f00 	ldrex	r3, [r3]
 8004124:	613b      	str	r3, [r7, #16]
   return(result);
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	63bb      	str	r3, [r7, #56]	; 0x38
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	3314      	adds	r3, #20
 8004134:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004136:	623a      	str	r2, [r7, #32]
 8004138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413a:	69f9      	ldr	r1, [r7, #28]
 800413c:	6a3a      	ldr	r2, [r7, #32]
 800413e:	e841 2300 	strex	r3, r2, [r1]
 8004142:	61bb      	str	r3, [r7, #24]
   return(result);
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1e5      	bne.n	8004116 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e00f      	b.n	8004186 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	4013      	ands	r3, r2
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	bf0c      	ite	eq
 8004176:	2301      	moveq	r3, #1
 8004178:	2300      	movne	r3, #0
 800417a:	b2db      	uxtb	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	79fb      	ldrb	r3, [r7, #7]
 8004180:	429a      	cmp	r2, r3
 8004182:	d09f      	beq.n	80040c4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3740      	adds	r7, #64	; 0x40
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
	...

08004190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004194:	b0c0      	sub	sp, #256	; 0x100
 8004196:	af00      	add	r7, sp, #0
 8004198:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ac:	68d9      	ldr	r1, [r3, #12]
 80041ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	ea40 0301 	orr.w	r3, r0, r1
 80041b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041be:	689a      	ldr	r2, [r3, #8]
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	431a      	orrs	r2, r3
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	4313      	orrs	r3, r2
 80041d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041e8:	f021 010c 	bic.w	r1, r1, #12
 80041ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041f6:	430b      	orrs	r3, r1
 80041f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420a:	6999      	ldr	r1, [r3, #24]
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	ea40 0301 	orr.w	r3, r0, r1
 8004216:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	4b8f      	ldr	r3, [pc, #572]	; (800445c <UART_SetConfig+0x2cc>)
 8004220:	429a      	cmp	r2, r3
 8004222:	d005      	beq.n	8004230 <UART_SetConfig+0xa0>
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4b8d      	ldr	r3, [pc, #564]	; (8004460 <UART_SetConfig+0x2d0>)
 800422c:	429a      	cmp	r2, r3
 800422e:	d104      	bne.n	800423a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004230:	f7ff fe4c 	bl	8003ecc <HAL_RCC_GetPCLK2Freq>
 8004234:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004238:	e003      	b.n	8004242 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800423a:	f7ff fe33 	bl	8003ea4 <HAL_RCC_GetPCLK1Freq>
 800423e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004246:	69db      	ldr	r3, [r3, #28]
 8004248:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800424c:	f040 810c 	bne.w	8004468 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004254:	2200      	movs	r2, #0
 8004256:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800425a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800425e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004262:	4622      	mov	r2, r4
 8004264:	462b      	mov	r3, r5
 8004266:	1891      	adds	r1, r2, r2
 8004268:	65b9      	str	r1, [r7, #88]	; 0x58
 800426a:	415b      	adcs	r3, r3
 800426c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800426e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004272:	4621      	mov	r1, r4
 8004274:	eb12 0801 	adds.w	r8, r2, r1
 8004278:	4629      	mov	r1, r5
 800427a:	eb43 0901 	adc.w	r9, r3, r1
 800427e:	f04f 0200 	mov.w	r2, #0
 8004282:	f04f 0300 	mov.w	r3, #0
 8004286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800428a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800428e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004292:	4690      	mov	r8, r2
 8004294:	4699      	mov	r9, r3
 8004296:	4623      	mov	r3, r4
 8004298:	eb18 0303 	adds.w	r3, r8, r3
 800429c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042a0:	462b      	mov	r3, r5
 80042a2:	eb49 0303 	adc.w	r3, r9, r3
 80042a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042b6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042be:	460b      	mov	r3, r1
 80042c0:	18db      	adds	r3, r3, r3
 80042c2:	653b      	str	r3, [r7, #80]	; 0x50
 80042c4:	4613      	mov	r3, r2
 80042c6:	eb42 0303 	adc.w	r3, r2, r3
 80042ca:	657b      	str	r3, [r7, #84]	; 0x54
 80042cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042d4:	f7fc fcc8 	bl	8000c68 <__aeabi_uldivmod>
 80042d8:	4602      	mov	r2, r0
 80042da:	460b      	mov	r3, r1
 80042dc:	4b61      	ldr	r3, [pc, #388]	; (8004464 <UART_SetConfig+0x2d4>)
 80042de:	fba3 2302 	umull	r2, r3, r3, r2
 80042e2:	095b      	lsrs	r3, r3, #5
 80042e4:	011c      	lsls	r4, r3, #4
 80042e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042f0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042f8:	4642      	mov	r2, r8
 80042fa:	464b      	mov	r3, r9
 80042fc:	1891      	adds	r1, r2, r2
 80042fe:	64b9      	str	r1, [r7, #72]	; 0x48
 8004300:	415b      	adcs	r3, r3
 8004302:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004308:	4641      	mov	r1, r8
 800430a:	eb12 0a01 	adds.w	sl, r2, r1
 800430e:	4649      	mov	r1, r9
 8004310:	eb43 0b01 	adc.w	fp, r3, r1
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004320:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004328:	4692      	mov	sl, r2
 800432a:	469b      	mov	fp, r3
 800432c:	4643      	mov	r3, r8
 800432e:	eb1a 0303 	adds.w	r3, sl, r3
 8004332:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004336:	464b      	mov	r3, r9
 8004338:	eb4b 0303 	adc.w	r3, fp, r3
 800433c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800434c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004350:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004354:	460b      	mov	r3, r1
 8004356:	18db      	adds	r3, r3, r3
 8004358:	643b      	str	r3, [r7, #64]	; 0x40
 800435a:	4613      	mov	r3, r2
 800435c:	eb42 0303 	adc.w	r3, r2, r3
 8004360:	647b      	str	r3, [r7, #68]	; 0x44
 8004362:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004366:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800436a:	f7fc fc7d 	bl	8000c68 <__aeabi_uldivmod>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4611      	mov	r1, r2
 8004374:	4b3b      	ldr	r3, [pc, #236]	; (8004464 <UART_SetConfig+0x2d4>)
 8004376:	fba3 2301 	umull	r2, r3, r3, r1
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	2264      	movs	r2, #100	; 0x64
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	1acb      	subs	r3, r1, r3
 8004384:	00db      	lsls	r3, r3, #3
 8004386:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800438a:	4b36      	ldr	r3, [pc, #216]	; (8004464 <UART_SetConfig+0x2d4>)
 800438c:	fba3 2302 	umull	r2, r3, r3, r2
 8004390:	095b      	lsrs	r3, r3, #5
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004398:	441c      	add	r4, r3
 800439a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800439e:	2200      	movs	r2, #0
 80043a0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043a4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043ac:	4642      	mov	r2, r8
 80043ae:	464b      	mov	r3, r9
 80043b0:	1891      	adds	r1, r2, r2
 80043b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80043b4:	415b      	adcs	r3, r3
 80043b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043bc:	4641      	mov	r1, r8
 80043be:	1851      	adds	r1, r2, r1
 80043c0:	6339      	str	r1, [r7, #48]	; 0x30
 80043c2:	4649      	mov	r1, r9
 80043c4:	414b      	adcs	r3, r1
 80043c6:	637b      	str	r3, [r7, #52]	; 0x34
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	f04f 0300 	mov.w	r3, #0
 80043d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043d4:	4659      	mov	r1, fp
 80043d6:	00cb      	lsls	r3, r1, #3
 80043d8:	4651      	mov	r1, sl
 80043da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043de:	4651      	mov	r1, sl
 80043e0:	00ca      	lsls	r2, r1, #3
 80043e2:	4610      	mov	r0, r2
 80043e4:	4619      	mov	r1, r3
 80043e6:	4603      	mov	r3, r0
 80043e8:	4642      	mov	r2, r8
 80043ea:	189b      	adds	r3, r3, r2
 80043ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043f0:	464b      	mov	r3, r9
 80043f2:	460a      	mov	r2, r1
 80043f4:	eb42 0303 	adc.w	r3, r2, r3
 80043f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004408:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800440c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004410:	460b      	mov	r3, r1
 8004412:	18db      	adds	r3, r3, r3
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
 8004416:	4613      	mov	r3, r2
 8004418:	eb42 0303 	adc.w	r3, r2, r3
 800441c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800441e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004422:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004426:	f7fc fc1f 	bl	8000c68 <__aeabi_uldivmod>
 800442a:	4602      	mov	r2, r0
 800442c:	460b      	mov	r3, r1
 800442e:	4b0d      	ldr	r3, [pc, #52]	; (8004464 <UART_SetConfig+0x2d4>)
 8004430:	fba3 1302 	umull	r1, r3, r3, r2
 8004434:	095b      	lsrs	r3, r3, #5
 8004436:	2164      	movs	r1, #100	; 0x64
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	3332      	adds	r3, #50	; 0x32
 8004442:	4a08      	ldr	r2, [pc, #32]	; (8004464 <UART_SetConfig+0x2d4>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	095b      	lsrs	r3, r3, #5
 800444a:	f003 0207 	and.w	r2, r3, #7
 800444e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4422      	add	r2, r4
 8004456:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004458:	e105      	b.n	8004666 <UART_SetConfig+0x4d6>
 800445a:	bf00      	nop
 800445c:	40011000 	.word	0x40011000
 8004460:	40011400 	.word	0x40011400
 8004464:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800446c:	2200      	movs	r2, #0
 800446e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004472:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004476:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800447a:	4642      	mov	r2, r8
 800447c:	464b      	mov	r3, r9
 800447e:	1891      	adds	r1, r2, r2
 8004480:	6239      	str	r1, [r7, #32]
 8004482:	415b      	adcs	r3, r3
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
 8004486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800448a:	4641      	mov	r1, r8
 800448c:	1854      	adds	r4, r2, r1
 800448e:	4649      	mov	r1, r9
 8004490:	eb43 0501 	adc.w	r5, r3, r1
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	00eb      	lsls	r3, r5, #3
 800449e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044a2:	00e2      	lsls	r2, r4, #3
 80044a4:	4614      	mov	r4, r2
 80044a6:	461d      	mov	r5, r3
 80044a8:	4643      	mov	r3, r8
 80044aa:	18e3      	adds	r3, r4, r3
 80044ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044b0:	464b      	mov	r3, r9
 80044b2:	eb45 0303 	adc.w	r3, r5, r3
 80044b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044c6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044ca:	f04f 0200 	mov.w	r2, #0
 80044ce:	f04f 0300 	mov.w	r3, #0
 80044d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044d6:	4629      	mov	r1, r5
 80044d8:	008b      	lsls	r3, r1, #2
 80044da:	4621      	mov	r1, r4
 80044dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044e0:	4621      	mov	r1, r4
 80044e2:	008a      	lsls	r2, r1, #2
 80044e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044e8:	f7fc fbbe 	bl	8000c68 <__aeabi_uldivmod>
 80044ec:	4602      	mov	r2, r0
 80044ee:	460b      	mov	r3, r1
 80044f0:	4b60      	ldr	r3, [pc, #384]	; (8004674 <UART_SetConfig+0x4e4>)
 80044f2:	fba3 2302 	umull	r2, r3, r3, r2
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	011c      	lsls	r4, r3, #4
 80044fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fe:	2200      	movs	r2, #0
 8004500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004504:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004508:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800450c:	4642      	mov	r2, r8
 800450e:	464b      	mov	r3, r9
 8004510:	1891      	adds	r1, r2, r2
 8004512:	61b9      	str	r1, [r7, #24]
 8004514:	415b      	adcs	r3, r3
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800451c:	4641      	mov	r1, r8
 800451e:	1851      	adds	r1, r2, r1
 8004520:	6139      	str	r1, [r7, #16]
 8004522:	4649      	mov	r1, r9
 8004524:	414b      	adcs	r3, r1
 8004526:	617b      	str	r3, [r7, #20]
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004534:	4659      	mov	r1, fp
 8004536:	00cb      	lsls	r3, r1, #3
 8004538:	4651      	mov	r1, sl
 800453a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800453e:	4651      	mov	r1, sl
 8004540:	00ca      	lsls	r2, r1, #3
 8004542:	4610      	mov	r0, r2
 8004544:	4619      	mov	r1, r3
 8004546:	4603      	mov	r3, r0
 8004548:	4642      	mov	r2, r8
 800454a:	189b      	adds	r3, r3, r2
 800454c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004550:	464b      	mov	r3, r9
 8004552:	460a      	mov	r2, r1
 8004554:	eb42 0303 	adc.w	r3, r2, r3
 8004558:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	67bb      	str	r3, [r7, #120]	; 0x78
 8004566:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004574:	4649      	mov	r1, r9
 8004576:	008b      	lsls	r3, r1, #2
 8004578:	4641      	mov	r1, r8
 800457a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800457e:	4641      	mov	r1, r8
 8004580:	008a      	lsls	r2, r1, #2
 8004582:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004586:	f7fc fb6f 	bl	8000c68 <__aeabi_uldivmod>
 800458a:	4602      	mov	r2, r0
 800458c:	460b      	mov	r3, r1
 800458e:	4b39      	ldr	r3, [pc, #228]	; (8004674 <UART_SetConfig+0x4e4>)
 8004590:	fba3 1302 	umull	r1, r3, r3, r2
 8004594:	095b      	lsrs	r3, r3, #5
 8004596:	2164      	movs	r1, #100	; 0x64
 8004598:	fb01 f303 	mul.w	r3, r1, r3
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	3332      	adds	r3, #50	; 0x32
 80045a2:	4a34      	ldr	r2, [pc, #208]	; (8004674 <UART_SetConfig+0x4e4>)
 80045a4:	fba2 2303 	umull	r2, r3, r2, r3
 80045a8:	095b      	lsrs	r3, r3, #5
 80045aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ae:	441c      	add	r4, r3
 80045b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045b4:	2200      	movs	r2, #0
 80045b6:	673b      	str	r3, [r7, #112]	; 0x70
 80045b8:	677a      	str	r2, [r7, #116]	; 0x74
 80045ba:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045be:	4642      	mov	r2, r8
 80045c0:	464b      	mov	r3, r9
 80045c2:	1891      	adds	r1, r2, r2
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	415b      	adcs	r3, r3
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045ce:	4641      	mov	r1, r8
 80045d0:	1851      	adds	r1, r2, r1
 80045d2:	6039      	str	r1, [r7, #0]
 80045d4:	4649      	mov	r1, r9
 80045d6:	414b      	adcs	r3, r1
 80045d8:	607b      	str	r3, [r7, #4]
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 0300 	mov.w	r3, #0
 80045e2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045e6:	4659      	mov	r1, fp
 80045e8:	00cb      	lsls	r3, r1, #3
 80045ea:	4651      	mov	r1, sl
 80045ec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045f0:	4651      	mov	r1, sl
 80045f2:	00ca      	lsls	r2, r1, #3
 80045f4:	4610      	mov	r0, r2
 80045f6:	4619      	mov	r1, r3
 80045f8:	4603      	mov	r3, r0
 80045fa:	4642      	mov	r2, r8
 80045fc:	189b      	adds	r3, r3, r2
 80045fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004600:	464b      	mov	r3, r9
 8004602:	460a      	mov	r2, r1
 8004604:	eb42 0303 	adc.w	r3, r2, r3
 8004608:	66fb      	str	r3, [r7, #108]	; 0x6c
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	663b      	str	r3, [r7, #96]	; 0x60
 8004614:	667a      	str	r2, [r7, #100]	; 0x64
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004622:	4649      	mov	r1, r9
 8004624:	008b      	lsls	r3, r1, #2
 8004626:	4641      	mov	r1, r8
 8004628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800462c:	4641      	mov	r1, r8
 800462e:	008a      	lsls	r2, r1, #2
 8004630:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004634:	f7fc fb18 	bl	8000c68 <__aeabi_uldivmod>
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <UART_SetConfig+0x4e4>)
 800463e:	fba3 1302 	umull	r1, r3, r3, r2
 8004642:	095b      	lsrs	r3, r3, #5
 8004644:	2164      	movs	r1, #100	; 0x64
 8004646:	fb01 f303 	mul.w	r3, r1, r3
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	3332      	adds	r3, #50	; 0x32
 8004650:	4a08      	ldr	r2, [pc, #32]	; (8004674 <UART_SetConfig+0x4e4>)
 8004652:	fba2 2303 	umull	r2, r3, r2, r3
 8004656:	095b      	lsrs	r3, r3, #5
 8004658:	f003 020f 	and.w	r2, r3, #15
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4422      	add	r2, r4
 8004664:	609a      	str	r2, [r3, #8]
}
 8004666:	bf00      	nop
 8004668:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800466c:	46bd      	mov	sp, r7
 800466e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004672:	bf00      	nop
 8004674:	51eb851f 	.word	0x51eb851f

08004678 <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 800467c:	f7fd fb58 	bl	8001d30 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8004680:	f000 f836 	bl	80046f0 <SystemClock_Config>

	/* Private variables -----------------------------------------------------*/
	/* Initialize BSP Led for LED1, LED2 and LED3*/
	BSP_LED_Init(LED1);
 8004684:	2000      	movs	r0, #0
 8004686:	f7fd f939 	bl	80018fc <BSP_LED_Init>
	BSP_LED_Init(LED2);
 800468a:	2001      	movs	r0, #1
 800468c:	f7fd f936 	bl	80018fc <BSP_LED_Init>
	BSP_LED_Init(LED3);
 8004690:	2002      	movs	r0, #2
 8004692:	f7fd f933 	bl	80018fc <BSP_LED_Init>

	/* Initialize BSP Button for the BuiltIn Button*/
	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8004696:	2100      	movs	r1, #0
 8004698:	2000      	movs	r0, #0
 800469a:	f7fd f9b3 	bl	8001a04 <BSP_PB_Init>

	/* Initialize the UART transmission*/
	if(!uartInit(&UartHandle)){
 800469e:	4810      	ldr	r0, [pc, #64]	; (80046e0 <main+0x68>)
 80046a0:	f7fc fffa 	bl	8001698 <uartInit>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f083 0301 	eor.w	r3, r3, #1
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <main+0x3c>
		Error_Handler();
 80046b0:	f000 f880 	bl	80047b4 <Error_Handler>
	}
	/* Initialize the debounce FSM */
	debounceFSM_Init();
 80046b4:	f7fc fe66 	bl	8001384 <debounceFSM_Init>

	/* Initialize the measuring FSM */
	measureFSM_Init();
 80046b8:	f000 f882 	bl	80047c0 <measureFSM_Init>

	/* Initialize the delays for the reading of the sensors.*/
	delayInit(&gyroDelay, TIMEBETWEENGYRO);
 80046bc:	2164      	movs	r1, #100	; 0x64
 80046be:	4809      	ldr	r0, [pc, #36]	; (80046e4 <main+0x6c>)
 80046c0:	f7fc fede 	bl	8001480 <delayInit>
	delayInit(&accelDelay, TIMEBETWEENACCEL);
 80046c4:	2164      	movs	r1, #100	; 0x64
 80046c6:	4808      	ldr	r0, [pc, #32]	; (80046e8 <main+0x70>)
 80046c8:	f7fc feda 	bl	8001480 <delayInit>
	delayInit(&tempDelay, TIMEBETWEENTEMP);
 80046cc:	2164      	movs	r1, #100	; 0x64
 80046ce:	4807      	ldr	r0, [pc, #28]	; (80046ec <main+0x74>)
 80046d0:	f7fc fed6 	bl	8001480 <delayInit>

	/* Infinite loop */
	while (1)
	{
		debounceFSM_Update();
 80046d4:	f7fc fe66 	bl	80013a4 <debounceFSM_Update>
		measureFSM_Update();
 80046d8:	f000 f8ae 	bl	8004838 <measureFSM_Update>
		debounceFSM_Update();
 80046dc:	e7fa      	b.n	80046d4 <main+0x5c>
 80046de:	bf00      	nop
 80046e0:	20000274 	.word	0x20000274
 80046e4:	200002d8 	.word	0x200002d8
 80046e8:	200002e4 	.word	0x200002e4
 80046ec:	200002f0 	.word	0x200002f0

080046f0 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b094      	sub	sp, #80	; 0x50
 80046f4:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80046f6:	2300      	movs	r3, #0
 80046f8:	60bb      	str	r3, [r7, #8]
 80046fa:	4b2c      	ldr	r3, [pc, #176]	; (80047ac <SystemClock_Config+0xbc>)
 80046fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fe:	4a2b      	ldr	r2, [pc, #172]	; (80047ac <SystemClock_Config+0xbc>)
 8004700:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004704:	6413      	str	r3, [r2, #64]	; 0x40
 8004706:	4b29      	ldr	r3, [pc, #164]	; (80047ac <SystemClock_Config+0xbc>)
 8004708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004712:	2300      	movs	r3, #0
 8004714:	607b      	str	r3, [r7, #4]
 8004716:	4b26      	ldr	r3, [pc, #152]	; (80047b0 <SystemClock_Config+0xc0>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a25      	ldr	r2, [pc, #148]	; (80047b0 <SystemClock_Config+0xc0>)
 800471c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4b23      	ldr	r3, [pc, #140]	; (80047b0 <SystemClock_Config+0xc0>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800472e:	2301      	movs	r3, #1
 8004730:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004732:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004736:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004738:	2302      	movs	r3, #2
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800473c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004740:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004742:	2308      	movs	r3, #8
 8004744:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8004746:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800474a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800474c:	2302      	movs	r3, #2
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8004750:	2307      	movs	r3, #7
 8004752:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004754:	f107 030c 	add.w	r3, r7, #12
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe ff33 	bl	80035c4 <HAL_RCC_OscConfig>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8004764:	f000 f826 	bl	80047b4 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8004768:	f7fe fedc 	bl	8003524 <HAL_PWREx_EnableOverDrive>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8004772:	f000 f81f 	bl	80047b4 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004776:	230f      	movs	r3, #15
 8004778:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800477a:	2302      	movs	r3, #2
 800477c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800477e:	2300      	movs	r3, #0
 8004780:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004782:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004786:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800478c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800478e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004792:	2105      	movs	r1, #5
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff f98d 	bl	8003ab4 <HAL_RCC_ClockConfig>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 80047a0:	f000 f808 	bl	80047b4 <Error_Handler>
	}
}
 80047a4:	bf00      	nop
 80047a6:	3750      	adds	r7, #80	; 0x50
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40023800 	.word	0x40023800
 80047b0:	40007000 	.word	0x40007000

080047b4 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 80047b8:	2001      	movs	r0, #1
 80047ba:	f7fd f8ef 	bl	800199c <BSP_LED_On>
	while (1)
 80047be:	e7fe      	b.n	80047be <Error_Handler+0xa>

080047c0 <measureFSM_Init>:
 * 		   it will send a message trought the UART and then it will run the Error_Handler
 * 		   function
 * @param  None
 * @retval None
 */
static void measureFSM_Init(){
 80047c0:	b5b0      	push	{r4, r5, r7, lr}
 80047c2:	b09a      	sub	sp, #104	; 0x68
 80047c4:	af00      	add	r7, sp, #0
	bool_t status;
	char str[100];
	status = MPU6050Init();
 80047c6:	f7fc fbd1 	bl	8000f6c <MPU6050Init>
 80047ca:	4603      	mov	r3, r0
 80047cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if(status == true){
 80047d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00f      	beq.n	80047f8 <measureFSM_Init+0x38>
		strcpy(str, "Inicializacion correcta del modulo I2C y conectado al MPU6050.\n\r");
 80047d8:	463b      	mov	r3, r7
 80047da:	4a14      	ldr	r2, [pc, #80]	; (800482c <measureFSM_Init+0x6c>)
 80047dc:	4618      	mov	r0, r3
 80047de:	4611      	mov	r1, r2
 80047e0:	2341      	movs	r3, #65	; 0x41
 80047e2:	461a      	mov	r2, r3
 80047e4:	f000 f9bc 	bl	8004b60 <memcpy>
		uartSendString(&UartHandle, str);
 80047e8:	463b      	mov	r3, r7
 80047ea:	4619      	mov	r1, r3
 80047ec:	4810      	ldr	r0, [pc, #64]	; (8004830 <measureFSM_Init+0x70>)
 80047ee:	f7fc ffb3 	bl	8001758 <uartSendString>
		sendMenu();
 80047f2:	f000 f921 	bl	8004a38 <sendMenu>
	}else{
		strcpy(str, "Error al inicializar modulo I2C.\n\r");
		uartSendString(&UartHandle, str);
		Error_Handler();
	}
}
 80047f6:	e014      	b.n	8004822 <measureFSM_Init+0x62>
		strcpy(str, "Error al inicializar modulo I2C.\n\r");
 80047f8:	463b      	mov	r3, r7
 80047fa:	4a0e      	ldr	r2, [pc, #56]	; (8004834 <measureFSM_Init+0x74>)
 80047fc:	461c      	mov	r4, r3
 80047fe:	4615      	mov	r5, r2
 8004800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	461a      	mov	r2, r3
 800480c:	8022      	strh	r2, [r4, #0]
 800480e:	3402      	adds	r4, #2
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	7023      	strb	r3, [r4, #0]
		uartSendString(&UartHandle, str);
 8004814:	463b      	mov	r3, r7
 8004816:	4619      	mov	r1, r3
 8004818:	4805      	ldr	r0, [pc, #20]	; (8004830 <measureFSM_Init+0x70>)
 800481a:	f7fc ff9d 	bl	8001758 <uartSendString>
		Error_Handler();
 800481e:	f7ff ffc9 	bl	80047b4 <Error_Handler>
}
 8004822:	bf00      	nop
 8004824:	3768      	adds	r7, #104	; 0x68
 8004826:	46bd      	mov	sp, r7
 8004828:	bdb0      	pop	{r4, r5, r7, pc}
 800482a:	bf00      	nop
 800482c:	08007a48 	.word	0x08007a48
 8004830:	20000274 	.word	0x20000274
 8004834:	08007a8c 	.word	0x08007a8c

08004838 <measureFSM_Update>:
 * 		   board. It will loop trough the three different sensors
 * 		   TODO: Implement the reading of the UART to change states
 * @param  None
 * @retval None
 */
static void measureFSM_Update(){
 8004838:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800483c:	b09e      	sub	sp, #120	; 0x78
 800483e:	af04      	add	r7, sp, #16
	char str[100];
	switch(programState){
 8004840:	4b72      	ldr	r3, [pc, #456]	; (8004a0c <measureFSM_Update+0x1d4>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b03      	cmp	r3, #3
 8004846:	f200 80d1 	bhi.w	80049ec <measureFSM_Update+0x1b4>
 800484a:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <measureFSM_Update+0x18>)
 800484c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004850:	08004861 	.word	0x08004861
 8004854:	08004887 	.word	0x08004887
 8004858:	0800490d 	.word	0x0800490d
 800485c:	08004991 	.word	0x08004991
	case START_STATE:
		if(readKeyFE()){
 8004860:	f7fc fd78 	bl	8001354 <readKeyFE>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80c3 	beq.w	80049f2 <measureFSM_Update+0x1ba>
			programState = GYRO_STATE;
 800486c:	4b67      	ldr	r3, [pc, #412]	; (8004a0c <measureFSM_Update+0x1d4>)
 800486e:	2201      	movs	r2, #1
 8004870:	701a      	strb	r2, [r3, #0]
			BSP_LED_On(LED1);
 8004872:	2000      	movs	r0, #0
 8004874:	f7fd f892 	bl	800199c <BSP_LED_On>
			BSP_LED_Off(LED2);
 8004878:	2001      	movs	r0, #1
 800487a:	f7fd f8a9 	bl	80019d0 <BSP_LED_Off>
			BSP_LED_Off(LED3);
 800487e:	2002      	movs	r0, #2
 8004880:	f7fd f8a6 	bl	80019d0 <BSP_LED_Off>
		}
		break;
 8004884:	e0b5      	b.n	80049f2 <measureFSM_Update+0x1ba>

	case GYRO_STATE:
		if(delayRead(&gyroDelay)){
 8004886:	4862      	ldr	r0, [pc, #392]	; (8004a10 <measureFSM_Update+0x1d8>)
 8004888:	f7fc fe1a 	bl	80014c0 <delayRead>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d029      	beq.n	80048e6 <measureFSM_Update+0xae>
			readGyro(&gyroMeasure);
 8004892:	4860      	ldr	r0, [pc, #384]	; (8004a14 <measureFSM_Update+0x1dc>)
 8004894:	f7fc fb9a 	bl	8000fcc <readGyro>
			sprintf(str, "Gyro  X: %.3f d/s	Y: %.3f d/s	Z: %.3f d/s\n\r", gyroMeasure.gyroX, gyroMeasure.gyroY, gyroMeasure.gyroZ);
 8004898:	4b5e      	ldr	r3, [pc, #376]	; (8004a14 <measureFSM_Update+0x1dc>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f7fb fe63 	bl	8000568 <__aeabi_f2d>
 80048a2:	4680      	mov	r8, r0
 80048a4:	4689      	mov	r9, r1
 80048a6:	4b5b      	ldr	r3, [pc, #364]	; (8004a14 <measureFSM_Update+0x1dc>)
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fb fe5c 	bl	8000568 <__aeabi_f2d>
 80048b0:	4604      	mov	r4, r0
 80048b2:	460d      	mov	r5, r1
 80048b4:	4b57      	ldr	r3, [pc, #348]	; (8004a14 <measureFSM_Update+0x1dc>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fb fe55 	bl	8000568 <__aeabi_f2d>
 80048be:	4602      	mov	r2, r0
 80048c0:	460b      	mov	r3, r1
 80048c2:	1d38      	adds	r0, r7, #4
 80048c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80048c8:	e9cd 4500 	strd	r4, r5, [sp]
 80048cc:	4642      	mov	r2, r8
 80048ce:	464b      	mov	r3, r9
 80048d0:	4951      	ldr	r1, [pc, #324]	; (8004a18 <measureFSM_Update+0x1e0>)
 80048d2:	f000 fdc5 	bl	8005460 <siprintf>
			uartCLRScreen(&UartHandle);
 80048d6:	4851      	ldr	r0, [pc, #324]	; (8004a1c <measureFSM_Update+0x1e4>)
 80048d8:	f7fc ff12 	bl	8001700 <uartCLRScreen>
			uartSendString(&UartHandle, str);
 80048dc:	1d3b      	adds	r3, r7, #4
 80048de:	4619      	mov	r1, r3
 80048e0:	484e      	ldr	r0, [pc, #312]	; (8004a1c <measureFSM_Update+0x1e4>)
 80048e2:	f7fc ff39 	bl	8001758 <uartSendString>
		}
		if(readKeyFE()){
 80048e6:	f7fc fd35 	bl	8001354 <readKeyFE>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	f000 8082 	beq.w	80049f6 <measureFSM_Update+0x1be>
			programState = ACCEL_STATE;
 80048f2:	4b46      	ldr	r3, [pc, #280]	; (8004a0c <measureFSM_Update+0x1d4>)
 80048f4:	2202      	movs	r2, #2
 80048f6:	701a      	strb	r2, [r3, #0]
			BSP_LED_Off(LED1);
 80048f8:	2000      	movs	r0, #0
 80048fa:	f7fd f869 	bl	80019d0 <BSP_LED_Off>
			BSP_LED_On(LED2);
 80048fe:	2001      	movs	r0, #1
 8004900:	f7fd f84c 	bl	800199c <BSP_LED_On>
			BSP_LED_Off(LED3);
 8004904:	2002      	movs	r0, #2
 8004906:	f7fd f863 	bl	80019d0 <BSP_LED_Off>
		}
		break;
 800490a:	e074      	b.n	80049f6 <measureFSM_Update+0x1be>

	case ACCEL_STATE:
		if(delayRead(&accelDelay)){
 800490c:	4844      	ldr	r0, [pc, #272]	; (8004a20 <measureFSM_Update+0x1e8>)
 800490e:	f7fc fdd7 	bl	80014c0 <delayRead>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d029      	beq.n	800496c <measureFSM_Update+0x134>
			readAccel(&accelMeasure);
 8004918:	4842      	ldr	r0, [pc, #264]	; (8004a24 <measureFSM_Update+0x1ec>)
 800491a:	f7fc fb74 	bl	8001006 <readAccel>
			sprintf(str, "Accel X: %.3f g/s	Y: %.3f g/s	Z: %.3f g/s\n\r", accelMeasure.accelX, accelMeasure.accelY, accelMeasure.accelZ);
 800491e:	4b41      	ldr	r3, [pc, #260]	; (8004a24 <measureFSM_Update+0x1ec>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4618      	mov	r0, r3
 8004924:	f7fb fe20 	bl	8000568 <__aeabi_f2d>
 8004928:	4680      	mov	r8, r0
 800492a:	4689      	mov	r9, r1
 800492c:	4b3d      	ldr	r3, [pc, #244]	; (8004a24 <measureFSM_Update+0x1ec>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4618      	mov	r0, r3
 8004932:	f7fb fe19 	bl	8000568 <__aeabi_f2d>
 8004936:	4604      	mov	r4, r0
 8004938:	460d      	mov	r5, r1
 800493a:	4b3a      	ldr	r3, [pc, #232]	; (8004a24 <measureFSM_Update+0x1ec>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	4618      	mov	r0, r3
 8004940:	f7fb fe12 	bl	8000568 <__aeabi_f2d>
 8004944:	4602      	mov	r2, r0
 8004946:	460b      	mov	r3, r1
 8004948:	1d38      	adds	r0, r7, #4
 800494a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800494e:	e9cd 4500 	strd	r4, r5, [sp]
 8004952:	4642      	mov	r2, r8
 8004954:	464b      	mov	r3, r9
 8004956:	4934      	ldr	r1, [pc, #208]	; (8004a28 <measureFSM_Update+0x1f0>)
 8004958:	f000 fd82 	bl	8005460 <siprintf>
			uartCLRScreen(&UartHandle);
 800495c:	482f      	ldr	r0, [pc, #188]	; (8004a1c <measureFSM_Update+0x1e4>)
 800495e:	f7fc fecf 	bl	8001700 <uartCLRScreen>
			uartSendString(&UartHandle, str);
 8004962:	1d3b      	adds	r3, r7, #4
 8004964:	4619      	mov	r1, r3
 8004966:	482d      	ldr	r0, [pc, #180]	; (8004a1c <measureFSM_Update+0x1e4>)
 8004968:	f7fc fef6 	bl	8001758 <uartSendString>
		}
		if(readKeyFE()){
 800496c:	f7fc fcf2 	bl	8001354 <readKeyFE>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d041      	beq.n	80049fa <measureFSM_Update+0x1c2>
			programState = TEMP_STATE;
 8004976:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <measureFSM_Update+0x1d4>)
 8004978:	2203      	movs	r2, #3
 800497a:	701a      	strb	r2, [r3, #0]
			BSP_LED_Off(LED1);
 800497c:	2000      	movs	r0, #0
 800497e:	f7fd f827 	bl	80019d0 <BSP_LED_Off>
			BSP_LED_Off(LED2);
 8004982:	2001      	movs	r0, #1
 8004984:	f7fd f824 	bl	80019d0 <BSP_LED_Off>
			BSP_LED_On(LED3);
 8004988:	2002      	movs	r0, #2
 800498a:	f7fd f807 	bl	800199c <BSP_LED_On>
		}
		break;
 800498e:	e034      	b.n	80049fa <measureFSM_Update+0x1c2>

	case TEMP_STATE:
		if(delayRead(&tempDelay)){
 8004990:	4826      	ldr	r0, [pc, #152]	; (8004a2c <measureFSM_Update+0x1f4>)
 8004992:	f7fc fd95 	bl	80014c0 <delayRead>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d015      	beq.n	80049c8 <measureFSM_Update+0x190>
			readTemp(&tempMeasure);
 800499c:	4824      	ldr	r0, [pc, #144]	; (8004a30 <measureFSM_Update+0x1f8>)
 800499e:	f7fc fb4f 	bl	8001040 <readTemp>
			sprintf(str, "Temp: %.3f C\n\r", tempMeasure);
 80049a2:	4b23      	ldr	r3, [pc, #140]	; (8004a30 <measureFSM_Update+0x1f8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fb fdde 	bl	8000568 <__aeabi_f2d>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	1d38      	adds	r0, r7, #4
 80049b2:	4920      	ldr	r1, [pc, #128]	; (8004a34 <measureFSM_Update+0x1fc>)
 80049b4:	f000 fd54 	bl	8005460 <siprintf>
			uartCLRScreen(&UartHandle);
 80049b8:	4818      	ldr	r0, [pc, #96]	; (8004a1c <measureFSM_Update+0x1e4>)
 80049ba:	f7fc fea1 	bl	8001700 <uartCLRScreen>
			uartSendString(&UartHandle, str);
 80049be:	1d3b      	adds	r3, r7, #4
 80049c0:	4619      	mov	r1, r3
 80049c2:	4816      	ldr	r0, [pc, #88]	; (8004a1c <measureFSM_Update+0x1e4>)
 80049c4:	f7fc fec8 	bl	8001758 <uartSendString>
		}
		if(readKeyFE()){
 80049c8:	f7fc fcc4 	bl	8001354 <readKeyFE>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d015      	beq.n	80049fe <measureFSM_Update+0x1c6>
			programState = GYRO_STATE;
 80049d2:	4b0e      	ldr	r3, [pc, #56]	; (8004a0c <measureFSM_Update+0x1d4>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
			BSP_LED_On(LED1);
 80049d8:	2000      	movs	r0, #0
 80049da:	f7fc ffdf 	bl	800199c <BSP_LED_On>
			BSP_LED_Off(LED2);
 80049de:	2001      	movs	r0, #1
 80049e0:	f7fc fff6 	bl	80019d0 <BSP_LED_Off>
			BSP_LED_Off(LED3);
 80049e4:	2002      	movs	r0, #2
 80049e6:	f7fc fff3 	bl	80019d0 <BSP_LED_Off>
		}
		break;
 80049ea:	e008      	b.n	80049fe <measureFSM_Update+0x1c6>
	default:
		Error_Handler();
 80049ec:	f7ff fee2 	bl	80047b4 <Error_Handler>
		break;
 80049f0:	e006      	b.n	8004a00 <measureFSM_Update+0x1c8>
		break;
 80049f2:	bf00      	nop
 80049f4:	e004      	b.n	8004a00 <measureFSM_Update+0x1c8>
		break;
 80049f6:	bf00      	nop
 80049f8:	e002      	b.n	8004a00 <measureFSM_Update+0x1c8>
		break;
 80049fa:	bf00      	nop
 80049fc:	e000      	b.n	8004a00 <measureFSM_Update+0x1c8>
		break;
 80049fe:	bf00      	nop
	}
}
 8004a00:	bf00      	nop
 8004a02:	3768      	adds	r7, #104	; 0x68
 8004a04:	46bd      	mov	sp, r7
 8004a06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004a0a:	bf00      	nop
 8004a0c:	200002b8 	.word	0x200002b8
 8004a10:	200002d8 	.word	0x200002d8
 8004a14:	200002bc 	.word	0x200002bc
 8004a18:	08007ab0 	.word	0x08007ab0
 8004a1c:	20000274 	.word	0x20000274
 8004a20:	200002e4 	.word	0x200002e4
 8004a24:	200002c8 	.word	0x200002c8
 8004a28:	08007adc 	.word	0x08007adc
 8004a2c:	200002f0 	.word	0x200002f0
 8004a30:	200002d4 	.word	0x200002d4
 8004a34:	08007b08 	.word	0x08007b08

08004a38 <sendMenu>:
/**
 * @brief  sendMenu, sends trough the UART a menu for the user to see
 * @param  None
 * @retval None
 */
static void sendMenu(){
 8004a38:	b5b0      	push	{r4, r5, r7, lr}
 8004a3a:	b09a      	sub	sp, #104	; 0x68
 8004a3c:	af00      	add	r7, sp, #0
	char str[100];
	strcpy(str, "1 - Mediciones gyroscopio.\n\r");
 8004a3e:	1d3b      	adds	r3, r7, #4
 8004a40:	4a19      	ldr	r2, [pc, #100]	; (8004aa8 <sendMenu+0x70>)
 8004a42:	461c      	mov	r4, r3
 8004a44:	4615      	mov	r5, r2
 8004a46:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a48:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a4a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a4e:	c407      	stmia	r4!, {r0, r1, r2}
 8004a50:	7023      	strb	r3, [r4, #0]
	uartSendString(&UartHandle, str);
 8004a52:	1d3b      	adds	r3, r7, #4
 8004a54:	4619      	mov	r1, r3
 8004a56:	4815      	ldr	r0, [pc, #84]	; (8004aac <sendMenu+0x74>)
 8004a58:	f7fc fe7e 	bl	8001758 <uartSendString>
	strcpy(str, "2 - Mediciones acelerometro.\n\r");
 8004a5c:	1d3b      	adds	r3, r7, #4
 8004a5e:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <sendMenu+0x78>)
 8004a60:	461c      	mov	r4, r3
 8004a62:	4615      	mov	r5, r2
 8004a64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a68:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a6c:	c407      	stmia	r4!, {r0, r1, r2}
 8004a6e:	8023      	strh	r3, [r4, #0]
 8004a70:	3402      	adds	r4, #2
 8004a72:	0c1b      	lsrs	r3, r3, #16
 8004a74:	7023      	strb	r3, [r4, #0]
	uartSendString(&UartHandle, str);
 8004a76:	1d3b      	adds	r3, r7, #4
 8004a78:	4619      	mov	r1, r3
 8004a7a:	480c      	ldr	r0, [pc, #48]	; (8004aac <sendMenu+0x74>)
 8004a7c:	f7fc fe6c 	bl	8001758 <uartSendString>
	strcpy(str, "3 - Mediciones temperatura.\n\r");
 8004a80:	1d3b      	adds	r3, r7, #4
 8004a82:	4a0c      	ldr	r2, [pc, #48]	; (8004ab4 <sendMenu+0x7c>)
 8004a84:	461c      	mov	r4, r3
 8004a86:	4615      	mov	r5, r2
 8004a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a8c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004a90:	c407      	stmia	r4!, {r0, r1, r2}
 8004a92:	8023      	strh	r3, [r4, #0]
	uartSendString(&UartHandle, str);
 8004a94:	1d3b      	adds	r3, r7, #4
 8004a96:	4619      	mov	r1, r3
 8004a98:	4804      	ldr	r0, [pc, #16]	; (8004aac <sendMenu+0x74>)
 8004a9a:	f7fc fe5d 	bl	8001758 <uartSendString>
}
 8004a9e:	bf00      	nop
 8004aa0:	3768      	adds	r7, #104	; 0x68
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bdb0      	pop	{r4, r5, r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	08007b18 	.word	0x08007b18
 8004aac:	20000274 	.word	0x20000274
 8004ab0:	08007b38 	.word	0x08007b38
 8004ab4:	08007b58 	.word	0x08007b58

08004ab8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004ab8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004af0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004abc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004abe:	e003      	b.n	8004ac8 <LoopCopyDataInit>

08004ac0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ac0:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004ac2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ac4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004ac6:	3104      	adds	r1, #4

08004ac8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004ac8:	480b      	ldr	r0, [pc, #44]	; (8004af8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004aca:	4b0c      	ldr	r3, [pc, #48]	; (8004afc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004acc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004ace:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004ad0:	d3f6      	bcc.n	8004ac0 <CopyDataInit>
  ldr  r2, =_sbss
 8004ad2:	4a0b      	ldr	r2, [pc, #44]	; (8004b00 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004ad4:	e002      	b.n	8004adc <LoopFillZerobss>

08004ad6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004ad6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004ad8:	f842 3b04 	str.w	r3, [r2], #4

08004adc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004adc:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ade:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ae0:	d3f9      	bcc.n	8004ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004ae2:	f7fc fffb 	bl	8001adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ae6:	f000 f817 	bl	8004b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004aea:	f7ff fdc5 	bl	8004678 <main>
  bx  lr    
 8004aee:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8004af0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8004af4:	08007f84 	.word	0x08007f84
  ldr  r0, =_sdata
 8004af8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004afc:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8004b00:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8004b04:	2000030c 	.word	0x2000030c

08004b08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b08:	e7fe      	b.n	8004b08 <ADC_IRQHandler>
	...

08004b0c <__errno>:
 8004b0c:	4b01      	ldr	r3, [pc, #4]	; (8004b14 <__errno+0x8>)
 8004b0e:	6818      	ldr	r0, [r3, #0]
 8004b10:	4770      	bx	lr
 8004b12:	bf00      	nop
 8004b14:	2000001c 	.word	0x2000001c

08004b18 <__libc_init_array>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	4d0d      	ldr	r5, [pc, #52]	; (8004b50 <__libc_init_array+0x38>)
 8004b1c:	4c0d      	ldr	r4, [pc, #52]	; (8004b54 <__libc_init_array+0x3c>)
 8004b1e:	1b64      	subs	r4, r4, r5
 8004b20:	10a4      	asrs	r4, r4, #2
 8004b22:	2600      	movs	r6, #0
 8004b24:	42a6      	cmp	r6, r4
 8004b26:	d109      	bne.n	8004b3c <__libc_init_array+0x24>
 8004b28:	4d0b      	ldr	r5, [pc, #44]	; (8004b58 <__libc_init_array+0x40>)
 8004b2a:	4c0c      	ldr	r4, [pc, #48]	; (8004b5c <__libc_init_array+0x44>)
 8004b2c:	f002 ff02 	bl	8007934 <_init>
 8004b30:	1b64      	subs	r4, r4, r5
 8004b32:	10a4      	asrs	r4, r4, #2
 8004b34:	2600      	movs	r6, #0
 8004b36:	42a6      	cmp	r6, r4
 8004b38:	d105      	bne.n	8004b46 <__libc_init_array+0x2e>
 8004b3a:	bd70      	pop	{r4, r5, r6, pc}
 8004b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b40:	4798      	blx	r3
 8004b42:	3601      	adds	r6, #1
 8004b44:	e7ee      	b.n	8004b24 <__libc_init_array+0xc>
 8004b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4a:	4798      	blx	r3
 8004b4c:	3601      	adds	r6, #1
 8004b4e:	e7f2      	b.n	8004b36 <__libc_init_array+0x1e>
 8004b50:	08007f7c 	.word	0x08007f7c
 8004b54:	08007f7c 	.word	0x08007f7c
 8004b58:	08007f7c 	.word	0x08007f7c
 8004b5c:	08007f80 	.word	0x08007f80

08004b60 <memcpy>:
 8004b60:	440a      	add	r2, r1
 8004b62:	4291      	cmp	r1, r2
 8004b64:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004b68:	d100      	bne.n	8004b6c <memcpy+0xc>
 8004b6a:	4770      	bx	lr
 8004b6c:	b510      	push	{r4, lr}
 8004b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b76:	4291      	cmp	r1, r2
 8004b78:	d1f9      	bne.n	8004b6e <memcpy+0xe>
 8004b7a:	bd10      	pop	{r4, pc}

08004b7c <memset>:
 8004b7c:	4402      	add	r2, r0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d100      	bne.n	8004b86 <memset+0xa>
 8004b84:	4770      	bx	lr
 8004b86:	f803 1b01 	strb.w	r1, [r3], #1
 8004b8a:	e7f9      	b.n	8004b80 <memset+0x4>

08004b8c <__cvt>:
 8004b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b90:	ec55 4b10 	vmov	r4, r5, d0
 8004b94:	2d00      	cmp	r5, #0
 8004b96:	460e      	mov	r6, r1
 8004b98:	4619      	mov	r1, r3
 8004b9a:	462b      	mov	r3, r5
 8004b9c:	bfbb      	ittet	lt
 8004b9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ba2:	461d      	movlt	r5, r3
 8004ba4:	2300      	movge	r3, #0
 8004ba6:	232d      	movlt	r3, #45	; 0x2d
 8004ba8:	700b      	strb	r3, [r1, #0]
 8004baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004bac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004bb0:	4691      	mov	r9, r2
 8004bb2:	f023 0820 	bic.w	r8, r3, #32
 8004bb6:	bfbc      	itt	lt
 8004bb8:	4622      	movlt	r2, r4
 8004bba:	4614      	movlt	r4, r2
 8004bbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bc0:	d005      	beq.n	8004bce <__cvt+0x42>
 8004bc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004bc6:	d100      	bne.n	8004bca <__cvt+0x3e>
 8004bc8:	3601      	adds	r6, #1
 8004bca:	2102      	movs	r1, #2
 8004bcc:	e000      	b.n	8004bd0 <__cvt+0x44>
 8004bce:	2103      	movs	r1, #3
 8004bd0:	ab03      	add	r3, sp, #12
 8004bd2:	9301      	str	r3, [sp, #4]
 8004bd4:	ab02      	add	r3, sp, #8
 8004bd6:	9300      	str	r3, [sp, #0]
 8004bd8:	ec45 4b10 	vmov	d0, r4, r5
 8004bdc:	4653      	mov	r3, sl
 8004bde:	4632      	mov	r2, r6
 8004be0:	f000 fcea 	bl	80055b8 <_dtoa_r>
 8004be4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004be8:	4607      	mov	r7, r0
 8004bea:	d102      	bne.n	8004bf2 <__cvt+0x66>
 8004bec:	f019 0f01 	tst.w	r9, #1
 8004bf0:	d022      	beq.n	8004c38 <__cvt+0xac>
 8004bf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004bf6:	eb07 0906 	add.w	r9, r7, r6
 8004bfa:	d110      	bne.n	8004c1e <__cvt+0x92>
 8004bfc:	783b      	ldrb	r3, [r7, #0]
 8004bfe:	2b30      	cmp	r3, #48	; 0x30
 8004c00:	d10a      	bne.n	8004c18 <__cvt+0x8c>
 8004c02:	2200      	movs	r2, #0
 8004c04:	2300      	movs	r3, #0
 8004c06:	4620      	mov	r0, r4
 8004c08:	4629      	mov	r1, r5
 8004c0a:	f7fb ff6d 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c0e:	b918      	cbnz	r0, 8004c18 <__cvt+0x8c>
 8004c10:	f1c6 0601 	rsb	r6, r6, #1
 8004c14:	f8ca 6000 	str.w	r6, [sl]
 8004c18:	f8da 3000 	ldr.w	r3, [sl]
 8004c1c:	4499      	add	r9, r3
 8004c1e:	2200      	movs	r2, #0
 8004c20:	2300      	movs	r3, #0
 8004c22:	4620      	mov	r0, r4
 8004c24:	4629      	mov	r1, r5
 8004c26:	f7fb ff5f 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c2a:	b108      	cbz	r0, 8004c30 <__cvt+0xa4>
 8004c2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c30:	2230      	movs	r2, #48	; 0x30
 8004c32:	9b03      	ldr	r3, [sp, #12]
 8004c34:	454b      	cmp	r3, r9
 8004c36:	d307      	bcc.n	8004c48 <__cvt+0xbc>
 8004c38:	9b03      	ldr	r3, [sp, #12]
 8004c3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c3c:	1bdb      	subs	r3, r3, r7
 8004c3e:	4638      	mov	r0, r7
 8004c40:	6013      	str	r3, [r2, #0]
 8004c42:	b004      	add	sp, #16
 8004c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c48:	1c59      	adds	r1, r3, #1
 8004c4a:	9103      	str	r1, [sp, #12]
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	e7f0      	b.n	8004c32 <__cvt+0xa6>

08004c50 <__exponent>:
 8004c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c52:	4603      	mov	r3, r0
 8004c54:	2900      	cmp	r1, #0
 8004c56:	bfb8      	it	lt
 8004c58:	4249      	neglt	r1, r1
 8004c5a:	f803 2b02 	strb.w	r2, [r3], #2
 8004c5e:	bfb4      	ite	lt
 8004c60:	222d      	movlt	r2, #45	; 0x2d
 8004c62:	222b      	movge	r2, #43	; 0x2b
 8004c64:	2909      	cmp	r1, #9
 8004c66:	7042      	strb	r2, [r0, #1]
 8004c68:	dd2a      	ble.n	8004cc0 <__exponent+0x70>
 8004c6a:	f10d 0407 	add.w	r4, sp, #7
 8004c6e:	46a4      	mov	ip, r4
 8004c70:	270a      	movs	r7, #10
 8004c72:	46a6      	mov	lr, r4
 8004c74:	460a      	mov	r2, r1
 8004c76:	fb91 f6f7 	sdiv	r6, r1, r7
 8004c7a:	fb07 1516 	mls	r5, r7, r6, r1
 8004c7e:	3530      	adds	r5, #48	; 0x30
 8004c80:	2a63      	cmp	r2, #99	; 0x63
 8004c82:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004c86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004c8a:	4631      	mov	r1, r6
 8004c8c:	dcf1      	bgt.n	8004c72 <__exponent+0x22>
 8004c8e:	3130      	adds	r1, #48	; 0x30
 8004c90:	f1ae 0502 	sub.w	r5, lr, #2
 8004c94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004c98:	1c44      	adds	r4, r0, #1
 8004c9a:	4629      	mov	r1, r5
 8004c9c:	4561      	cmp	r1, ip
 8004c9e:	d30a      	bcc.n	8004cb6 <__exponent+0x66>
 8004ca0:	f10d 0209 	add.w	r2, sp, #9
 8004ca4:	eba2 020e 	sub.w	r2, r2, lr
 8004ca8:	4565      	cmp	r5, ip
 8004caa:	bf88      	it	hi
 8004cac:	2200      	movhi	r2, #0
 8004cae:	4413      	add	r3, r2
 8004cb0:	1a18      	subs	r0, r3, r0
 8004cb2:	b003      	add	sp, #12
 8004cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004cbe:	e7ed      	b.n	8004c9c <__exponent+0x4c>
 8004cc0:	2330      	movs	r3, #48	; 0x30
 8004cc2:	3130      	adds	r1, #48	; 0x30
 8004cc4:	7083      	strb	r3, [r0, #2]
 8004cc6:	70c1      	strb	r1, [r0, #3]
 8004cc8:	1d03      	adds	r3, r0, #4
 8004cca:	e7f1      	b.n	8004cb0 <__exponent+0x60>

08004ccc <_printf_float>:
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	ed2d 8b02 	vpush	{d8}
 8004cd4:	b08d      	sub	sp, #52	; 0x34
 8004cd6:	460c      	mov	r4, r1
 8004cd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004cdc:	4616      	mov	r6, r2
 8004cde:	461f      	mov	r7, r3
 8004ce0:	4605      	mov	r5, r0
 8004ce2:	f001 fa57 	bl	8006194 <_localeconv_r>
 8004ce6:	f8d0 a000 	ldr.w	sl, [r0]
 8004cea:	4650      	mov	r0, sl
 8004cec:	f7fb fa80 	bl	80001f0 <strlen>
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8004cf4:	6823      	ldr	r3, [r4, #0]
 8004cf6:	9305      	str	r3, [sp, #20]
 8004cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8004cfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d00:	3307      	adds	r3, #7
 8004d02:	f023 0307 	bic.w	r3, r3, #7
 8004d06:	f103 0208 	add.w	r2, r3, #8
 8004d0a:	f8c8 2000 	str.w	r2, [r8]
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d1e:	9307      	str	r3, [sp, #28]
 8004d20:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d24:	ee08 0a10 	vmov	s16, r0
 8004d28:	4b9f      	ldr	r3, [pc, #636]	; (8004fa8 <_printf_float+0x2dc>)
 8004d2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d32:	f7fb ff0b 	bl	8000b4c <__aeabi_dcmpun>
 8004d36:	bb88      	cbnz	r0, 8004d9c <_printf_float+0xd0>
 8004d38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d3c:	4b9a      	ldr	r3, [pc, #616]	; (8004fa8 <_printf_float+0x2dc>)
 8004d3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d42:	f7fb fee5 	bl	8000b10 <__aeabi_dcmple>
 8004d46:	bb48      	cbnz	r0, 8004d9c <_printf_float+0xd0>
 8004d48:	2200      	movs	r2, #0
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	4640      	mov	r0, r8
 8004d4e:	4649      	mov	r1, r9
 8004d50:	f7fb fed4 	bl	8000afc <__aeabi_dcmplt>
 8004d54:	b110      	cbz	r0, 8004d5c <_printf_float+0x90>
 8004d56:	232d      	movs	r3, #45	; 0x2d
 8004d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d5c:	4b93      	ldr	r3, [pc, #588]	; (8004fac <_printf_float+0x2e0>)
 8004d5e:	4894      	ldr	r0, [pc, #592]	; (8004fb0 <_printf_float+0x2e4>)
 8004d60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004d64:	bf94      	ite	ls
 8004d66:	4698      	movls	r8, r3
 8004d68:	4680      	movhi	r8, r0
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	6123      	str	r3, [r4, #16]
 8004d6e:	9b05      	ldr	r3, [sp, #20]
 8004d70:	f023 0204 	bic.w	r2, r3, #4
 8004d74:	6022      	str	r2, [r4, #0]
 8004d76:	f04f 0900 	mov.w	r9, #0
 8004d7a:	9700      	str	r7, [sp, #0]
 8004d7c:	4633      	mov	r3, r6
 8004d7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004d80:	4621      	mov	r1, r4
 8004d82:	4628      	mov	r0, r5
 8004d84:	f000 f9d8 	bl	8005138 <_printf_common>
 8004d88:	3001      	adds	r0, #1
 8004d8a:	f040 8090 	bne.w	8004eae <_printf_float+0x1e2>
 8004d8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d92:	b00d      	add	sp, #52	; 0x34
 8004d94:	ecbd 8b02 	vpop	{d8}
 8004d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d9c:	4642      	mov	r2, r8
 8004d9e:	464b      	mov	r3, r9
 8004da0:	4640      	mov	r0, r8
 8004da2:	4649      	mov	r1, r9
 8004da4:	f7fb fed2 	bl	8000b4c <__aeabi_dcmpun>
 8004da8:	b140      	cbz	r0, 8004dbc <_printf_float+0xf0>
 8004daa:	464b      	mov	r3, r9
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	bfbc      	itt	lt
 8004db0:	232d      	movlt	r3, #45	; 0x2d
 8004db2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004db6:	487f      	ldr	r0, [pc, #508]	; (8004fb4 <_printf_float+0x2e8>)
 8004db8:	4b7f      	ldr	r3, [pc, #508]	; (8004fb8 <_printf_float+0x2ec>)
 8004dba:	e7d1      	b.n	8004d60 <_printf_float+0x94>
 8004dbc:	6863      	ldr	r3, [r4, #4]
 8004dbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004dc2:	9206      	str	r2, [sp, #24]
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	d13f      	bne.n	8004e48 <_printf_float+0x17c>
 8004dc8:	2306      	movs	r3, #6
 8004dca:	6063      	str	r3, [r4, #4]
 8004dcc:	9b05      	ldr	r3, [sp, #20]
 8004dce:	6861      	ldr	r1, [r4, #4]
 8004dd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	9303      	str	r3, [sp, #12]
 8004dd8:	ab0a      	add	r3, sp, #40	; 0x28
 8004dda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004dde:	ab09      	add	r3, sp, #36	; 0x24
 8004de0:	ec49 8b10 	vmov	d0, r8, r9
 8004de4:	9300      	str	r3, [sp, #0]
 8004de6:	6022      	str	r2, [r4, #0]
 8004de8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004dec:	4628      	mov	r0, r5
 8004dee:	f7ff fecd 	bl	8004b8c <__cvt>
 8004df2:	9b06      	ldr	r3, [sp, #24]
 8004df4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004df6:	2b47      	cmp	r3, #71	; 0x47
 8004df8:	4680      	mov	r8, r0
 8004dfa:	d108      	bne.n	8004e0e <_printf_float+0x142>
 8004dfc:	1cc8      	adds	r0, r1, #3
 8004dfe:	db02      	blt.n	8004e06 <_printf_float+0x13a>
 8004e00:	6863      	ldr	r3, [r4, #4]
 8004e02:	4299      	cmp	r1, r3
 8004e04:	dd41      	ble.n	8004e8a <_printf_float+0x1be>
 8004e06:	f1ab 0b02 	sub.w	fp, fp, #2
 8004e0a:	fa5f fb8b 	uxtb.w	fp, fp
 8004e0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e12:	d820      	bhi.n	8004e56 <_printf_float+0x18a>
 8004e14:	3901      	subs	r1, #1
 8004e16:	465a      	mov	r2, fp
 8004e18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e1c:	9109      	str	r1, [sp, #36]	; 0x24
 8004e1e:	f7ff ff17 	bl	8004c50 <__exponent>
 8004e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e24:	1813      	adds	r3, r2, r0
 8004e26:	2a01      	cmp	r2, #1
 8004e28:	4681      	mov	r9, r0
 8004e2a:	6123      	str	r3, [r4, #16]
 8004e2c:	dc02      	bgt.n	8004e34 <_printf_float+0x168>
 8004e2e:	6822      	ldr	r2, [r4, #0]
 8004e30:	07d2      	lsls	r2, r2, #31
 8004e32:	d501      	bpl.n	8004e38 <_printf_float+0x16c>
 8004e34:	3301      	adds	r3, #1
 8004e36:	6123      	str	r3, [r4, #16]
 8004e38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d09c      	beq.n	8004d7a <_printf_float+0xae>
 8004e40:	232d      	movs	r3, #45	; 0x2d
 8004e42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e46:	e798      	b.n	8004d7a <_printf_float+0xae>
 8004e48:	9a06      	ldr	r2, [sp, #24]
 8004e4a:	2a47      	cmp	r2, #71	; 0x47
 8004e4c:	d1be      	bne.n	8004dcc <_printf_float+0x100>
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1bc      	bne.n	8004dcc <_printf_float+0x100>
 8004e52:	2301      	movs	r3, #1
 8004e54:	e7b9      	b.n	8004dca <_printf_float+0xfe>
 8004e56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004e5a:	d118      	bne.n	8004e8e <_printf_float+0x1c2>
 8004e5c:	2900      	cmp	r1, #0
 8004e5e:	6863      	ldr	r3, [r4, #4]
 8004e60:	dd0b      	ble.n	8004e7a <_printf_float+0x1ae>
 8004e62:	6121      	str	r1, [r4, #16]
 8004e64:	b913      	cbnz	r3, 8004e6c <_printf_float+0x1a0>
 8004e66:	6822      	ldr	r2, [r4, #0]
 8004e68:	07d0      	lsls	r0, r2, #31
 8004e6a:	d502      	bpl.n	8004e72 <_printf_float+0x1a6>
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	440b      	add	r3, r1
 8004e70:	6123      	str	r3, [r4, #16]
 8004e72:	65a1      	str	r1, [r4, #88]	; 0x58
 8004e74:	f04f 0900 	mov.w	r9, #0
 8004e78:	e7de      	b.n	8004e38 <_printf_float+0x16c>
 8004e7a:	b913      	cbnz	r3, 8004e82 <_printf_float+0x1b6>
 8004e7c:	6822      	ldr	r2, [r4, #0]
 8004e7e:	07d2      	lsls	r2, r2, #31
 8004e80:	d501      	bpl.n	8004e86 <_printf_float+0x1ba>
 8004e82:	3302      	adds	r3, #2
 8004e84:	e7f4      	b.n	8004e70 <_printf_float+0x1a4>
 8004e86:	2301      	movs	r3, #1
 8004e88:	e7f2      	b.n	8004e70 <_printf_float+0x1a4>
 8004e8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e90:	4299      	cmp	r1, r3
 8004e92:	db05      	blt.n	8004ea0 <_printf_float+0x1d4>
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	6121      	str	r1, [r4, #16]
 8004e98:	07d8      	lsls	r0, r3, #31
 8004e9a:	d5ea      	bpl.n	8004e72 <_printf_float+0x1a6>
 8004e9c:	1c4b      	adds	r3, r1, #1
 8004e9e:	e7e7      	b.n	8004e70 <_printf_float+0x1a4>
 8004ea0:	2900      	cmp	r1, #0
 8004ea2:	bfd4      	ite	le
 8004ea4:	f1c1 0202 	rsble	r2, r1, #2
 8004ea8:	2201      	movgt	r2, #1
 8004eaa:	4413      	add	r3, r2
 8004eac:	e7e0      	b.n	8004e70 <_printf_float+0x1a4>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	055a      	lsls	r2, r3, #21
 8004eb2:	d407      	bmi.n	8004ec4 <_printf_float+0x1f8>
 8004eb4:	6923      	ldr	r3, [r4, #16]
 8004eb6:	4642      	mov	r2, r8
 8004eb8:	4631      	mov	r1, r6
 8004eba:	4628      	mov	r0, r5
 8004ebc:	47b8      	blx	r7
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d12c      	bne.n	8004f1c <_printf_float+0x250>
 8004ec2:	e764      	b.n	8004d8e <_printf_float+0xc2>
 8004ec4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ec8:	f240 80e0 	bls.w	800508c <_printf_float+0x3c0>
 8004ecc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f7fb fe08 	bl	8000ae8 <__aeabi_dcmpeq>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d034      	beq.n	8004f46 <_printf_float+0x27a>
 8004edc:	4a37      	ldr	r2, [pc, #220]	; (8004fbc <_printf_float+0x2f0>)
 8004ede:	2301      	movs	r3, #1
 8004ee0:	4631      	mov	r1, r6
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	47b8      	blx	r7
 8004ee6:	3001      	adds	r0, #1
 8004ee8:	f43f af51 	beq.w	8004d8e <_printf_float+0xc2>
 8004eec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	db02      	blt.n	8004efa <_printf_float+0x22e>
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	07d8      	lsls	r0, r3, #31
 8004ef8:	d510      	bpl.n	8004f1c <_printf_float+0x250>
 8004efa:	ee18 3a10 	vmov	r3, s16
 8004efe:	4652      	mov	r2, sl
 8004f00:	4631      	mov	r1, r6
 8004f02:	4628      	mov	r0, r5
 8004f04:	47b8      	blx	r7
 8004f06:	3001      	adds	r0, #1
 8004f08:	f43f af41 	beq.w	8004d8e <_printf_float+0xc2>
 8004f0c:	f04f 0800 	mov.w	r8, #0
 8004f10:	f104 091a 	add.w	r9, r4, #26
 8004f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f16:	3b01      	subs	r3, #1
 8004f18:	4543      	cmp	r3, r8
 8004f1a:	dc09      	bgt.n	8004f30 <_printf_float+0x264>
 8004f1c:	6823      	ldr	r3, [r4, #0]
 8004f1e:	079b      	lsls	r3, r3, #30
 8004f20:	f100 8105 	bmi.w	800512e <_printf_float+0x462>
 8004f24:	68e0      	ldr	r0, [r4, #12]
 8004f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f28:	4298      	cmp	r0, r3
 8004f2a:	bfb8      	it	lt
 8004f2c:	4618      	movlt	r0, r3
 8004f2e:	e730      	b.n	8004d92 <_printf_float+0xc6>
 8004f30:	2301      	movs	r3, #1
 8004f32:	464a      	mov	r2, r9
 8004f34:	4631      	mov	r1, r6
 8004f36:	4628      	mov	r0, r5
 8004f38:	47b8      	blx	r7
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	f43f af27 	beq.w	8004d8e <_printf_float+0xc2>
 8004f40:	f108 0801 	add.w	r8, r8, #1
 8004f44:	e7e6      	b.n	8004f14 <_printf_float+0x248>
 8004f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	dc39      	bgt.n	8004fc0 <_printf_float+0x2f4>
 8004f4c:	4a1b      	ldr	r2, [pc, #108]	; (8004fbc <_printf_float+0x2f0>)
 8004f4e:	2301      	movs	r3, #1
 8004f50:	4631      	mov	r1, r6
 8004f52:	4628      	mov	r0, r5
 8004f54:	47b8      	blx	r7
 8004f56:	3001      	adds	r0, #1
 8004f58:	f43f af19 	beq.w	8004d8e <_printf_float+0xc2>
 8004f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f60:	4313      	orrs	r3, r2
 8004f62:	d102      	bne.n	8004f6a <_printf_float+0x29e>
 8004f64:	6823      	ldr	r3, [r4, #0]
 8004f66:	07d9      	lsls	r1, r3, #31
 8004f68:	d5d8      	bpl.n	8004f1c <_printf_float+0x250>
 8004f6a:	ee18 3a10 	vmov	r3, s16
 8004f6e:	4652      	mov	r2, sl
 8004f70:	4631      	mov	r1, r6
 8004f72:	4628      	mov	r0, r5
 8004f74:	47b8      	blx	r7
 8004f76:	3001      	adds	r0, #1
 8004f78:	f43f af09 	beq.w	8004d8e <_printf_float+0xc2>
 8004f7c:	f04f 0900 	mov.w	r9, #0
 8004f80:	f104 0a1a 	add.w	sl, r4, #26
 8004f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f86:	425b      	negs	r3, r3
 8004f88:	454b      	cmp	r3, r9
 8004f8a:	dc01      	bgt.n	8004f90 <_printf_float+0x2c4>
 8004f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f8e:	e792      	b.n	8004eb6 <_printf_float+0x1ea>
 8004f90:	2301      	movs	r3, #1
 8004f92:	4652      	mov	r2, sl
 8004f94:	4631      	mov	r1, r6
 8004f96:	4628      	mov	r0, r5
 8004f98:	47b8      	blx	r7
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	f43f aef7 	beq.w	8004d8e <_printf_float+0xc2>
 8004fa0:	f109 0901 	add.w	r9, r9, #1
 8004fa4:	e7ee      	b.n	8004f84 <_printf_float+0x2b8>
 8004fa6:	bf00      	nop
 8004fa8:	7fefffff 	.word	0x7fefffff
 8004fac:	08007b9c 	.word	0x08007b9c
 8004fb0:	08007ba0 	.word	0x08007ba0
 8004fb4:	08007ba8 	.word	0x08007ba8
 8004fb8:	08007ba4 	.word	0x08007ba4
 8004fbc:	08007bac 	.word	0x08007bac
 8004fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	bfa8      	it	ge
 8004fc8:	461a      	movge	r2, r3
 8004fca:	2a00      	cmp	r2, #0
 8004fcc:	4691      	mov	r9, r2
 8004fce:	dc37      	bgt.n	8005040 <_printf_float+0x374>
 8004fd0:	f04f 0b00 	mov.w	fp, #0
 8004fd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004fd8:	f104 021a 	add.w	r2, r4, #26
 8004fdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004fde:	9305      	str	r3, [sp, #20]
 8004fe0:	eba3 0309 	sub.w	r3, r3, r9
 8004fe4:	455b      	cmp	r3, fp
 8004fe6:	dc33      	bgt.n	8005050 <_printf_float+0x384>
 8004fe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fec:	429a      	cmp	r2, r3
 8004fee:	db3b      	blt.n	8005068 <_printf_float+0x39c>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	07da      	lsls	r2, r3, #31
 8004ff4:	d438      	bmi.n	8005068 <_printf_float+0x39c>
 8004ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ff8:	9a05      	ldr	r2, [sp, #20]
 8004ffa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ffc:	1a9a      	subs	r2, r3, r2
 8004ffe:	eba3 0901 	sub.w	r9, r3, r1
 8005002:	4591      	cmp	r9, r2
 8005004:	bfa8      	it	ge
 8005006:	4691      	movge	r9, r2
 8005008:	f1b9 0f00 	cmp.w	r9, #0
 800500c:	dc35      	bgt.n	800507a <_printf_float+0x3ae>
 800500e:	f04f 0800 	mov.w	r8, #0
 8005012:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005016:	f104 0a1a 	add.w	sl, r4, #26
 800501a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800501e:	1a9b      	subs	r3, r3, r2
 8005020:	eba3 0309 	sub.w	r3, r3, r9
 8005024:	4543      	cmp	r3, r8
 8005026:	f77f af79 	ble.w	8004f1c <_printf_float+0x250>
 800502a:	2301      	movs	r3, #1
 800502c:	4652      	mov	r2, sl
 800502e:	4631      	mov	r1, r6
 8005030:	4628      	mov	r0, r5
 8005032:	47b8      	blx	r7
 8005034:	3001      	adds	r0, #1
 8005036:	f43f aeaa 	beq.w	8004d8e <_printf_float+0xc2>
 800503a:	f108 0801 	add.w	r8, r8, #1
 800503e:	e7ec      	b.n	800501a <_printf_float+0x34e>
 8005040:	4613      	mov	r3, r2
 8005042:	4631      	mov	r1, r6
 8005044:	4642      	mov	r2, r8
 8005046:	4628      	mov	r0, r5
 8005048:	47b8      	blx	r7
 800504a:	3001      	adds	r0, #1
 800504c:	d1c0      	bne.n	8004fd0 <_printf_float+0x304>
 800504e:	e69e      	b.n	8004d8e <_printf_float+0xc2>
 8005050:	2301      	movs	r3, #1
 8005052:	4631      	mov	r1, r6
 8005054:	4628      	mov	r0, r5
 8005056:	9205      	str	r2, [sp, #20]
 8005058:	47b8      	blx	r7
 800505a:	3001      	adds	r0, #1
 800505c:	f43f ae97 	beq.w	8004d8e <_printf_float+0xc2>
 8005060:	9a05      	ldr	r2, [sp, #20]
 8005062:	f10b 0b01 	add.w	fp, fp, #1
 8005066:	e7b9      	b.n	8004fdc <_printf_float+0x310>
 8005068:	ee18 3a10 	vmov	r3, s16
 800506c:	4652      	mov	r2, sl
 800506e:	4631      	mov	r1, r6
 8005070:	4628      	mov	r0, r5
 8005072:	47b8      	blx	r7
 8005074:	3001      	adds	r0, #1
 8005076:	d1be      	bne.n	8004ff6 <_printf_float+0x32a>
 8005078:	e689      	b.n	8004d8e <_printf_float+0xc2>
 800507a:	9a05      	ldr	r2, [sp, #20]
 800507c:	464b      	mov	r3, r9
 800507e:	4442      	add	r2, r8
 8005080:	4631      	mov	r1, r6
 8005082:	4628      	mov	r0, r5
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	d1c1      	bne.n	800500e <_printf_float+0x342>
 800508a:	e680      	b.n	8004d8e <_printf_float+0xc2>
 800508c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800508e:	2a01      	cmp	r2, #1
 8005090:	dc01      	bgt.n	8005096 <_printf_float+0x3ca>
 8005092:	07db      	lsls	r3, r3, #31
 8005094:	d538      	bpl.n	8005108 <_printf_float+0x43c>
 8005096:	2301      	movs	r3, #1
 8005098:	4642      	mov	r2, r8
 800509a:	4631      	mov	r1, r6
 800509c:	4628      	mov	r0, r5
 800509e:	47b8      	blx	r7
 80050a0:	3001      	adds	r0, #1
 80050a2:	f43f ae74 	beq.w	8004d8e <_printf_float+0xc2>
 80050a6:	ee18 3a10 	vmov	r3, s16
 80050aa:	4652      	mov	r2, sl
 80050ac:	4631      	mov	r1, r6
 80050ae:	4628      	mov	r0, r5
 80050b0:	47b8      	blx	r7
 80050b2:	3001      	adds	r0, #1
 80050b4:	f43f ae6b 	beq.w	8004d8e <_printf_float+0xc2>
 80050b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050bc:	2200      	movs	r2, #0
 80050be:	2300      	movs	r3, #0
 80050c0:	f7fb fd12 	bl	8000ae8 <__aeabi_dcmpeq>
 80050c4:	b9d8      	cbnz	r0, 80050fe <_printf_float+0x432>
 80050c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050c8:	f108 0201 	add.w	r2, r8, #1
 80050cc:	3b01      	subs	r3, #1
 80050ce:	4631      	mov	r1, r6
 80050d0:	4628      	mov	r0, r5
 80050d2:	47b8      	blx	r7
 80050d4:	3001      	adds	r0, #1
 80050d6:	d10e      	bne.n	80050f6 <_printf_float+0x42a>
 80050d8:	e659      	b.n	8004d8e <_printf_float+0xc2>
 80050da:	2301      	movs	r3, #1
 80050dc:	4652      	mov	r2, sl
 80050de:	4631      	mov	r1, r6
 80050e0:	4628      	mov	r0, r5
 80050e2:	47b8      	blx	r7
 80050e4:	3001      	adds	r0, #1
 80050e6:	f43f ae52 	beq.w	8004d8e <_printf_float+0xc2>
 80050ea:	f108 0801 	add.w	r8, r8, #1
 80050ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050f0:	3b01      	subs	r3, #1
 80050f2:	4543      	cmp	r3, r8
 80050f4:	dcf1      	bgt.n	80050da <_printf_float+0x40e>
 80050f6:	464b      	mov	r3, r9
 80050f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80050fc:	e6dc      	b.n	8004eb8 <_printf_float+0x1ec>
 80050fe:	f04f 0800 	mov.w	r8, #0
 8005102:	f104 0a1a 	add.w	sl, r4, #26
 8005106:	e7f2      	b.n	80050ee <_printf_float+0x422>
 8005108:	2301      	movs	r3, #1
 800510a:	4642      	mov	r2, r8
 800510c:	e7df      	b.n	80050ce <_printf_float+0x402>
 800510e:	2301      	movs	r3, #1
 8005110:	464a      	mov	r2, r9
 8005112:	4631      	mov	r1, r6
 8005114:	4628      	mov	r0, r5
 8005116:	47b8      	blx	r7
 8005118:	3001      	adds	r0, #1
 800511a:	f43f ae38 	beq.w	8004d8e <_printf_float+0xc2>
 800511e:	f108 0801 	add.w	r8, r8, #1
 8005122:	68e3      	ldr	r3, [r4, #12]
 8005124:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005126:	1a5b      	subs	r3, r3, r1
 8005128:	4543      	cmp	r3, r8
 800512a:	dcf0      	bgt.n	800510e <_printf_float+0x442>
 800512c:	e6fa      	b.n	8004f24 <_printf_float+0x258>
 800512e:	f04f 0800 	mov.w	r8, #0
 8005132:	f104 0919 	add.w	r9, r4, #25
 8005136:	e7f4      	b.n	8005122 <_printf_float+0x456>

08005138 <_printf_common>:
 8005138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800513c:	4616      	mov	r6, r2
 800513e:	4699      	mov	r9, r3
 8005140:	688a      	ldr	r2, [r1, #8]
 8005142:	690b      	ldr	r3, [r1, #16]
 8005144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005148:	4293      	cmp	r3, r2
 800514a:	bfb8      	it	lt
 800514c:	4613      	movlt	r3, r2
 800514e:	6033      	str	r3, [r6, #0]
 8005150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005154:	4607      	mov	r7, r0
 8005156:	460c      	mov	r4, r1
 8005158:	b10a      	cbz	r2, 800515e <_printf_common+0x26>
 800515a:	3301      	adds	r3, #1
 800515c:	6033      	str	r3, [r6, #0]
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	0699      	lsls	r1, r3, #26
 8005162:	bf42      	ittt	mi
 8005164:	6833      	ldrmi	r3, [r6, #0]
 8005166:	3302      	addmi	r3, #2
 8005168:	6033      	strmi	r3, [r6, #0]
 800516a:	6825      	ldr	r5, [r4, #0]
 800516c:	f015 0506 	ands.w	r5, r5, #6
 8005170:	d106      	bne.n	8005180 <_printf_common+0x48>
 8005172:	f104 0a19 	add.w	sl, r4, #25
 8005176:	68e3      	ldr	r3, [r4, #12]
 8005178:	6832      	ldr	r2, [r6, #0]
 800517a:	1a9b      	subs	r3, r3, r2
 800517c:	42ab      	cmp	r3, r5
 800517e:	dc26      	bgt.n	80051ce <_printf_common+0x96>
 8005180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005184:	1e13      	subs	r3, r2, #0
 8005186:	6822      	ldr	r2, [r4, #0]
 8005188:	bf18      	it	ne
 800518a:	2301      	movne	r3, #1
 800518c:	0692      	lsls	r2, r2, #26
 800518e:	d42b      	bmi.n	80051e8 <_printf_common+0xb0>
 8005190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005194:	4649      	mov	r1, r9
 8005196:	4638      	mov	r0, r7
 8005198:	47c0      	blx	r8
 800519a:	3001      	adds	r0, #1
 800519c:	d01e      	beq.n	80051dc <_printf_common+0xa4>
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	68e5      	ldr	r5, [r4, #12]
 80051a2:	6832      	ldr	r2, [r6, #0]
 80051a4:	f003 0306 	and.w	r3, r3, #6
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	bf08      	it	eq
 80051ac:	1aad      	subeq	r5, r5, r2
 80051ae:	68a3      	ldr	r3, [r4, #8]
 80051b0:	6922      	ldr	r2, [r4, #16]
 80051b2:	bf0c      	ite	eq
 80051b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051b8:	2500      	movne	r5, #0
 80051ba:	4293      	cmp	r3, r2
 80051bc:	bfc4      	itt	gt
 80051be:	1a9b      	subgt	r3, r3, r2
 80051c0:	18ed      	addgt	r5, r5, r3
 80051c2:	2600      	movs	r6, #0
 80051c4:	341a      	adds	r4, #26
 80051c6:	42b5      	cmp	r5, r6
 80051c8:	d11a      	bne.n	8005200 <_printf_common+0xc8>
 80051ca:	2000      	movs	r0, #0
 80051cc:	e008      	b.n	80051e0 <_printf_common+0xa8>
 80051ce:	2301      	movs	r3, #1
 80051d0:	4652      	mov	r2, sl
 80051d2:	4649      	mov	r1, r9
 80051d4:	4638      	mov	r0, r7
 80051d6:	47c0      	blx	r8
 80051d8:	3001      	adds	r0, #1
 80051da:	d103      	bne.n	80051e4 <_printf_common+0xac>
 80051dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e4:	3501      	adds	r5, #1
 80051e6:	e7c6      	b.n	8005176 <_printf_common+0x3e>
 80051e8:	18e1      	adds	r1, r4, r3
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	2030      	movs	r0, #48	; 0x30
 80051ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051f2:	4422      	add	r2, r4
 80051f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051fc:	3302      	adds	r3, #2
 80051fe:	e7c7      	b.n	8005190 <_printf_common+0x58>
 8005200:	2301      	movs	r3, #1
 8005202:	4622      	mov	r2, r4
 8005204:	4649      	mov	r1, r9
 8005206:	4638      	mov	r0, r7
 8005208:	47c0      	blx	r8
 800520a:	3001      	adds	r0, #1
 800520c:	d0e6      	beq.n	80051dc <_printf_common+0xa4>
 800520e:	3601      	adds	r6, #1
 8005210:	e7d9      	b.n	80051c6 <_printf_common+0x8e>
	...

08005214 <_printf_i>:
 8005214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005218:	7e0f      	ldrb	r7, [r1, #24]
 800521a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800521c:	2f78      	cmp	r7, #120	; 0x78
 800521e:	4691      	mov	r9, r2
 8005220:	4680      	mov	r8, r0
 8005222:	460c      	mov	r4, r1
 8005224:	469a      	mov	sl, r3
 8005226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800522a:	d807      	bhi.n	800523c <_printf_i+0x28>
 800522c:	2f62      	cmp	r7, #98	; 0x62
 800522e:	d80a      	bhi.n	8005246 <_printf_i+0x32>
 8005230:	2f00      	cmp	r7, #0
 8005232:	f000 80d8 	beq.w	80053e6 <_printf_i+0x1d2>
 8005236:	2f58      	cmp	r7, #88	; 0x58
 8005238:	f000 80a3 	beq.w	8005382 <_printf_i+0x16e>
 800523c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005244:	e03a      	b.n	80052bc <_printf_i+0xa8>
 8005246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800524a:	2b15      	cmp	r3, #21
 800524c:	d8f6      	bhi.n	800523c <_printf_i+0x28>
 800524e:	a101      	add	r1, pc, #4	; (adr r1, 8005254 <_printf_i+0x40>)
 8005250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005254:	080052ad 	.word	0x080052ad
 8005258:	080052c1 	.word	0x080052c1
 800525c:	0800523d 	.word	0x0800523d
 8005260:	0800523d 	.word	0x0800523d
 8005264:	0800523d 	.word	0x0800523d
 8005268:	0800523d 	.word	0x0800523d
 800526c:	080052c1 	.word	0x080052c1
 8005270:	0800523d 	.word	0x0800523d
 8005274:	0800523d 	.word	0x0800523d
 8005278:	0800523d 	.word	0x0800523d
 800527c:	0800523d 	.word	0x0800523d
 8005280:	080053cd 	.word	0x080053cd
 8005284:	080052f1 	.word	0x080052f1
 8005288:	080053af 	.word	0x080053af
 800528c:	0800523d 	.word	0x0800523d
 8005290:	0800523d 	.word	0x0800523d
 8005294:	080053ef 	.word	0x080053ef
 8005298:	0800523d 	.word	0x0800523d
 800529c:	080052f1 	.word	0x080052f1
 80052a0:	0800523d 	.word	0x0800523d
 80052a4:	0800523d 	.word	0x0800523d
 80052a8:	080053b7 	.word	0x080053b7
 80052ac:	682b      	ldr	r3, [r5, #0]
 80052ae:	1d1a      	adds	r2, r3, #4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	602a      	str	r2, [r5, #0]
 80052b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052bc:	2301      	movs	r3, #1
 80052be:	e0a3      	b.n	8005408 <_printf_i+0x1f4>
 80052c0:	6820      	ldr	r0, [r4, #0]
 80052c2:	6829      	ldr	r1, [r5, #0]
 80052c4:	0606      	lsls	r6, r0, #24
 80052c6:	f101 0304 	add.w	r3, r1, #4
 80052ca:	d50a      	bpl.n	80052e2 <_printf_i+0xce>
 80052cc:	680e      	ldr	r6, [r1, #0]
 80052ce:	602b      	str	r3, [r5, #0]
 80052d0:	2e00      	cmp	r6, #0
 80052d2:	da03      	bge.n	80052dc <_printf_i+0xc8>
 80052d4:	232d      	movs	r3, #45	; 0x2d
 80052d6:	4276      	negs	r6, r6
 80052d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052dc:	485e      	ldr	r0, [pc, #376]	; (8005458 <_printf_i+0x244>)
 80052de:	230a      	movs	r3, #10
 80052e0:	e019      	b.n	8005316 <_printf_i+0x102>
 80052e2:	680e      	ldr	r6, [r1, #0]
 80052e4:	602b      	str	r3, [r5, #0]
 80052e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052ea:	bf18      	it	ne
 80052ec:	b236      	sxthne	r6, r6
 80052ee:	e7ef      	b.n	80052d0 <_printf_i+0xbc>
 80052f0:	682b      	ldr	r3, [r5, #0]
 80052f2:	6820      	ldr	r0, [r4, #0]
 80052f4:	1d19      	adds	r1, r3, #4
 80052f6:	6029      	str	r1, [r5, #0]
 80052f8:	0601      	lsls	r1, r0, #24
 80052fa:	d501      	bpl.n	8005300 <_printf_i+0xec>
 80052fc:	681e      	ldr	r6, [r3, #0]
 80052fe:	e002      	b.n	8005306 <_printf_i+0xf2>
 8005300:	0646      	lsls	r6, r0, #25
 8005302:	d5fb      	bpl.n	80052fc <_printf_i+0xe8>
 8005304:	881e      	ldrh	r6, [r3, #0]
 8005306:	4854      	ldr	r0, [pc, #336]	; (8005458 <_printf_i+0x244>)
 8005308:	2f6f      	cmp	r7, #111	; 0x6f
 800530a:	bf0c      	ite	eq
 800530c:	2308      	moveq	r3, #8
 800530e:	230a      	movne	r3, #10
 8005310:	2100      	movs	r1, #0
 8005312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005316:	6865      	ldr	r5, [r4, #4]
 8005318:	60a5      	str	r5, [r4, #8]
 800531a:	2d00      	cmp	r5, #0
 800531c:	bfa2      	ittt	ge
 800531e:	6821      	ldrge	r1, [r4, #0]
 8005320:	f021 0104 	bicge.w	r1, r1, #4
 8005324:	6021      	strge	r1, [r4, #0]
 8005326:	b90e      	cbnz	r6, 800532c <_printf_i+0x118>
 8005328:	2d00      	cmp	r5, #0
 800532a:	d04d      	beq.n	80053c8 <_printf_i+0x1b4>
 800532c:	4615      	mov	r5, r2
 800532e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005332:	fb03 6711 	mls	r7, r3, r1, r6
 8005336:	5dc7      	ldrb	r7, [r0, r7]
 8005338:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800533c:	4637      	mov	r7, r6
 800533e:	42bb      	cmp	r3, r7
 8005340:	460e      	mov	r6, r1
 8005342:	d9f4      	bls.n	800532e <_printf_i+0x11a>
 8005344:	2b08      	cmp	r3, #8
 8005346:	d10b      	bne.n	8005360 <_printf_i+0x14c>
 8005348:	6823      	ldr	r3, [r4, #0]
 800534a:	07de      	lsls	r6, r3, #31
 800534c:	d508      	bpl.n	8005360 <_printf_i+0x14c>
 800534e:	6923      	ldr	r3, [r4, #16]
 8005350:	6861      	ldr	r1, [r4, #4]
 8005352:	4299      	cmp	r1, r3
 8005354:	bfde      	ittt	le
 8005356:	2330      	movle	r3, #48	; 0x30
 8005358:	f805 3c01 	strble.w	r3, [r5, #-1]
 800535c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005360:	1b52      	subs	r2, r2, r5
 8005362:	6122      	str	r2, [r4, #16]
 8005364:	f8cd a000 	str.w	sl, [sp]
 8005368:	464b      	mov	r3, r9
 800536a:	aa03      	add	r2, sp, #12
 800536c:	4621      	mov	r1, r4
 800536e:	4640      	mov	r0, r8
 8005370:	f7ff fee2 	bl	8005138 <_printf_common>
 8005374:	3001      	adds	r0, #1
 8005376:	d14c      	bne.n	8005412 <_printf_i+0x1fe>
 8005378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800537c:	b004      	add	sp, #16
 800537e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005382:	4835      	ldr	r0, [pc, #212]	; (8005458 <_printf_i+0x244>)
 8005384:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005388:	6829      	ldr	r1, [r5, #0]
 800538a:	6823      	ldr	r3, [r4, #0]
 800538c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005390:	6029      	str	r1, [r5, #0]
 8005392:	061d      	lsls	r5, r3, #24
 8005394:	d514      	bpl.n	80053c0 <_printf_i+0x1ac>
 8005396:	07df      	lsls	r7, r3, #31
 8005398:	bf44      	itt	mi
 800539a:	f043 0320 	orrmi.w	r3, r3, #32
 800539e:	6023      	strmi	r3, [r4, #0]
 80053a0:	b91e      	cbnz	r6, 80053aa <_printf_i+0x196>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	f023 0320 	bic.w	r3, r3, #32
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	2310      	movs	r3, #16
 80053ac:	e7b0      	b.n	8005310 <_printf_i+0xfc>
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	f043 0320 	orr.w	r3, r3, #32
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	2378      	movs	r3, #120	; 0x78
 80053b8:	4828      	ldr	r0, [pc, #160]	; (800545c <_printf_i+0x248>)
 80053ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80053be:	e7e3      	b.n	8005388 <_printf_i+0x174>
 80053c0:	0659      	lsls	r1, r3, #25
 80053c2:	bf48      	it	mi
 80053c4:	b2b6      	uxthmi	r6, r6
 80053c6:	e7e6      	b.n	8005396 <_printf_i+0x182>
 80053c8:	4615      	mov	r5, r2
 80053ca:	e7bb      	b.n	8005344 <_printf_i+0x130>
 80053cc:	682b      	ldr	r3, [r5, #0]
 80053ce:	6826      	ldr	r6, [r4, #0]
 80053d0:	6961      	ldr	r1, [r4, #20]
 80053d2:	1d18      	adds	r0, r3, #4
 80053d4:	6028      	str	r0, [r5, #0]
 80053d6:	0635      	lsls	r5, r6, #24
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	d501      	bpl.n	80053e0 <_printf_i+0x1cc>
 80053dc:	6019      	str	r1, [r3, #0]
 80053de:	e002      	b.n	80053e6 <_printf_i+0x1d2>
 80053e0:	0670      	lsls	r0, r6, #25
 80053e2:	d5fb      	bpl.n	80053dc <_printf_i+0x1c8>
 80053e4:	8019      	strh	r1, [r3, #0]
 80053e6:	2300      	movs	r3, #0
 80053e8:	6123      	str	r3, [r4, #16]
 80053ea:	4615      	mov	r5, r2
 80053ec:	e7ba      	b.n	8005364 <_printf_i+0x150>
 80053ee:	682b      	ldr	r3, [r5, #0]
 80053f0:	1d1a      	adds	r2, r3, #4
 80053f2:	602a      	str	r2, [r5, #0]
 80053f4:	681d      	ldr	r5, [r3, #0]
 80053f6:	6862      	ldr	r2, [r4, #4]
 80053f8:	2100      	movs	r1, #0
 80053fa:	4628      	mov	r0, r5
 80053fc:	f7fa ff00 	bl	8000200 <memchr>
 8005400:	b108      	cbz	r0, 8005406 <_printf_i+0x1f2>
 8005402:	1b40      	subs	r0, r0, r5
 8005404:	6060      	str	r0, [r4, #4]
 8005406:	6863      	ldr	r3, [r4, #4]
 8005408:	6123      	str	r3, [r4, #16]
 800540a:	2300      	movs	r3, #0
 800540c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005410:	e7a8      	b.n	8005364 <_printf_i+0x150>
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	462a      	mov	r2, r5
 8005416:	4649      	mov	r1, r9
 8005418:	4640      	mov	r0, r8
 800541a:	47d0      	blx	sl
 800541c:	3001      	adds	r0, #1
 800541e:	d0ab      	beq.n	8005378 <_printf_i+0x164>
 8005420:	6823      	ldr	r3, [r4, #0]
 8005422:	079b      	lsls	r3, r3, #30
 8005424:	d413      	bmi.n	800544e <_printf_i+0x23a>
 8005426:	68e0      	ldr	r0, [r4, #12]
 8005428:	9b03      	ldr	r3, [sp, #12]
 800542a:	4298      	cmp	r0, r3
 800542c:	bfb8      	it	lt
 800542e:	4618      	movlt	r0, r3
 8005430:	e7a4      	b.n	800537c <_printf_i+0x168>
 8005432:	2301      	movs	r3, #1
 8005434:	4632      	mov	r2, r6
 8005436:	4649      	mov	r1, r9
 8005438:	4640      	mov	r0, r8
 800543a:	47d0      	blx	sl
 800543c:	3001      	adds	r0, #1
 800543e:	d09b      	beq.n	8005378 <_printf_i+0x164>
 8005440:	3501      	adds	r5, #1
 8005442:	68e3      	ldr	r3, [r4, #12]
 8005444:	9903      	ldr	r1, [sp, #12]
 8005446:	1a5b      	subs	r3, r3, r1
 8005448:	42ab      	cmp	r3, r5
 800544a:	dcf2      	bgt.n	8005432 <_printf_i+0x21e>
 800544c:	e7eb      	b.n	8005426 <_printf_i+0x212>
 800544e:	2500      	movs	r5, #0
 8005450:	f104 0619 	add.w	r6, r4, #25
 8005454:	e7f5      	b.n	8005442 <_printf_i+0x22e>
 8005456:	bf00      	nop
 8005458:	08007bae 	.word	0x08007bae
 800545c:	08007bbf 	.word	0x08007bbf

08005460 <siprintf>:
 8005460:	b40e      	push	{r1, r2, r3}
 8005462:	b500      	push	{lr}
 8005464:	b09c      	sub	sp, #112	; 0x70
 8005466:	ab1d      	add	r3, sp, #116	; 0x74
 8005468:	9002      	str	r0, [sp, #8]
 800546a:	9006      	str	r0, [sp, #24]
 800546c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005470:	4809      	ldr	r0, [pc, #36]	; (8005498 <siprintf+0x38>)
 8005472:	9107      	str	r1, [sp, #28]
 8005474:	9104      	str	r1, [sp, #16]
 8005476:	4909      	ldr	r1, [pc, #36]	; (800549c <siprintf+0x3c>)
 8005478:	f853 2b04 	ldr.w	r2, [r3], #4
 800547c:	9105      	str	r1, [sp, #20]
 800547e:	6800      	ldr	r0, [r0, #0]
 8005480:	9301      	str	r3, [sp, #4]
 8005482:	a902      	add	r1, sp, #8
 8005484:	f001 fb68 	bl	8006b58 <_svfiprintf_r>
 8005488:	9b02      	ldr	r3, [sp, #8]
 800548a:	2200      	movs	r2, #0
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	b01c      	add	sp, #112	; 0x70
 8005490:	f85d eb04 	ldr.w	lr, [sp], #4
 8005494:	b003      	add	sp, #12
 8005496:	4770      	bx	lr
 8005498:	2000001c 	.word	0x2000001c
 800549c:	ffff0208 	.word	0xffff0208

080054a0 <quorem>:
 80054a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a4:	6903      	ldr	r3, [r0, #16]
 80054a6:	690c      	ldr	r4, [r1, #16]
 80054a8:	42a3      	cmp	r3, r4
 80054aa:	4607      	mov	r7, r0
 80054ac:	f2c0 8081 	blt.w	80055b2 <quorem+0x112>
 80054b0:	3c01      	subs	r4, #1
 80054b2:	f101 0814 	add.w	r8, r1, #20
 80054b6:	f100 0514 	add.w	r5, r0, #20
 80054ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054be:	9301      	str	r3, [sp, #4]
 80054c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80054c8:	3301      	adds	r3, #1
 80054ca:	429a      	cmp	r2, r3
 80054cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80054d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80054d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80054d8:	d331      	bcc.n	800553e <quorem+0x9e>
 80054da:	f04f 0e00 	mov.w	lr, #0
 80054de:	4640      	mov	r0, r8
 80054e0:	46ac      	mov	ip, r5
 80054e2:	46f2      	mov	sl, lr
 80054e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80054e8:	b293      	uxth	r3, r2
 80054ea:	fb06 e303 	mla	r3, r6, r3, lr
 80054ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	ebaa 0303 	sub.w	r3, sl, r3
 80054f8:	f8dc a000 	ldr.w	sl, [ip]
 80054fc:	0c12      	lsrs	r2, r2, #16
 80054fe:	fa13 f38a 	uxtah	r3, r3, sl
 8005502:	fb06 e202 	mla	r2, r6, r2, lr
 8005506:	9300      	str	r3, [sp, #0]
 8005508:	9b00      	ldr	r3, [sp, #0]
 800550a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800550e:	b292      	uxth	r2, r2
 8005510:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005514:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005518:	f8bd 3000 	ldrh.w	r3, [sp]
 800551c:	4581      	cmp	r9, r0
 800551e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005522:	f84c 3b04 	str.w	r3, [ip], #4
 8005526:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800552a:	d2db      	bcs.n	80054e4 <quorem+0x44>
 800552c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005530:	b92b      	cbnz	r3, 800553e <quorem+0x9e>
 8005532:	9b01      	ldr	r3, [sp, #4]
 8005534:	3b04      	subs	r3, #4
 8005536:	429d      	cmp	r5, r3
 8005538:	461a      	mov	r2, r3
 800553a:	d32e      	bcc.n	800559a <quorem+0xfa>
 800553c:	613c      	str	r4, [r7, #16]
 800553e:	4638      	mov	r0, r7
 8005540:	f001 f8b6 	bl	80066b0 <__mcmp>
 8005544:	2800      	cmp	r0, #0
 8005546:	db24      	blt.n	8005592 <quorem+0xf2>
 8005548:	3601      	adds	r6, #1
 800554a:	4628      	mov	r0, r5
 800554c:	f04f 0c00 	mov.w	ip, #0
 8005550:	f858 2b04 	ldr.w	r2, [r8], #4
 8005554:	f8d0 e000 	ldr.w	lr, [r0]
 8005558:	b293      	uxth	r3, r2
 800555a:	ebac 0303 	sub.w	r3, ip, r3
 800555e:	0c12      	lsrs	r2, r2, #16
 8005560:	fa13 f38e 	uxtah	r3, r3, lr
 8005564:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005568:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800556c:	b29b      	uxth	r3, r3
 800556e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005572:	45c1      	cmp	r9, r8
 8005574:	f840 3b04 	str.w	r3, [r0], #4
 8005578:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800557c:	d2e8      	bcs.n	8005550 <quorem+0xb0>
 800557e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005582:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005586:	b922      	cbnz	r2, 8005592 <quorem+0xf2>
 8005588:	3b04      	subs	r3, #4
 800558a:	429d      	cmp	r5, r3
 800558c:	461a      	mov	r2, r3
 800558e:	d30a      	bcc.n	80055a6 <quorem+0x106>
 8005590:	613c      	str	r4, [r7, #16]
 8005592:	4630      	mov	r0, r6
 8005594:	b003      	add	sp, #12
 8005596:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800559a:	6812      	ldr	r2, [r2, #0]
 800559c:	3b04      	subs	r3, #4
 800559e:	2a00      	cmp	r2, #0
 80055a0:	d1cc      	bne.n	800553c <quorem+0x9c>
 80055a2:	3c01      	subs	r4, #1
 80055a4:	e7c7      	b.n	8005536 <quorem+0x96>
 80055a6:	6812      	ldr	r2, [r2, #0]
 80055a8:	3b04      	subs	r3, #4
 80055aa:	2a00      	cmp	r2, #0
 80055ac:	d1f0      	bne.n	8005590 <quorem+0xf0>
 80055ae:	3c01      	subs	r4, #1
 80055b0:	e7eb      	b.n	800558a <quorem+0xea>
 80055b2:	2000      	movs	r0, #0
 80055b4:	e7ee      	b.n	8005594 <quorem+0xf4>
	...

080055b8 <_dtoa_r>:
 80055b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055bc:	ed2d 8b04 	vpush	{d8-d9}
 80055c0:	ec57 6b10 	vmov	r6, r7, d0
 80055c4:	b093      	sub	sp, #76	; 0x4c
 80055c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80055c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80055cc:	9106      	str	r1, [sp, #24]
 80055ce:	ee10 aa10 	vmov	sl, s0
 80055d2:	4604      	mov	r4, r0
 80055d4:	9209      	str	r2, [sp, #36]	; 0x24
 80055d6:	930c      	str	r3, [sp, #48]	; 0x30
 80055d8:	46bb      	mov	fp, r7
 80055da:	b975      	cbnz	r5, 80055fa <_dtoa_r+0x42>
 80055dc:	2010      	movs	r0, #16
 80055de:	f000 fddd 	bl	800619c <malloc>
 80055e2:	4602      	mov	r2, r0
 80055e4:	6260      	str	r0, [r4, #36]	; 0x24
 80055e6:	b920      	cbnz	r0, 80055f2 <_dtoa_r+0x3a>
 80055e8:	4ba7      	ldr	r3, [pc, #668]	; (8005888 <_dtoa_r+0x2d0>)
 80055ea:	21ea      	movs	r1, #234	; 0xea
 80055ec:	48a7      	ldr	r0, [pc, #668]	; (800588c <_dtoa_r+0x2d4>)
 80055ee:	f001 fbc3 	bl	8006d78 <__assert_func>
 80055f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80055f6:	6005      	str	r5, [r0, #0]
 80055f8:	60c5      	str	r5, [r0, #12]
 80055fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80055fc:	6819      	ldr	r1, [r3, #0]
 80055fe:	b151      	cbz	r1, 8005616 <_dtoa_r+0x5e>
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	604a      	str	r2, [r1, #4]
 8005604:	2301      	movs	r3, #1
 8005606:	4093      	lsls	r3, r2
 8005608:	608b      	str	r3, [r1, #8]
 800560a:	4620      	mov	r0, r4
 800560c:	f000 fe0e 	bl	800622c <_Bfree>
 8005610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	1e3b      	subs	r3, r7, #0
 8005618:	bfaa      	itet	ge
 800561a:	2300      	movge	r3, #0
 800561c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005620:	f8c8 3000 	strge.w	r3, [r8]
 8005624:	4b9a      	ldr	r3, [pc, #616]	; (8005890 <_dtoa_r+0x2d8>)
 8005626:	bfbc      	itt	lt
 8005628:	2201      	movlt	r2, #1
 800562a:	f8c8 2000 	strlt.w	r2, [r8]
 800562e:	ea33 030b 	bics.w	r3, r3, fp
 8005632:	d11b      	bne.n	800566c <_dtoa_r+0xb4>
 8005634:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005636:	f242 730f 	movw	r3, #9999	; 0x270f
 800563a:	6013      	str	r3, [r2, #0]
 800563c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005640:	4333      	orrs	r3, r6
 8005642:	f000 8592 	beq.w	800616a <_dtoa_r+0xbb2>
 8005646:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005648:	b963      	cbnz	r3, 8005664 <_dtoa_r+0xac>
 800564a:	4b92      	ldr	r3, [pc, #584]	; (8005894 <_dtoa_r+0x2dc>)
 800564c:	e022      	b.n	8005694 <_dtoa_r+0xdc>
 800564e:	4b92      	ldr	r3, [pc, #584]	; (8005898 <_dtoa_r+0x2e0>)
 8005650:	9301      	str	r3, [sp, #4]
 8005652:	3308      	adds	r3, #8
 8005654:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	9801      	ldr	r0, [sp, #4]
 800565a:	b013      	add	sp, #76	; 0x4c
 800565c:	ecbd 8b04 	vpop	{d8-d9}
 8005660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005664:	4b8b      	ldr	r3, [pc, #556]	; (8005894 <_dtoa_r+0x2dc>)
 8005666:	9301      	str	r3, [sp, #4]
 8005668:	3303      	adds	r3, #3
 800566a:	e7f3      	b.n	8005654 <_dtoa_r+0x9c>
 800566c:	2200      	movs	r2, #0
 800566e:	2300      	movs	r3, #0
 8005670:	4650      	mov	r0, sl
 8005672:	4659      	mov	r1, fp
 8005674:	f7fb fa38 	bl	8000ae8 <__aeabi_dcmpeq>
 8005678:	ec4b ab19 	vmov	d9, sl, fp
 800567c:	4680      	mov	r8, r0
 800567e:	b158      	cbz	r0, 8005698 <_dtoa_r+0xe0>
 8005680:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005682:	2301      	movs	r3, #1
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005688:	2b00      	cmp	r3, #0
 800568a:	f000 856b 	beq.w	8006164 <_dtoa_r+0xbac>
 800568e:	4883      	ldr	r0, [pc, #524]	; (800589c <_dtoa_r+0x2e4>)
 8005690:	6018      	str	r0, [r3, #0]
 8005692:	1e43      	subs	r3, r0, #1
 8005694:	9301      	str	r3, [sp, #4]
 8005696:	e7df      	b.n	8005658 <_dtoa_r+0xa0>
 8005698:	ec4b ab10 	vmov	d0, sl, fp
 800569c:	aa10      	add	r2, sp, #64	; 0x40
 800569e:	a911      	add	r1, sp, #68	; 0x44
 80056a0:	4620      	mov	r0, r4
 80056a2:	f001 f8ab 	bl	80067fc <__d2b>
 80056a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80056aa:	ee08 0a10 	vmov	s16, r0
 80056ae:	2d00      	cmp	r5, #0
 80056b0:	f000 8084 	beq.w	80057bc <_dtoa_r+0x204>
 80056b4:	ee19 3a90 	vmov	r3, s19
 80056b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80056c0:	4656      	mov	r6, sl
 80056c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80056c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80056ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80056ce:	4b74      	ldr	r3, [pc, #464]	; (80058a0 <_dtoa_r+0x2e8>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	4630      	mov	r0, r6
 80056d4:	4639      	mov	r1, r7
 80056d6:	f7fa fde7 	bl	80002a8 <__aeabi_dsub>
 80056da:	a365      	add	r3, pc, #404	; (adr r3, 8005870 <_dtoa_r+0x2b8>)
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	f7fa ff9a 	bl	8000618 <__aeabi_dmul>
 80056e4:	a364      	add	r3, pc, #400	; (adr r3, 8005878 <_dtoa_r+0x2c0>)
 80056e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ea:	f7fa fddf 	bl	80002ac <__adddf3>
 80056ee:	4606      	mov	r6, r0
 80056f0:	4628      	mov	r0, r5
 80056f2:	460f      	mov	r7, r1
 80056f4:	f7fa ff26 	bl	8000544 <__aeabi_i2d>
 80056f8:	a361      	add	r3, pc, #388	; (adr r3, 8005880 <_dtoa_r+0x2c8>)
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f7fa ff8b 	bl	8000618 <__aeabi_dmul>
 8005702:	4602      	mov	r2, r0
 8005704:	460b      	mov	r3, r1
 8005706:	4630      	mov	r0, r6
 8005708:	4639      	mov	r1, r7
 800570a:	f7fa fdcf 	bl	80002ac <__adddf3>
 800570e:	4606      	mov	r6, r0
 8005710:	460f      	mov	r7, r1
 8005712:	f7fb fa31 	bl	8000b78 <__aeabi_d2iz>
 8005716:	2200      	movs	r2, #0
 8005718:	9000      	str	r0, [sp, #0]
 800571a:	2300      	movs	r3, #0
 800571c:	4630      	mov	r0, r6
 800571e:	4639      	mov	r1, r7
 8005720:	f7fb f9ec 	bl	8000afc <__aeabi_dcmplt>
 8005724:	b150      	cbz	r0, 800573c <_dtoa_r+0x184>
 8005726:	9800      	ldr	r0, [sp, #0]
 8005728:	f7fa ff0c 	bl	8000544 <__aeabi_i2d>
 800572c:	4632      	mov	r2, r6
 800572e:	463b      	mov	r3, r7
 8005730:	f7fb f9da 	bl	8000ae8 <__aeabi_dcmpeq>
 8005734:	b910      	cbnz	r0, 800573c <_dtoa_r+0x184>
 8005736:	9b00      	ldr	r3, [sp, #0]
 8005738:	3b01      	subs	r3, #1
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	9b00      	ldr	r3, [sp, #0]
 800573e:	2b16      	cmp	r3, #22
 8005740:	d85a      	bhi.n	80057f8 <_dtoa_r+0x240>
 8005742:	9a00      	ldr	r2, [sp, #0]
 8005744:	4b57      	ldr	r3, [pc, #348]	; (80058a4 <_dtoa_r+0x2ec>)
 8005746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	ec51 0b19 	vmov	r0, r1, d9
 8005752:	f7fb f9d3 	bl	8000afc <__aeabi_dcmplt>
 8005756:	2800      	cmp	r0, #0
 8005758:	d050      	beq.n	80057fc <_dtoa_r+0x244>
 800575a:	9b00      	ldr	r3, [sp, #0]
 800575c:	3b01      	subs	r3, #1
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	2300      	movs	r3, #0
 8005762:	930b      	str	r3, [sp, #44]	; 0x2c
 8005764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005766:	1b5d      	subs	r5, r3, r5
 8005768:	1e6b      	subs	r3, r5, #1
 800576a:	9305      	str	r3, [sp, #20]
 800576c:	bf45      	ittet	mi
 800576e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005772:	9304      	strmi	r3, [sp, #16]
 8005774:	2300      	movpl	r3, #0
 8005776:	2300      	movmi	r3, #0
 8005778:	bf4c      	ite	mi
 800577a:	9305      	strmi	r3, [sp, #20]
 800577c:	9304      	strpl	r3, [sp, #16]
 800577e:	9b00      	ldr	r3, [sp, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	db3d      	blt.n	8005800 <_dtoa_r+0x248>
 8005784:	9b05      	ldr	r3, [sp, #20]
 8005786:	9a00      	ldr	r2, [sp, #0]
 8005788:	920a      	str	r2, [sp, #40]	; 0x28
 800578a:	4413      	add	r3, r2
 800578c:	9305      	str	r3, [sp, #20]
 800578e:	2300      	movs	r3, #0
 8005790:	9307      	str	r3, [sp, #28]
 8005792:	9b06      	ldr	r3, [sp, #24]
 8005794:	2b09      	cmp	r3, #9
 8005796:	f200 8089 	bhi.w	80058ac <_dtoa_r+0x2f4>
 800579a:	2b05      	cmp	r3, #5
 800579c:	bfc4      	itt	gt
 800579e:	3b04      	subgt	r3, #4
 80057a0:	9306      	strgt	r3, [sp, #24]
 80057a2:	9b06      	ldr	r3, [sp, #24]
 80057a4:	f1a3 0302 	sub.w	r3, r3, #2
 80057a8:	bfcc      	ite	gt
 80057aa:	2500      	movgt	r5, #0
 80057ac:	2501      	movle	r5, #1
 80057ae:	2b03      	cmp	r3, #3
 80057b0:	f200 8087 	bhi.w	80058c2 <_dtoa_r+0x30a>
 80057b4:	e8df f003 	tbb	[pc, r3]
 80057b8:	59383a2d 	.word	0x59383a2d
 80057bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80057c0:	441d      	add	r5, r3
 80057c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80057c6:	2b20      	cmp	r3, #32
 80057c8:	bfc1      	itttt	gt
 80057ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80057ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80057d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80057d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80057da:	bfda      	itte	le
 80057dc:	f1c3 0320 	rsble	r3, r3, #32
 80057e0:	fa06 f003 	lslle.w	r0, r6, r3
 80057e4:	4318      	orrgt	r0, r3
 80057e6:	f7fa fe9d 	bl	8000524 <__aeabi_ui2d>
 80057ea:	2301      	movs	r3, #1
 80057ec:	4606      	mov	r6, r0
 80057ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80057f2:	3d01      	subs	r5, #1
 80057f4:	930e      	str	r3, [sp, #56]	; 0x38
 80057f6:	e76a      	b.n	80056ce <_dtoa_r+0x116>
 80057f8:	2301      	movs	r3, #1
 80057fa:	e7b2      	b.n	8005762 <_dtoa_r+0x1aa>
 80057fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80057fe:	e7b1      	b.n	8005764 <_dtoa_r+0x1ac>
 8005800:	9b04      	ldr	r3, [sp, #16]
 8005802:	9a00      	ldr	r2, [sp, #0]
 8005804:	1a9b      	subs	r3, r3, r2
 8005806:	9304      	str	r3, [sp, #16]
 8005808:	4253      	negs	r3, r2
 800580a:	9307      	str	r3, [sp, #28]
 800580c:	2300      	movs	r3, #0
 800580e:	930a      	str	r3, [sp, #40]	; 0x28
 8005810:	e7bf      	b.n	8005792 <_dtoa_r+0x1da>
 8005812:	2300      	movs	r3, #0
 8005814:	9308      	str	r3, [sp, #32]
 8005816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005818:	2b00      	cmp	r3, #0
 800581a:	dc55      	bgt.n	80058c8 <_dtoa_r+0x310>
 800581c:	2301      	movs	r3, #1
 800581e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005822:	461a      	mov	r2, r3
 8005824:	9209      	str	r2, [sp, #36]	; 0x24
 8005826:	e00c      	b.n	8005842 <_dtoa_r+0x28a>
 8005828:	2301      	movs	r3, #1
 800582a:	e7f3      	b.n	8005814 <_dtoa_r+0x25c>
 800582c:	2300      	movs	r3, #0
 800582e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005830:	9308      	str	r3, [sp, #32]
 8005832:	9b00      	ldr	r3, [sp, #0]
 8005834:	4413      	add	r3, r2
 8005836:	9302      	str	r3, [sp, #8]
 8005838:	3301      	adds	r3, #1
 800583a:	2b01      	cmp	r3, #1
 800583c:	9303      	str	r3, [sp, #12]
 800583e:	bfb8      	it	lt
 8005840:	2301      	movlt	r3, #1
 8005842:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005844:	2200      	movs	r2, #0
 8005846:	6042      	str	r2, [r0, #4]
 8005848:	2204      	movs	r2, #4
 800584a:	f102 0614 	add.w	r6, r2, #20
 800584e:	429e      	cmp	r6, r3
 8005850:	6841      	ldr	r1, [r0, #4]
 8005852:	d93d      	bls.n	80058d0 <_dtoa_r+0x318>
 8005854:	4620      	mov	r0, r4
 8005856:	f000 fca9 	bl	80061ac <_Balloc>
 800585a:	9001      	str	r0, [sp, #4]
 800585c:	2800      	cmp	r0, #0
 800585e:	d13b      	bne.n	80058d8 <_dtoa_r+0x320>
 8005860:	4b11      	ldr	r3, [pc, #68]	; (80058a8 <_dtoa_r+0x2f0>)
 8005862:	4602      	mov	r2, r0
 8005864:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005868:	e6c0      	b.n	80055ec <_dtoa_r+0x34>
 800586a:	2301      	movs	r3, #1
 800586c:	e7df      	b.n	800582e <_dtoa_r+0x276>
 800586e:	bf00      	nop
 8005870:	636f4361 	.word	0x636f4361
 8005874:	3fd287a7 	.word	0x3fd287a7
 8005878:	8b60c8b3 	.word	0x8b60c8b3
 800587c:	3fc68a28 	.word	0x3fc68a28
 8005880:	509f79fb 	.word	0x509f79fb
 8005884:	3fd34413 	.word	0x3fd34413
 8005888:	08007bdd 	.word	0x08007bdd
 800588c:	08007bf4 	.word	0x08007bf4
 8005890:	7ff00000 	.word	0x7ff00000
 8005894:	08007bd9 	.word	0x08007bd9
 8005898:	08007bd0 	.word	0x08007bd0
 800589c:	08007bad 	.word	0x08007bad
 80058a0:	3ff80000 	.word	0x3ff80000
 80058a4:	08007ce8 	.word	0x08007ce8
 80058a8:	08007c4f 	.word	0x08007c4f
 80058ac:	2501      	movs	r5, #1
 80058ae:	2300      	movs	r3, #0
 80058b0:	9306      	str	r3, [sp, #24]
 80058b2:	9508      	str	r5, [sp, #32]
 80058b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80058bc:	2200      	movs	r2, #0
 80058be:	2312      	movs	r3, #18
 80058c0:	e7b0      	b.n	8005824 <_dtoa_r+0x26c>
 80058c2:	2301      	movs	r3, #1
 80058c4:	9308      	str	r3, [sp, #32]
 80058c6:	e7f5      	b.n	80058b4 <_dtoa_r+0x2fc>
 80058c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80058ce:	e7b8      	b.n	8005842 <_dtoa_r+0x28a>
 80058d0:	3101      	adds	r1, #1
 80058d2:	6041      	str	r1, [r0, #4]
 80058d4:	0052      	lsls	r2, r2, #1
 80058d6:	e7b8      	b.n	800584a <_dtoa_r+0x292>
 80058d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058da:	9a01      	ldr	r2, [sp, #4]
 80058dc:	601a      	str	r2, [r3, #0]
 80058de:	9b03      	ldr	r3, [sp, #12]
 80058e0:	2b0e      	cmp	r3, #14
 80058e2:	f200 809d 	bhi.w	8005a20 <_dtoa_r+0x468>
 80058e6:	2d00      	cmp	r5, #0
 80058e8:	f000 809a 	beq.w	8005a20 <_dtoa_r+0x468>
 80058ec:	9b00      	ldr	r3, [sp, #0]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dd32      	ble.n	8005958 <_dtoa_r+0x3a0>
 80058f2:	4ab7      	ldr	r2, [pc, #732]	; (8005bd0 <_dtoa_r+0x618>)
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80058fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005900:	9b00      	ldr	r3, [sp, #0]
 8005902:	05d8      	lsls	r0, r3, #23
 8005904:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005908:	d516      	bpl.n	8005938 <_dtoa_r+0x380>
 800590a:	4bb2      	ldr	r3, [pc, #712]	; (8005bd4 <_dtoa_r+0x61c>)
 800590c:	ec51 0b19 	vmov	r0, r1, d9
 8005910:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005914:	f7fa ffaa 	bl	800086c <__aeabi_ddiv>
 8005918:	f007 070f 	and.w	r7, r7, #15
 800591c:	4682      	mov	sl, r0
 800591e:	468b      	mov	fp, r1
 8005920:	2503      	movs	r5, #3
 8005922:	4eac      	ldr	r6, [pc, #688]	; (8005bd4 <_dtoa_r+0x61c>)
 8005924:	b957      	cbnz	r7, 800593c <_dtoa_r+0x384>
 8005926:	4642      	mov	r2, r8
 8005928:	464b      	mov	r3, r9
 800592a:	4650      	mov	r0, sl
 800592c:	4659      	mov	r1, fp
 800592e:	f7fa ff9d 	bl	800086c <__aeabi_ddiv>
 8005932:	4682      	mov	sl, r0
 8005934:	468b      	mov	fp, r1
 8005936:	e028      	b.n	800598a <_dtoa_r+0x3d2>
 8005938:	2502      	movs	r5, #2
 800593a:	e7f2      	b.n	8005922 <_dtoa_r+0x36a>
 800593c:	07f9      	lsls	r1, r7, #31
 800593e:	d508      	bpl.n	8005952 <_dtoa_r+0x39a>
 8005940:	4640      	mov	r0, r8
 8005942:	4649      	mov	r1, r9
 8005944:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005948:	f7fa fe66 	bl	8000618 <__aeabi_dmul>
 800594c:	3501      	adds	r5, #1
 800594e:	4680      	mov	r8, r0
 8005950:	4689      	mov	r9, r1
 8005952:	107f      	asrs	r7, r7, #1
 8005954:	3608      	adds	r6, #8
 8005956:	e7e5      	b.n	8005924 <_dtoa_r+0x36c>
 8005958:	f000 809b 	beq.w	8005a92 <_dtoa_r+0x4da>
 800595c:	9b00      	ldr	r3, [sp, #0]
 800595e:	4f9d      	ldr	r7, [pc, #628]	; (8005bd4 <_dtoa_r+0x61c>)
 8005960:	425e      	negs	r6, r3
 8005962:	4b9b      	ldr	r3, [pc, #620]	; (8005bd0 <_dtoa_r+0x618>)
 8005964:	f006 020f 	and.w	r2, r6, #15
 8005968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800596c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005970:	ec51 0b19 	vmov	r0, r1, d9
 8005974:	f7fa fe50 	bl	8000618 <__aeabi_dmul>
 8005978:	1136      	asrs	r6, r6, #4
 800597a:	4682      	mov	sl, r0
 800597c:	468b      	mov	fp, r1
 800597e:	2300      	movs	r3, #0
 8005980:	2502      	movs	r5, #2
 8005982:	2e00      	cmp	r6, #0
 8005984:	d17a      	bne.n	8005a7c <_dtoa_r+0x4c4>
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1d3      	bne.n	8005932 <_dtoa_r+0x37a>
 800598a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800598c:	2b00      	cmp	r3, #0
 800598e:	f000 8082 	beq.w	8005a96 <_dtoa_r+0x4de>
 8005992:	4b91      	ldr	r3, [pc, #580]	; (8005bd8 <_dtoa_r+0x620>)
 8005994:	2200      	movs	r2, #0
 8005996:	4650      	mov	r0, sl
 8005998:	4659      	mov	r1, fp
 800599a:	f7fb f8af 	bl	8000afc <__aeabi_dcmplt>
 800599e:	2800      	cmp	r0, #0
 80059a0:	d079      	beq.n	8005a96 <_dtoa_r+0x4de>
 80059a2:	9b03      	ldr	r3, [sp, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d076      	beq.n	8005a96 <_dtoa_r+0x4de>
 80059a8:	9b02      	ldr	r3, [sp, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	dd36      	ble.n	8005a1c <_dtoa_r+0x464>
 80059ae:	9b00      	ldr	r3, [sp, #0]
 80059b0:	4650      	mov	r0, sl
 80059b2:	4659      	mov	r1, fp
 80059b4:	1e5f      	subs	r7, r3, #1
 80059b6:	2200      	movs	r2, #0
 80059b8:	4b88      	ldr	r3, [pc, #544]	; (8005bdc <_dtoa_r+0x624>)
 80059ba:	f7fa fe2d 	bl	8000618 <__aeabi_dmul>
 80059be:	9e02      	ldr	r6, [sp, #8]
 80059c0:	4682      	mov	sl, r0
 80059c2:	468b      	mov	fp, r1
 80059c4:	3501      	adds	r5, #1
 80059c6:	4628      	mov	r0, r5
 80059c8:	f7fa fdbc 	bl	8000544 <__aeabi_i2d>
 80059cc:	4652      	mov	r2, sl
 80059ce:	465b      	mov	r3, fp
 80059d0:	f7fa fe22 	bl	8000618 <__aeabi_dmul>
 80059d4:	4b82      	ldr	r3, [pc, #520]	; (8005be0 <_dtoa_r+0x628>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	f7fa fc68 	bl	80002ac <__adddf3>
 80059dc:	46d0      	mov	r8, sl
 80059de:	46d9      	mov	r9, fp
 80059e0:	4682      	mov	sl, r0
 80059e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80059e6:	2e00      	cmp	r6, #0
 80059e8:	d158      	bne.n	8005a9c <_dtoa_r+0x4e4>
 80059ea:	4b7e      	ldr	r3, [pc, #504]	; (8005be4 <_dtoa_r+0x62c>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	4640      	mov	r0, r8
 80059f0:	4649      	mov	r1, r9
 80059f2:	f7fa fc59 	bl	80002a8 <__aeabi_dsub>
 80059f6:	4652      	mov	r2, sl
 80059f8:	465b      	mov	r3, fp
 80059fa:	4680      	mov	r8, r0
 80059fc:	4689      	mov	r9, r1
 80059fe:	f7fb f89b 	bl	8000b38 <__aeabi_dcmpgt>
 8005a02:	2800      	cmp	r0, #0
 8005a04:	f040 8295 	bne.w	8005f32 <_dtoa_r+0x97a>
 8005a08:	4652      	mov	r2, sl
 8005a0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005a0e:	4640      	mov	r0, r8
 8005a10:	4649      	mov	r1, r9
 8005a12:	f7fb f873 	bl	8000afc <__aeabi_dcmplt>
 8005a16:	2800      	cmp	r0, #0
 8005a18:	f040 8289 	bne.w	8005f2e <_dtoa_r+0x976>
 8005a1c:	ec5b ab19 	vmov	sl, fp, d9
 8005a20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f2c0 8148 	blt.w	8005cb8 <_dtoa_r+0x700>
 8005a28:	9a00      	ldr	r2, [sp, #0]
 8005a2a:	2a0e      	cmp	r2, #14
 8005a2c:	f300 8144 	bgt.w	8005cb8 <_dtoa_r+0x700>
 8005a30:	4b67      	ldr	r3, [pc, #412]	; (8005bd0 <_dtoa_r+0x618>)
 8005a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f280 80d5 	bge.w	8005bec <_dtoa_r+0x634>
 8005a42:	9b03      	ldr	r3, [sp, #12]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f300 80d1 	bgt.w	8005bec <_dtoa_r+0x634>
 8005a4a:	f040 826f 	bne.w	8005f2c <_dtoa_r+0x974>
 8005a4e:	4b65      	ldr	r3, [pc, #404]	; (8005be4 <_dtoa_r+0x62c>)
 8005a50:	2200      	movs	r2, #0
 8005a52:	4640      	mov	r0, r8
 8005a54:	4649      	mov	r1, r9
 8005a56:	f7fa fddf 	bl	8000618 <__aeabi_dmul>
 8005a5a:	4652      	mov	r2, sl
 8005a5c:	465b      	mov	r3, fp
 8005a5e:	f7fb f861 	bl	8000b24 <__aeabi_dcmpge>
 8005a62:	9e03      	ldr	r6, [sp, #12]
 8005a64:	4637      	mov	r7, r6
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f040 8245 	bne.w	8005ef6 <_dtoa_r+0x93e>
 8005a6c:	9d01      	ldr	r5, [sp, #4]
 8005a6e:	2331      	movs	r3, #49	; 0x31
 8005a70:	f805 3b01 	strb.w	r3, [r5], #1
 8005a74:	9b00      	ldr	r3, [sp, #0]
 8005a76:	3301      	adds	r3, #1
 8005a78:	9300      	str	r3, [sp, #0]
 8005a7a:	e240      	b.n	8005efe <_dtoa_r+0x946>
 8005a7c:	07f2      	lsls	r2, r6, #31
 8005a7e:	d505      	bpl.n	8005a8c <_dtoa_r+0x4d4>
 8005a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a84:	f7fa fdc8 	bl	8000618 <__aeabi_dmul>
 8005a88:	3501      	adds	r5, #1
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	1076      	asrs	r6, r6, #1
 8005a8e:	3708      	adds	r7, #8
 8005a90:	e777      	b.n	8005982 <_dtoa_r+0x3ca>
 8005a92:	2502      	movs	r5, #2
 8005a94:	e779      	b.n	800598a <_dtoa_r+0x3d2>
 8005a96:	9f00      	ldr	r7, [sp, #0]
 8005a98:	9e03      	ldr	r6, [sp, #12]
 8005a9a:	e794      	b.n	80059c6 <_dtoa_r+0x40e>
 8005a9c:	9901      	ldr	r1, [sp, #4]
 8005a9e:	4b4c      	ldr	r3, [pc, #304]	; (8005bd0 <_dtoa_r+0x618>)
 8005aa0:	4431      	add	r1, r6
 8005aa2:	910d      	str	r1, [sp, #52]	; 0x34
 8005aa4:	9908      	ldr	r1, [sp, #32]
 8005aa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005aaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005aae:	2900      	cmp	r1, #0
 8005ab0:	d043      	beq.n	8005b3a <_dtoa_r+0x582>
 8005ab2:	494d      	ldr	r1, [pc, #308]	; (8005be8 <_dtoa_r+0x630>)
 8005ab4:	2000      	movs	r0, #0
 8005ab6:	f7fa fed9 	bl	800086c <__aeabi_ddiv>
 8005aba:	4652      	mov	r2, sl
 8005abc:	465b      	mov	r3, fp
 8005abe:	f7fa fbf3 	bl	80002a8 <__aeabi_dsub>
 8005ac2:	9d01      	ldr	r5, [sp, #4]
 8005ac4:	4682      	mov	sl, r0
 8005ac6:	468b      	mov	fp, r1
 8005ac8:	4649      	mov	r1, r9
 8005aca:	4640      	mov	r0, r8
 8005acc:	f7fb f854 	bl	8000b78 <__aeabi_d2iz>
 8005ad0:	4606      	mov	r6, r0
 8005ad2:	f7fa fd37 	bl	8000544 <__aeabi_i2d>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4640      	mov	r0, r8
 8005adc:	4649      	mov	r1, r9
 8005ade:	f7fa fbe3 	bl	80002a8 <__aeabi_dsub>
 8005ae2:	3630      	adds	r6, #48	; 0x30
 8005ae4:	f805 6b01 	strb.w	r6, [r5], #1
 8005ae8:	4652      	mov	r2, sl
 8005aea:	465b      	mov	r3, fp
 8005aec:	4680      	mov	r8, r0
 8005aee:	4689      	mov	r9, r1
 8005af0:	f7fb f804 	bl	8000afc <__aeabi_dcmplt>
 8005af4:	2800      	cmp	r0, #0
 8005af6:	d163      	bne.n	8005bc0 <_dtoa_r+0x608>
 8005af8:	4642      	mov	r2, r8
 8005afa:	464b      	mov	r3, r9
 8005afc:	4936      	ldr	r1, [pc, #216]	; (8005bd8 <_dtoa_r+0x620>)
 8005afe:	2000      	movs	r0, #0
 8005b00:	f7fa fbd2 	bl	80002a8 <__aeabi_dsub>
 8005b04:	4652      	mov	r2, sl
 8005b06:	465b      	mov	r3, fp
 8005b08:	f7fa fff8 	bl	8000afc <__aeabi_dcmplt>
 8005b0c:	2800      	cmp	r0, #0
 8005b0e:	f040 80b5 	bne.w	8005c7c <_dtoa_r+0x6c4>
 8005b12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b14:	429d      	cmp	r5, r3
 8005b16:	d081      	beq.n	8005a1c <_dtoa_r+0x464>
 8005b18:	4b30      	ldr	r3, [pc, #192]	; (8005bdc <_dtoa_r+0x624>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	4650      	mov	r0, sl
 8005b1e:	4659      	mov	r1, fp
 8005b20:	f7fa fd7a 	bl	8000618 <__aeabi_dmul>
 8005b24:	4b2d      	ldr	r3, [pc, #180]	; (8005bdc <_dtoa_r+0x624>)
 8005b26:	4682      	mov	sl, r0
 8005b28:	468b      	mov	fp, r1
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	4649      	mov	r1, r9
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f7fa fd72 	bl	8000618 <__aeabi_dmul>
 8005b34:	4680      	mov	r8, r0
 8005b36:	4689      	mov	r9, r1
 8005b38:	e7c6      	b.n	8005ac8 <_dtoa_r+0x510>
 8005b3a:	4650      	mov	r0, sl
 8005b3c:	4659      	mov	r1, fp
 8005b3e:	f7fa fd6b 	bl	8000618 <__aeabi_dmul>
 8005b42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b44:	9d01      	ldr	r5, [sp, #4]
 8005b46:	930f      	str	r3, [sp, #60]	; 0x3c
 8005b48:	4682      	mov	sl, r0
 8005b4a:	468b      	mov	fp, r1
 8005b4c:	4649      	mov	r1, r9
 8005b4e:	4640      	mov	r0, r8
 8005b50:	f7fb f812 	bl	8000b78 <__aeabi_d2iz>
 8005b54:	4606      	mov	r6, r0
 8005b56:	f7fa fcf5 	bl	8000544 <__aeabi_i2d>
 8005b5a:	3630      	adds	r6, #48	; 0x30
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4640      	mov	r0, r8
 8005b62:	4649      	mov	r1, r9
 8005b64:	f7fa fba0 	bl	80002a8 <__aeabi_dsub>
 8005b68:	f805 6b01 	strb.w	r6, [r5], #1
 8005b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b6e:	429d      	cmp	r5, r3
 8005b70:	4680      	mov	r8, r0
 8005b72:	4689      	mov	r9, r1
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	d124      	bne.n	8005bc4 <_dtoa_r+0x60c>
 8005b7a:	4b1b      	ldr	r3, [pc, #108]	; (8005be8 <_dtoa_r+0x630>)
 8005b7c:	4650      	mov	r0, sl
 8005b7e:	4659      	mov	r1, fp
 8005b80:	f7fa fb94 	bl	80002ac <__adddf3>
 8005b84:	4602      	mov	r2, r0
 8005b86:	460b      	mov	r3, r1
 8005b88:	4640      	mov	r0, r8
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	f7fa ffd4 	bl	8000b38 <__aeabi_dcmpgt>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d173      	bne.n	8005c7c <_dtoa_r+0x6c4>
 8005b94:	4652      	mov	r2, sl
 8005b96:	465b      	mov	r3, fp
 8005b98:	4913      	ldr	r1, [pc, #76]	; (8005be8 <_dtoa_r+0x630>)
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	f7fa fb84 	bl	80002a8 <__aeabi_dsub>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	4640      	mov	r0, r8
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	f7fa ffa8 	bl	8000afc <__aeabi_dcmplt>
 8005bac:	2800      	cmp	r0, #0
 8005bae:	f43f af35 	beq.w	8005a1c <_dtoa_r+0x464>
 8005bb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005bb4:	1e6b      	subs	r3, r5, #1
 8005bb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005bb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005bbc:	2b30      	cmp	r3, #48	; 0x30
 8005bbe:	d0f8      	beq.n	8005bb2 <_dtoa_r+0x5fa>
 8005bc0:	9700      	str	r7, [sp, #0]
 8005bc2:	e049      	b.n	8005c58 <_dtoa_r+0x6a0>
 8005bc4:	4b05      	ldr	r3, [pc, #20]	; (8005bdc <_dtoa_r+0x624>)
 8005bc6:	f7fa fd27 	bl	8000618 <__aeabi_dmul>
 8005bca:	4680      	mov	r8, r0
 8005bcc:	4689      	mov	r9, r1
 8005bce:	e7bd      	b.n	8005b4c <_dtoa_r+0x594>
 8005bd0:	08007ce8 	.word	0x08007ce8
 8005bd4:	08007cc0 	.word	0x08007cc0
 8005bd8:	3ff00000 	.word	0x3ff00000
 8005bdc:	40240000 	.word	0x40240000
 8005be0:	401c0000 	.word	0x401c0000
 8005be4:	40140000 	.word	0x40140000
 8005be8:	3fe00000 	.word	0x3fe00000
 8005bec:	9d01      	ldr	r5, [sp, #4]
 8005bee:	4656      	mov	r6, sl
 8005bf0:	465f      	mov	r7, fp
 8005bf2:	4642      	mov	r2, r8
 8005bf4:	464b      	mov	r3, r9
 8005bf6:	4630      	mov	r0, r6
 8005bf8:	4639      	mov	r1, r7
 8005bfa:	f7fa fe37 	bl	800086c <__aeabi_ddiv>
 8005bfe:	f7fa ffbb 	bl	8000b78 <__aeabi_d2iz>
 8005c02:	4682      	mov	sl, r0
 8005c04:	f7fa fc9e 	bl	8000544 <__aeabi_i2d>
 8005c08:	4642      	mov	r2, r8
 8005c0a:	464b      	mov	r3, r9
 8005c0c:	f7fa fd04 	bl	8000618 <__aeabi_dmul>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4630      	mov	r0, r6
 8005c16:	4639      	mov	r1, r7
 8005c18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005c1c:	f7fa fb44 	bl	80002a8 <__aeabi_dsub>
 8005c20:	f805 6b01 	strb.w	r6, [r5], #1
 8005c24:	9e01      	ldr	r6, [sp, #4]
 8005c26:	9f03      	ldr	r7, [sp, #12]
 8005c28:	1bae      	subs	r6, r5, r6
 8005c2a:	42b7      	cmp	r7, r6
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	d135      	bne.n	8005c9e <_dtoa_r+0x6e6>
 8005c32:	f7fa fb3b 	bl	80002ac <__adddf3>
 8005c36:	4642      	mov	r2, r8
 8005c38:	464b      	mov	r3, r9
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	460f      	mov	r7, r1
 8005c3e:	f7fa ff7b 	bl	8000b38 <__aeabi_dcmpgt>
 8005c42:	b9d0      	cbnz	r0, 8005c7a <_dtoa_r+0x6c2>
 8005c44:	4642      	mov	r2, r8
 8005c46:	464b      	mov	r3, r9
 8005c48:	4630      	mov	r0, r6
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	f7fa ff4c 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c50:	b110      	cbz	r0, 8005c58 <_dtoa_r+0x6a0>
 8005c52:	f01a 0f01 	tst.w	sl, #1
 8005c56:	d110      	bne.n	8005c7a <_dtoa_r+0x6c2>
 8005c58:	4620      	mov	r0, r4
 8005c5a:	ee18 1a10 	vmov	r1, s16
 8005c5e:	f000 fae5 	bl	800622c <_Bfree>
 8005c62:	2300      	movs	r3, #0
 8005c64:	9800      	ldr	r0, [sp, #0]
 8005c66:	702b      	strb	r3, [r5, #0]
 8005c68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005c6a:	3001      	adds	r0, #1
 8005c6c:	6018      	str	r0, [r3, #0]
 8005c6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f43f acf1 	beq.w	8005658 <_dtoa_r+0xa0>
 8005c76:	601d      	str	r5, [r3, #0]
 8005c78:	e4ee      	b.n	8005658 <_dtoa_r+0xa0>
 8005c7a:	9f00      	ldr	r7, [sp, #0]
 8005c7c:	462b      	mov	r3, r5
 8005c7e:	461d      	mov	r5, r3
 8005c80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005c84:	2a39      	cmp	r2, #57	; 0x39
 8005c86:	d106      	bne.n	8005c96 <_dtoa_r+0x6de>
 8005c88:	9a01      	ldr	r2, [sp, #4]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d1f7      	bne.n	8005c7e <_dtoa_r+0x6c6>
 8005c8e:	9901      	ldr	r1, [sp, #4]
 8005c90:	2230      	movs	r2, #48	; 0x30
 8005c92:	3701      	adds	r7, #1
 8005c94:	700a      	strb	r2, [r1, #0]
 8005c96:	781a      	ldrb	r2, [r3, #0]
 8005c98:	3201      	adds	r2, #1
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	e790      	b.n	8005bc0 <_dtoa_r+0x608>
 8005c9e:	4ba6      	ldr	r3, [pc, #664]	; (8005f38 <_dtoa_r+0x980>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f7fa fcb9 	bl	8000618 <__aeabi_dmul>
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2300      	movs	r3, #0
 8005caa:	4606      	mov	r6, r0
 8005cac:	460f      	mov	r7, r1
 8005cae:	f7fa ff1b 	bl	8000ae8 <__aeabi_dcmpeq>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d09d      	beq.n	8005bf2 <_dtoa_r+0x63a>
 8005cb6:	e7cf      	b.n	8005c58 <_dtoa_r+0x6a0>
 8005cb8:	9a08      	ldr	r2, [sp, #32]
 8005cba:	2a00      	cmp	r2, #0
 8005cbc:	f000 80d7 	beq.w	8005e6e <_dtoa_r+0x8b6>
 8005cc0:	9a06      	ldr	r2, [sp, #24]
 8005cc2:	2a01      	cmp	r2, #1
 8005cc4:	f300 80ba 	bgt.w	8005e3c <_dtoa_r+0x884>
 8005cc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005cca:	2a00      	cmp	r2, #0
 8005ccc:	f000 80b2 	beq.w	8005e34 <_dtoa_r+0x87c>
 8005cd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005cd4:	9e07      	ldr	r6, [sp, #28]
 8005cd6:	9d04      	ldr	r5, [sp, #16]
 8005cd8:	9a04      	ldr	r2, [sp, #16]
 8005cda:	441a      	add	r2, r3
 8005cdc:	9204      	str	r2, [sp, #16]
 8005cde:	9a05      	ldr	r2, [sp, #20]
 8005ce0:	2101      	movs	r1, #1
 8005ce2:	441a      	add	r2, r3
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	9205      	str	r2, [sp, #20]
 8005ce8:	f000 fb58 	bl	800639c <__i2b>
 8005cec:	4607      	mov	r7, r0
 8005cee:	2d00      	cmp	r5, #0
 8005cf0:	dd0c      	ble.n	8005d0c <_dtoa_r+0x754>
 8005cf2:	9b05      	ldr	r3, [sp, #20]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	dd09      	ble.n	8005d0c <_dtoa_r+0x754>
 8005cf8:	42ab      	cmp	r3, r5
 8005cfa:	9a04      	ldr	r2, [sp, #16]
 8005cfc:	bfa8      	it	ge
 8005cfe:	462b      	movge	r3, r5
 8005d00:	1ad2      	subs	r2, r2, r3
 8005d02:	9204      	str	r2, [sp, #16]
 8005d04:	9a05      	ldr	r2, [sp, #20]
 8005d06:	1aed      	subs	r5, r5, r3
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	9305      	str	r3, [sp, #20]
 8005d0c:	9b07      	ldr	r3, [sp, #28]
 8005d0e:	b31b      	cbz	r3, 8005d58 <_dtoa_r+0x7a0>
 8005d10:	9b08      	ldr	r3, [sp, #32]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f000 80af 	beq.w	8005e76 <_dtoa_r+0x8be>
 8005d18:	2e00      	cmp	r6, #0
 8005d1a:	dd13      	ble.n	8005d44 <_dtoa_r+0x78c>
 8005d1c:	4639      	mov	r1, r7
 8005d1e:	4632      	mov	r2, r6
 8005d20:	4620      	mov	r0, r4
 8005d22:	f000 fbfb 	bl	800651c <__pow5mult>
 8005d26:	ee18 2a10 	vmov	r2, s16
 8005d2a:	4601      	mov	r1, r0
 8005d2c:	4607      	mov	r7, r0
 8005d2e:	4620      	mov	r0, r4
 8005d30:	f000 fb4a 	bl	80063c8 <__multiply>
 8005d34:	ee18 1a10 	vmov	r1, s16
 8005d38:	4680      	mov	r8, r0
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	f000 fa76 	bl	800622c <_Bfree>
 8005d40:	ee08 8a10 	vmov	s16, r8
 8005d44:	9b07      	ldr	r3, [sp, #28]
 8005d46:	1b9a      	subs	r2, r3, r6
 8005d48:	d006      	beq.n	8005d58 <_dtoa_r+0x7a0>
 8005d4a:	ee18 1a10 	vmov	r1, s16
 8005d4e:	4620      	mov	r0, r4
 8005d50:	f000 fbe4 	bl	800651c <__pow5mult>
 8005d54:	ee08 0a10 	vmov	s16, r0
 8005d58:	2101      	movs	r1, #1
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	f000 fb1e 	bl	800639c <__i2b>
 8005d60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	4606      	mov	r6, r0
 8005d66:	f340 8088 	ble.w	8005e7a <_dtoa_r+0x8c2>
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	4601      	mov	r1, r0
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 fbd4 	bl	800651c <__pow5mult>
 8005d74:	9b06      	ldr	r3, [sp, #24]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	4606      	mov	r6, r0
 8005d7a:	f340 8081 	ble.w	8005e80 <_dtoa_r+0x8c8>
 8005d7e:	f04f 0800 	mov.w	r8, #0
 8005d82:	6933      	ldr	r3, [r6, #16]
 8005d84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005d88:	6918      	ldr	r0, [r3, #16]
 8005d8a:	f000 fab7 	bl	80062fc <__hi0bits>
 8005d8e:	f1c0 0020 	rsb	r0, r0, #32
 8005d92:	9b05      	ldr	r3, [sp, #20]
 8005d94:	4418      	add	r0, r3
 8005d96:	f010 001f 	ands.w	r0, r0, #31
 8005d9a:	f000 8092 	beq.w	8005ec2 <_dtoa_r+0x90a>
 8005d9e:	f1c0 0320 	rsb	r3, r0, #32
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	f340 808a 	ble.w	8005ebc <_dtoa_r+0x904>
 8005da8:	f1c0 001c 	rsb	r0, r0, #28
 8005dac:	9b04      	ldr	r3, [sp, #16]
 8005dae:	4403      	add	r3, r0
 8005db0:	9304      	str	r3, [sp, #16]
 8005db2:	9b05      	ldr	r3, [sp, #20]
 8005db4:	4403      	add	r3, r0
 8005db6:	4405      	add	r5, r0
 8005db8:	9305      	str	r3, [sp, #20]
 8005dba:	9b04      	ldr	r3, [sp, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dd07      	ble.n	8005dd0 <_dtoa_r+0x818>
 8005dc0:	ee18 1a10 	vmov	r1, s16
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 fc02 	bl	80065d0 <__lshift>
 8005dcc:	ee08 0a10 	vmov	s16, r0
 8005dd0:	9b05      	ldr	r3, [sp, #20]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	dd05      	ble.n	8005de2 <_dtoa_r+0x82a>
 8005dd6:	4631      	mov	r1, r6
 8005dd8:	461a      	mov	r2, r3
 8005dda:	4620      	mov	r0, r4
 8005ddc:	f000 fbf8 	bl	80065d0 <__lshift>
 8005de0:	4606      	mov	r6, r0
 8005de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d06e      	beq.n	8005ec6 <_dtoa_r+0x90e>
 8005de8:	ee18 0a10 	vmov	r0, s16
 8005dec:	4631      	mov	r1, r6
 8005dee:	f000 fc5f 	bl	80066b0 <__mcmp>
 8005df2:	2800      	cmp	r0, #0
 8005df4:	da67      	bge.n	8005ec6 <_dtoa_r+0x90e>
 8005df6:	9b00      	ldr	r3, [sp, #0]
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	ee18 1a10 	vmov	r1, s16
 8005dfe:	9300      	str	r3, [sp, #0]
 8005e00:	220a      	movs	r2, #10
 8005e02:	2300      	movs	r3, #0
 8005e04:	4620      	mov	r0, r4
 8005e06:	f000 fa33 	bl	8006270 <__multadd>
 8005e0a:	9b08      	ldr	r3, [sp, #32]
 8005e0c:	ee08 0a10 	vmov	s16, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	f000 81b1 	beq.w	8006178 <_dtoa_r+0xbc0>
 8005e16:	2300      	movs	r3, #0
 8005e18:	4639      	mov	r1, r7
 8005e1a:	220a      	movs	r2, #10
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	f000 fa27 	bl	8006270 <__multadd>
 8005e22:	9b02      	ldr	r3, [sp, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	4607      	mov	r7, r0
 8005e28:	f300 808e 	bgt.w	8005f48 <_dtoa_r+0x990>
 8005e2c:	9b06      	ldr	r3, [sp, #24]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	dc51      	bgt.n	8005ed6 <_dtoa_r+0x91e>
 8005e32:	e089      	b.n	8005f48 <_dtoa_r+0x990>
 8005e34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005e36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005e3a:	e74b      	b.n	8005cd4 <_dtoa_r+0x71c>
 8005e3c:	9b03      	ldr	r3, [sp, #12]
 8005e3e:	1e5e      	subs	r6, r3, #1
 8005e40:	9b07      	ldr	r3, [sp, #28]
 8005e42:	42b3      	cmp	r3, r6
 8005e44:	bfbf      	itttt	lt
 8005e46:	9b07      	ldrlt	r3, [sp, #28]
 8005e48:	9607      	strlt	r6, [sp, #28]
 8005e4a:	1af2      	sublt	r2, r6, r3
 8005e4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005e4e:	bfb6      	itet	lt
 8005e50:	189b      	addlt	r3, r3, r2
 8005e52:	1b9e      	subge	r6, r3, r6
 8005e54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005e56:	9b03      	ldr	r3, [sp, #12]
 8005e58:	bfb8      	it	lt
 8005e5a:	2600      	movlt	r6, #0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	bfb7      	itett	lt
 8005e60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005e64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005e68:	1a9d      	sublt	r5, r3, r2
 8005e6a:	2300      	movlt	r3, #0
 8005e6c:	e734      	b.n	8005cd8 <_dtoa_r+0x720>
 8005e6e:	9e07      	ldr	r6, [sp, #28]
 8005e70:	9d04      	ldr	r5, [sp, #16]
 8005e72:	9f08      	ldr	r7, [sp, #32]
 8005e74:	e73b      	b.n	8005cee <_dtoa_r+0x736>
 8005e76:	9a07      	ldr	r2, [sp, #28]
 8005e78:	e767      	b.n	8005d4a <_dtoa_r+0x792>
 8005e7a:	9b06      	ldr	r3, [sp, #24]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	dc18      	bgt.n	8005eb2 <_dtoa_r+0x8fa>
 8005e80:	f1ba 0f00 	cmp.w	sl, #0
 8005e84:	d115      	bne.n	8005eb2 <_dtoa_r+0x8fa>
 8005e86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005e8a:	b993      	cbnz	r3, 8005eb2 <_dtoa_r+0x8fa>
 8005e8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005e90:	0d1b      	lsrs	r3, r3, #20
 8005e92:	051b      	lsls	r3, r3, #20
 8005e94:	b183      	cbz	r3, 8005eb8 <_dtoa_r+0x900>
 8005e96:	9b04      	ldr	r3, [sp, #16]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	9304      	str	r3, [sp, #16]
 8005e9c:	9b05      	ldr	r3, [sp, #20]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	9305      	str	r3, [sp, #20]
 8005ea2:	f04f 0801 	mov.w	r8, #1
 8005ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f47f af6a 	bne.w	8005d82 <_dtoa_r+0x7ca>
 8005eae:	2001      	movs	r0, #1
 8005eb0:	e76f      	b.n	8005d92 <_dtoa_r+0x7da>
 8005eb2:	f04f 0800 	mov.w	r8, #0
 8005eb6:	e7f6      	b.n	8005ea6 <_dtoa_r+0x8ee>
 8005eb8:	4698      	mov	r8, r3
 8005eba:	e7f4      	b.n	8005ea6 <_dtoa_r+0x8ee>
 8005ebc:	f43f af7d 	beq.w	8005dba <_dtoa_r+0x802>
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	301c      	adds	r0, #28
 8005ec4:	e772      	b.n	8005dac <_dtoa_r+0x7f4>
 8005ec6:	9b03      	ldr	r3, [sp, #12]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	dc37      	bgt.n	8005f3c <_dtoa_r+0x984>
 8005ecc:	9b06      	ldr	r3, [sp, #24]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	dd34      	ble.n	8005f3c <_dtoa_r+0x984>
 8005ed2:	9b03      	ldr	r3, [sp, #12]
 8005ed4:	9302      	str	r3, [sp, #8]
 8005ed6:	9b02      	ldr	r3, [sp, #8]
 8005ed8:	b96b      	cbnz	r3, 8005ef6 <_dtoa_r+0x93e>
 8005eda:	4631      	mov	r1, r6
 8005edc:	2205      	movs	r2, #5
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f000 f9c6 	bl	8006270 <__multadd>
 8005ee4:	4601      	mov	r1, r0
 8005ee6:	4606      	mov	r6, r0
 8005ee8:	ee18 0a10 	vmov	r0, s16
 8005eec:	f000 fbe0 	bl	80066b0 <__mcmp>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	f73f adbb 	bgt.w	8005a6c <_dtoa_r+0x4b4>
 8005ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ef8:	9d01      	ldr	r5, [sp, #4]
 8005efa:	43db      	mvns	r3, r3
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	f04f 0800 	mov.w	r8, #0
 8005f02:	4631      	mov	r1, r6
 8005f04:	4620      	mov	r0, r4
 8005f06:	f000 f991 	bl	800622c <_Bfree>
 8005f0a:	2f00      	cmp	r7, #0
 8005f0c:	f43f aea4 	beq.w	8005c58 <_dtoa_r+0x6a0>
 8005f10:	f1b8 0f00 	cmp.w	r8, #0
 8005f14:	d005      	beq.n	8005f22 <_dtoa_r+0x96a>
 8005f16:	45b8      	cmp	r8, r7
 8005f18:	d003      	beq.n	8005f22 <_dtoa_r+0x96a>
 8005f1a:	4641      	mov	r1, r8
 8005f1c:	4620      	mov	r0, r4
 8005f1e:	f000 f985 	bl	800622c <_Bfree>
 8005f22:	4639      	mov	r1, r7
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 f981 	bl	800622c <_Bfree>
 8005f2a:	e695      	b.n	8005c58 <_dtoa_r+0x6a0>
 8005f2c:	2600      	movs	r6, #0
 8005f2e:	4637      	mov	r7, r6
 8005f30:	e7e1      	b.n	8005ef6 <_dtoa_r+0x93e>
 8005f32:	9700      	str	r7, [sp, #0]
 8005f34:	4637      	mov	r7, r6
 8005f36:	e599      	b.n	8005a6c <_dtoa_r+0x4b4>
 8005f38:	40240000 	.word	0x40240000
 8005f3c:	9b08      	ldr	r3, [sp, #32]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 80ca 	beq.w	80060d8 <_dtoa_r+0xb20>
 8005f44:	9b03      	ldr	r3, [sp, #12]
 8005f46:	9302      	str	r3, [sp, #8]
 8005f48:	2d00      	cmp	r5, #0
 8005f4a:	dd05      	ble.n	8005f58 <_dtoa_r+0x9a0>
 8005f4c:	4639      	mov	r1, r7
 8005f4e:	462a      	mov	r2, r5
 8005f50:	4620      	mov	r0, r4
 8005f52:	f000 fb3d 	bl	80065d0 <__lshift>
 8005f56:	4607      	mov	r7, r0
 8005f58:	f1b8 0f00 	cmp.w	r8, #0
 8005f5c:	d05b      	beq.n	8006016 <_dtoa_r+0xa5e>
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4620      	mov	r0, r4
 8005f62:	f000 f923 	bl	80061ac <_Balloc>
 8005f66:	4605      	mov	r5, r0
 8005f68:	b928      	cbnz	r0, 8005f76 <_dtoa_r+0x9be>
 8005f6a:	4b87      	ldr	r3, [pc, #540]	; (8006188 <_dtoa_r+0xbd0>)
 8005f6c:	4602      	mov	r2, r0
 8005f6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005f72:	f7ff bb3b 	b.w	80055ec <_dtoa_r+0x34>
 8005f76:	693a      	ldr	r2, [r7, #16]
 8005f78:	3202      	adds	r2, #2
 8005f7a:	0092      	lsls	r2, r2, #2
 8005f7c:	f107 010c 	add.w	r1, r7, #12
 8005f80:	300c      	adds	r0, #12
 8005f82:	f7fe fded 	bl	8004b60 <memcpy>
 8005f86:	2201      	movs	r2, #1
 8005f88:	4629      	mov	r1, r5
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f000 fb20 	bl	80065d0 <__lshift>
 8005f90:	9b01      	ldr	r3, [sp, #4]
 8005f92:	f103 0901 	add.w	r9, r3, #1
 8005f96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	9305      	str	r3, [sp, #20]
 8005f9e:	f00a 0301 	and.w	r3, sl, #1
 8005fa2:	46b8      	mov	r8, r7
 8005fa4:	9304      	str	r3, [sp, #16]
 8005fa6:	4607      	mov	r7, r0
 8005fa8:	4631      	mov	r1, r6
 8005faa:	ee18 0a10 	vmov	r0, s16
 8005fae:	f7ff fa77 	bl	80054a0 <quorem>
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	9002      	str	r0, [sp, #8]
 8005fb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005fba:	ee18 0a10 	vmov	r0, s16
 8005fbe:	f000 fb77 	bl	80066b0 <__mcmp>
 8005fc2:	463a      	mov	r2, r7
 8005fc4:	9003      	str	r0, [sp, #12]
 8005fc6:	4631      	mov	r1, r6
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 fb8d 	bl	80066e8 <__mdiff>
 8005fce:	68c2      	ldr	r2, [r0, #12]
 8005fd0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005fd4:	4605      	mov	r5, r0
 8005fd6:	bb02      	cbnz	r2, 800601a <_dtoa_r+0xa62>
 8005fd8:	4601      	mov	r1, r0
 8005fda:	ee18 0a10 	vmov	r0, s16
 8005fde:	f000 fb67 	bl	80066b0 <__mcmp>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	4629      	mov	r1, r5
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	9207      	str	r2, [sp, #28]
 8005fea:	f000 f91f 	bl	800622c <_Bfree>
 8005fee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005ff2:	ea43 0102 	orr.w	r1, r3, r2
 8005ff6:	9b04      	ldr	r3, [sp, #16]
 8005ff8:	430b      	orrs	r3, r1
 8005ffa:	464d      	mov	r5, r9
 8005ffc:	d10f      	bne.n	800601e <_dtoa_r+0xa66>
 8005ffe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006002:	d02a      	beq.n	800605a <_dtoa_r+0xaa2>
 8006004:	9b03      	ldr	r3, [sp, #12]
 8006006:	2b00      	cmp	r3, #0
 8006008:	dd02      	ble.n	8006010 <_dtoa_r+0xa58>
 800600a:	9b02      	ldr	r3, [sp, #8]
 800600c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006010:	f88b a000 	strb.w	sl, [fp]
 8006014:	e775      	b.n	8005f02 <_dtoa_r+0x94a>
 8006016:	4638      	mov	r0, r7
 8006018:	e7ba      	b.n	8005f90 <_dtoa_r+0x9d8>
 800601a:	2201      	movs	r2, #1
 800601c:	e7e2      	b.n	8005fe4 <_dtoa_r+0xa2c>
 800601e:	9b03      	ldr	r3, [sp, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	db04      	blt.n	800602e <_dtoa_r+0xa76>
 8006024:	9906      	ldr	r1, [sp, #24]
 8006026:	430b      	orrs	r3, r1
 8006028:	9904      	ldr	r1, [sp, #16]
 800602a:	430b      	orrs	r3, r1
 800602c:	d122      	bne.n	8006074 <_dtoa_r+0xabc>
 800602e:	2a00      	cmp	r2, #0
 8006030:	ddee      	ble.n	8006010 <_dtoa_r+0xa58>
 8006032:	ee18 1a10 	vmov	r1, s16
 8006036:	2201      	movs	r2, #1
 8006038:	4620      	mov	r0, r4
 800603a:	f000 fac9 	bl	80065d0 <__lshift>
 800603e:	4631      	mov	r1, r6
 8006040:	ee08 0a10 	vmov	s16, r0
 8006044:	f000 fb34 	bl	80066b0 <__mcmp>
 8006048:	2800      	cmp	r0, #0
 800604a:	dc03      	bgt.n	8006054 <_dtoa_r+0xa9c>
 800604c:	d1e0      	bne.n	8006010 <_dtoa_r+0xa58>
 800604e:	f01a 0f01 	tst.w	sl, #1
 8006052:	d0dd      	beq.n	8006010 <_dtoa_r+0xa58>
 8006054:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006058:	d1d7      	bne.n	800600a <_dtoa_r+0xa52>
 800605a:	2339      	movs	r3, #57	; 0x39
 800605c:	f88b 3000 	strb.w	r3, [fp]
 8006060:	462b      	mov	r3, r5
 8006062:	461d      	mov	r5, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800606a:	2a39      	cmp	r2, #57	; 0x39
 800606c:	d071      	beq.n	8006152 <_dtoa_r+0xb9a>
 800606e:	3201      	adds	r2, #1
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	e746      	b.n	8005f02 <_dtoa_r+0x94a>
 8006074:	2a00      	cmp	r2, #0
 8006076:	dd07      	ble.n	8006088 <_dtoa_r+0xad0>
 8006078:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800607c:	d0ed      	beq.n	800605a <_dtoa_r+0xaa2>
 800607e:	f10a 0301 	add.w	r3, sl, #1
 8006082:	f88b 3000 	strb.w	r3, [fp]
 8006086:	e73c      	b.n	8005f02 <_dtoa_r+0x94a>
 8006088:	9b05      	ldr	r3, [sp, #20]
 800608a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800608e:	4599      	cmp	r9, r3
 8006090:	d047      	beq.n	8006122 <_dtoa_r+0xb6a>
 8006092:	ee18 1a10 	vmov	r1, s16
 8006096:	2300      	movs	r3, #0
 8006098:	220a      	movs	r2, #10
 800609a:	4620      	mov	r0, r4
 800609c:	f000 f8e8 	bl	8006270 <__multadd>
 80060a0:	45b8      	cmp	r8, r7
 80060a2:	ee08 0a10 	vmov	s16, r0
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	f04f 020a 	mov.w	r2, #10
 80060ae:	4641      	mov	r1, r8
 80060b0:	4620      	mov	r0, r4
 80060b2:	d106      	bne.n	80060c2 <_dtoa_r+0xb0a>
 80060b4:	f000 f8dc 	bl	8006270 <__multadd>
 80060b8:	4680      	mov	r8, r0
 80060ba:	4607      	mov	r7, r0
 80060bc:	f109 0901 	add.w	r9, r9, #1
 80060c0:	e772      	b.n	8005fa8 <_dtoa_r+0x9f0>
 80060c2:	f000 f8d5 	bl	8006270 <__multadd>
 80060c6:	4639      	mov	r1, r7
 80060c8:	4680      	mov	r8, r0
 80060ca:	2300      	movs	r3, #0
 80060cc:	220a      	movs	r2, #10
 80060ce:	4620      	mov	r0, r4
 80060d0:	f000 f8ce 	bl	8006270 <__multadd>
 80060d4:	4607      	mov	r7, r0
 80060d6:	e7f1      	b.n	80060bc <_dtoa_r+0xb04>
 80060d8:	9b03      	ldr	r3, [sp, #12]
 80060da:	9302      	str	r3, [sp, #8]
 80060dc:	9d01      	ldr	r5, [sp, #4]
 80060de:	ee18 0a10 	vmov	r0, s16
 80060e2:	4631      	mov	r1, r6
 80060e4:	f7ff f9dc 	bl	80054a0 <quorem>
 80060e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80060ec:	9b01      	ldr	r3, [sp, #4]
 80060ee:	f805 ab01 	strb.w	sl, [r5], #1
 80060f2:	1aea      	subs	r2, r5, r3
 80060f4:	9b02      	ldr	r3, [sp, #8]
 80060f6:	4293      	cmp	r3, r2
 80060f8:	dd09      	ble.n	800610e <_dtoa_r+0xb56>
 80060fa:	ee18 1a10 	vmov	r1, s16
 80060fe:	2300      	movs	r3, #0
 8006100:	220a      	movs	r2, #10
 8006102:	4620      	mov	r0, r4
 8006104:	f000 f8b4 	bl	8006270 <__multadd>
 8006108:	ee08 0a10 	vmov	s16, r0
 800610c:	e7e7      	b.n	80060de <_dtoa_r+0xb26>
 800610e:	9b02      	ldr	r3, [sp, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	bfc8      	it	gt
 8006114:	461d      	movgt	r5, r3
 8006116:	9b01      	ldr	r3, [sp, #4]
 8006118:	bfd8      	it	le
 800611a:	2501      	movle	r5, #1
 800611c:	441d      	add	r5, r3
 800611e:	f04f 0800 	mov.w	r8, #0
 8006122:	ee18 1a10 	vmov	r1, s16
 8006126:	2201      	movs	r2, #1
 8006128:	4620      	mov	r0, r4
 800612a:	f000 fa51 	bl	80065d0 <__lshift>
 800612e:	4631      	mov	r1, r6
 8006130:	ee08 0a10 	vmov	s16, r0
 8006134:	f000 fabc 	bl	80066b0 <__mcmp>
 8006138:	2800      	cmp	r0, #0
 800613a:	dc91      	bgt.n	8006060 <_dtoa_r+0xaa8>
 800613c:	d102      	bne.n	8006144 <_dtoa_r+0xb8c>
 800613e:	f01a 0f01 	tst.w	sl, #1
 8006142:	d18d      	bne.n	8006060 <_dtoa_r+0xaa8>
 8006144:	462b      	mov	r3, r5
 8006146:	461d      	mov	r5, r3
 8006148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800614c:	2a30      	cmp	r2, #48	; 0x30
 800614e:	d0fa      	beq.n	8006146 <_dtoa_r+0xb8e>
 8006150:	e6d7      	b.n	8005f02 <_dtoa_r+0x94a>
 8006152:	9a01      	ldr	r2, [sp, #4]
 8006154:	429a      	cmp	r2, r3
 8006156:	d184      	bne.n	8006062 <_dtoa_r+0xaaa>
 8006158:	9b00      	ldr	r3, [sp, #0]
 800615a:	3301      	adds	r3, #1
 800615c:	9300      	str	r3, [sp, #0]
 800615e:	2331      	movs	r3, #49	; 0x31
 8006160:	7013      	strb	r3, [r2, #0]
 8006162:	e6ce      	b.n	8005f02 <_dtoa_r+0x94a>
 8006164:	4b09      	ldr	r3, [pc, #36]	; (800618c <_dtoa_r+0xbd4>)
 8006166:	f7ff ba95 	b.w	8005694 <_dtoa_r+0xdc>
 800616a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800616c:	2b00      	cmp	r3, #0
 800616e:	f47f aa6e 	bne.w	800564e <_dtoa_r+0x96>
 8006172:	4b07      	ldr	r3, [pc, #28]	; (8006190 <_dtoa_r+0xbd8>)
 8006174:	f7ff ba8e 	b.w	8005694 <_dtoa_r+0xdc>
 8006178:	9b02      	ldr	r3, [sp, #8]
 800617a:	2b00      	cmp	r3, #0
 800617c:	dcae      	bgt.n	80060dc <_dtoa_r+0xb24>
 800617e:	9b06      	ldr	r3, [sp, #24]
 8006180:	2b02      	cmp	r3, #2
 8006182:	f73f aea8 	bgt.w	8005ed6 <_dtoa_r+0x91e>
 8006186:	e7a9      	b.n	80060dc <_dtoa_r+0xb24>
 8006188:	08007c4f 	.word	0x08007c4f
 800618c:	08007bac 	.word	0x08007bac
 8006190:	08007bd0 	.word	0x08007bd0

08006194 <_localeconv_r>:
 8006194:	4800      	ldr	r0, [pc, #0]	; (8006198 <_localeconv_r+0x4>)
 8006196:	4770      	bx	lr
 8006198:	20000170 	.word	0x20000170

0800619c <malloc>:
 800619c:	4b02      	ldr	r3, [pc, #8]	; (80061a8 <malloc+0xc>)
 800619e:	4601      	mov	r1, r0
 80061a0:	6818      	ldr	r0, [r3, #0]
 80061a2:	f000 bc09 	b.w	80069b8 <_malloc_r>
 80061a6:	bf00      	nop
 80061a8:	2000001c 	.word	0x2000001c

080061ac <_Balloc>:
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061b0:	4604      	mov	r4, r0
 80061b2:	460d      	mov	r5, r1
 80061b4:	b976      	cbnz	r6, 80061d4 <_Balloc+0x28>
 80061b6:	2010      	movs	r0, #16
 80061b8:	f7ff fff0 	bl	800619c <malloc>
 80061bc:	4602      	mov	r2, r0
 80061be:	6260      	str	r0, [r4, #36]	; 0x24
 80061c0:	b920      	cbnz	r0, 80061cc <_Balloc+0x20>
 80061c2:	4b18      	ldr	r3, [pc, #96]	; (8006224 <_Balloc+0x78>)
 80061c4:	4818      	ldr	r0, [pc, #96]	; (8006228 <_Balloc+0x7c>)
 80061c6:	2166      	movs	r1, #102	; 0x66
 80061c8:	f000 fdd6 	bl	8006d78 <__assert_func>
 80061cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061d0:	6006      	str	r6, [r0, #0]
 80061d2:	60c6      	str	r6, [r0, #12]
 80061d4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80061d6:	68f3      	ldr	r3, [r6, #12]
 80061d8:	b183      	cbz	r3, 80061fc <_Balloc+0x50>
 80061da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061dc:	68db      	ldr	r3, [r3, #12]
 80061de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80061e2:	b9b8      	cbnz	r0, 8006214 <_Balloc+0x68>
 80061e4:	2101      	movs	r1, #1
 80061e6:	fa01 f605 	lsl.w	r6, r1, r5
 80061ea:	1d72      	adds	r2, r6, #5
 80061ec:	0092      	lsls	r2, r2, #2
 80061ee:	4620      	mov	r0, r4
 80061f0:	f000 fb60 	bl	80068b4 <_calloc_r>
 80061f4:	b160      	cbz	r0, 8006210 <_Balloc+0x64>
 80061f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80061fa:	e00e      	b.n	800621a <_Balloc+0x6e>
 80061fc:	2221      	movs	r2, #33	; 0x21
 80061fe:	2104      	movs	r1, #4
 8006200:	4620      	mov	r0, r4
 8006202:	f000 fb57 	bl	80068b4 <_calloc_r>
 8006206:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006208:	60f0      	str	r0, [r6, #12]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e4      	bne.n	80061da <_Balloc+0x2e>
 8006210:	2000      	movs	r0, #0
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	6802      	ldr	r2, [r0, #0]
 8006216:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800621a:	2300      	movs	r3, #0
 800621c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006220:	e7f7      	b.n	8006212 <_Balloc+0x66>
 8006222:	bf00      	nop
 8006224:	08007bdd 	.word	0x08007bdd
 8006228:	08007c60 	.word	0x08007c60

0800622c <_Bfree>:
 800622c:	b570      	push	{r4, r5, r6, lr}
 800622e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006230:	4605      	mov	r5, r0
 8006232:	460c      	mov	r4, r1
 8006234:	b976      	cbnz	r6, 8006254 <_Bfree+0x28>
 8006236:	2010      	movs	r0, #16
 8006238:	f7ff ffb0 	bl	800619c <malloc>
 800623c:	4602      	mov	r2, r0
 800623e:	6268      	str	r0, [r5, #36]	; 0x24
 8006240:	b920      	cbnz	r0, 800624c <_Bfree+0x20>
 8006242:	4b09      	ldr	r3, [pc, #36]	; (8006268 <_Bfree+0x3c>)
 8006244:	4809      	ldr	r0, [pc, #36]	; (800626c <_Bfree+0x40>)
 8006246:	218a      	movs	r1, #138	; 0x8a
 8006248:	f000 fd96 	bl	8006d78 <__assert_func>
 800624c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006250:	6006      	str	r6, [r0, #0]
 8006252:	60c6      	str	r6, [r0, #12]
 8006254:	b13c      	cbz	r4, 8006266 <_Bfree+0x3a>
 8006256:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006258:	6862      	ldr	r2, [r4, #4]
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006260:	6021      	str	r1, [r4, #0]
 8006262:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006266:	bd70      	pop	{r4, r5, r6, pc}
 8006268:	08007bdd 	.word	0x08007bdd
 800626c:	08007c60 	.word	0x08007c60

08006270 <__multadd>:
 8006270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006274:	690d      	ldr	r5, [r1, #16]
 8006276:	4607      	mov	r7, r0
 8006278:	460c      	mov	r4, r1
 800627a:	461e      	mov	r6, r3
 800627c:	f101 0c14 	add.w	ip, r1, #20
 8006280:	2000      	movs	r0, #0
 8006282:	f8dc 3000 	ldr.w	r3, [ip]
 8006286:	b299      	uxth	r1, r3
 8006288:	fb02 6101 	mla	r1, r2, r1, r6
 800628c:	0c1e      	lsrs	r6, r3, #16
 800628e:	0c0b      	lsrs	r3, r1, #16
 8006290:	fb02 3306 	mla	r3, r2, r6, r3
 8006294:	b289      	uxth	r1, r1
 8006296:	3001      	adds	r0, #1
 8006298:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800629c:	4285      	cmp	r5, r0
 800629e:	f84c 1b04 	str.w	r1, [ip], #4
 80062a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80062a6:	dcec      	bgt.n	8006282 <__multadd+0x12>
 80062a8:	b30e      	cbz	r6, 80062ee <__multadd+0x7e>
 80062aa:	68a3      	ldr	r3, [r4, #8]
 80062ac:	42ab      	cmp	r3, r5
 80062ae:	dc19      	bgt.n	80062e4 <__multadd+0x74>
 80062b0:	6861      	ldr	r1, [r4, #4]
 80062b2:	4638      	mov	r0, r7
 80062b4:	3101      	adds	r1, #1
 80062b6:	f7ff ff79 	bl	80061ac <_Balloc>
 80062ba:	4680      	mov	r8, r0
 80062bc:	b928      	cbnz	r0, 80062ca <__multadd+0x5a>
 80062be:	4602      	mov	r2, r0
 80062c0:	4b0c      	ldr	r3, [pc, #48]	; (80062f4 <__multadd+0x84>)
 80062c2:	480d      	ldr	r0, [pc, #52]	; (80062f8 <__multadd+0x88>)
 80062c4:	21b5      	movs	r1, #181	; 0xb5
 80062c6:	f000 fd57 	bl	8006d78 <__assert_func>
 80062ca:	6922      	ldr	r2, [r4, #16]
 80062cc:	3202      	adds	r2, #2
 80062ce:	f104 010c 	add.w	r1, r4, #12
 80062d2:	0092      	lsls	r2, r2, #2
 80062d4:	300c      	adds	r0, #12
 80062d6:	f7fe fc43 	bl	8004b60 <memcpy>
 80062da:	4621      	mov	r1, r4
 80062dc:	4638      	mov	r0, r7
 80062de:	f7ff ffa5 	bl	800622c <_Bfree>
 80062e2:	4644      	mov	r4, r8
 80062e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062e8:	3501      	adds	r5, #1
 80062ea:	615e      	str	r6, [r3, #20]
 80062ec:	6125      	str	r5, [r4, #16]
 80062ee:	4620      	mov	r0, r4
 80062f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f4:	08007c4f 	.word	0x08007c4f
 80062f8:	08007c60 	.word	0x08007c60

080062fc <__hi0bits>:
 80062fc:	0c03      	lsrs	r3, r0, #16
 80062fe:	041b      	lsls	r3, r3, #16
 8006300:	b9d3      	cbnz	r3, 8006338 <__hi0bits+0x3c>
 8006302:	0400      	lsls	r0, r0, #16
 8006304:	2310      	movs	r3, #16
 8006306:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800630a:	bf04      	itt	eq
 800630c:	0200      	lsleq	r0, r0, #8
 800630e:	3308      	addeq	r3, #8
 8006310:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006314:	bf04      	itt	eq
 8006316:	0100      	lsleq	r0, r0, #4
 8006318:	3304      	addeq	r3, #4
 800631a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800631e:	bf04      	itt	eq
 8006320:	0080      	lsleq	r0, r0, #2
 8006322:	3302      	addeq	r3, #2
 8006324:	2800      	cmp	r0, #0
 8006326:	db05      	blt.n	8006334 <__hi0bits+0x38>
 8006328:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800632c:	f103 0301 	add.w	r3, r3, #1
 8006330:	bf08      	it	eq
 8006332:	2320      	moveq	r3, #32
 8006334:	4618      	mov	r0, r3
 8006336:	4770      	bx	lr
 8006338:	2300      	movs	r3, #0
 800633a:	e7e4      	b.n	8006306 <__hi0bits+0xa>

0800633c <__lo0bits>:
 800633c:	6803      	ldr	r3, [r0, #0]
 800633e:	f013 0207 	ands.w	r2, r3, #7
 8006342:	4601      	mov	r1, r0
 8006344:	d00b      	beq.n	800635e <__lo0bits+0x22>
 8006346:	07da      	lsls	r2, r3, #31
 8006348:	d423      	bmi.n	8006392 <__lo0bits+0x56>
 800634a:	0798      	lsls	r0, r3, #30
 800634c:	bf49      	itett	mi
 800634e:	085b      	lsrmi	r3, r3, #1
 8006350:	089b      	lsrpl	r3, r3, #2
 8006352:	2001      	movmi	r0, #1
 8006354:	600b      	strmi	r3, [r1, #0]
 8006356:	bf5c      	itt	pl
 8006358:	600b      	strpl	r3, [r1, #0]
 800635a:	2002      	movpl	r0, #2
 800635c:	4770      	bx	lr
 800635e:	b298      	uxth	r0, r3
 8006360:	b9a8      	cbnz	r0, 800638e <__lo0bits+0x52>
 8006362:	0c1b      	lsrs	r3, r3, #16
 8006364:	2010      	movs	r0, #16
 8006366:	b2da      	uxtb	r2, r3
 8006368:	b90a      	cbnz	r2, 800636e <__lo0bits+0x32>
 800636a:	3008      	adds	r0, #8
 800636c:	0a1b      	lsrs	r3, r3, #8
 800636e:	071a      	lsls	r2, r3, #28
 8006370:	bf04      	itt	eq
 8006372:	091b      	lsreq	r3, r3, #4
 8006374:	3004      	addeq	r0, #4
 8006376:	079a      	lsls	r2, r3, #30
 8006378:	bf04      	itt	eq
 800637a:	089b      	lsreq	r3, r3, #2
 800637c:	3002      	addeq	r0, #2
 800637e:	07da      	lsls	r2, r3, #31
 8006380:	d403      	bmi.n	800638a <__lo0bits+0x4e>
 8006382:	085b      	lsrs	r3, r3, #1
 8006384:	f100 0001 	add.w	r0, r0, #1
 8006388:	d005      	beq.n	8006396 <__lo0bits+0x5a>
 800638a:	600b      	str	r3, [r1, #0]
 800638c:	4770      	bx	lr
 800638e:	4610      	mov	r0, r2
 8006390:	e7e9      	b.n	8006366 <__lo0bits+0x2a>
 8006392:	2000      	movs	r0, #0
 8006394:	4770      	bx	lr
 8006396:	2020      	movs	r0, #32
 8006398:	4770      	bx	lr
	...

0800639c <__i2b>:
 800639c:	b510      	push	{r4, lr}
 800639e:	460c      	mov	r4, r1
 80063a0:	2101      	movs	r1, #1
 80063a2:	f7ff ff03 	bl	80061ac <_Balloc>
 80063a6:	4602      	mov	r2, r0
 80063a8:	b928      	cbnz	r0, 80063b6 <__i2b+0x1a>
 80063aa:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <__i2b+0x24>)
 80063ac:	4805      	ldr	r0, [pc, #20]	; (80063c4 <__i2b+0x28>)
 80063ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80063b2:	f000 fce1 	bl	8006d78 <__assert_func>
 80063b6:	2301      	movs	r3, #1
 80063b8:	6144      	str	r4, [r0, #20]
 80063ba:	6103      	str	r3, [r0, #16]
 80063bc:	bd10      	pop	{r4, pc}
 80063be:	bf00      	nop
 80063c0:	08007c4f 	.word	0x08007c4f
 80063c4:	08007c60 	.word	0x08007c60

080063c8 <__multiply>:
 80063c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	4691      	mov	r9, r2
 80063ce:	690a      	ldr	r2, [r1, #16]
 80063d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	bfb8      	it	lt
 80063d8:	460b      	movlt	r3, r1
 80063da:	460c      	mov	r4, r1
 80063dc:	bfbc      	itt	lt
 80063de:	464c      	movlt	r4, r9
 80063e0:	4699      	movlt	r9, r3
 80063e2:	6927      	ldr	r7, [r4, #16]
 80063e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80063e8:	68a3      	ldr	r3, [r4, #8]
 80063ea:	6861      	ldr	r1, [r4, #4]
 80063ec:	eb07 060a 	add.w	r6, r7, sl
 80063f0:	42b3      	cmp	r3, r6
 80063f2:	b085      	sub	sp, #20
 80063f4:	bfb8      	it	lt
 80063f6:	3101      	addlt	r1, #1
 80063f8:	f7ff fed8 	bl	80061ac <_Balloc>
 80063fc:	b930      	cbnz	r0, 800640c <__multiply+0x44>
 80063fe:	4602      	mov	r2, r0
 8006400:	4b44      	ldr	r3, [pc, #272]	; (8006514 <__multiply+0x14c>)
 8006402:	4845      	ldr	r0, [pc, #276]	; (8006518 <__multiply+0x150>)
 8006404:	f240 115d 	movw	r1, #349	; 0x15d
 8006408:	f000 fcb6 	bl	8006d78 <__assert_func>
 800640c:	f100 0514 	add.w	r5, r0, #20
 8006410:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006414:	462b      	mov	r3, r5
 8006416:	2200      	movs	r2, #0
 8006418:	4543      	cmp	r3, r8
 800641a:	d321      	bcc.n	8006460 <__multiply+0x98>
 800641c:	f104 0314 	add.w	r3, r4, #20
 8006420:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006424:	f109 0314 	add.w	r3, r9, #20
 8006428:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800642c:	9202      	str	r2, [sp, #8]
 800642e:	1b3a      	subs	r2, r7, r4
 8006430:	3a15      	subs	r2, #21
 8006432:	f022 0203 	bic.w	r2, r2, #3
 8006436:	3204      	adds	r2, #4
 8006438:	f104 0115 	add.w	r1, r4, #21
 800643c:	428f      	cmp	r7, r1
 800643e:	bf38      	it	cc
 8006440:	2204      	movcc	r2, #4
 8006442:	9201      	str	r2, [sp, #4]
 8006444:	9a02      	ldr	r2, [sp, #8]
 8006446:	9303      	str	r3, [sp, #12]
 8006448:	429a      	cmp	r2, r3
 800644a:	d80c      	bhi.n	8006466 <__multiply+0x9e>
 800644c:	2e00      	cmp	r6, #0
 800644e:	dd03      	ble.n	8006458 <__multiply+0x90>
 8006450:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006454:	2b00      	cmp	r3, #0
 8006456:	d05a      	beq.n	800650e <__multiply+0x146>
 8006458:	6106      	str	r6, [r0, #16]
 800645a:	b005      	add	sp, #20
 800645c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006460:	f843 2b04 	str.w	r2, [r3], #4
 8006464:	e7d8      	b.n	8006418 <__multiply+0x50>
 8006466:	f8b3 a000 	ldrh.w	sl, [r3]
 800646a:	f1ba 0f00 	cmp.w	sl, #0
 800646e:	d024      	beq.n	80064ba <__multiply+0xf2>
 8006470:	f104 0e14 	add.w	lr, r4, #20
 8006474:	46a9      	mov	r9, r5
 8006476:	f04f 0c00 	mov.w	ip, #0
 800647a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800647e:	f8d9 1000 	ldr.w	r1, [r9]
 8006482:	fa1f fb82 	uxth.w	fp, r2
 8006486:	b289      	uxth	r1, r1
 8006488:	fb0a 110b 	mla	r1, sl, fp, r1
 800648c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006490:	f8d9 2000 	ldr.w	r2, [r9]
 8006494:	4461      	add	r1, ip
 8006496:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800649a:	fb0a c20b 	mla	r2, sl, fp, ip
 800649e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80064a2:	b289      	uxth	r1, r1
 80064a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80064a8:	4577      	cmp	r7, lr
 80064aa:	f849 1b04 	str.w	r1, [r9], #4
 80064ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80064b2:	d8e2      	bhi.n	800647a <__multiply+0xb2>
 80064b4:	9a01      	ldr	r2, [sp, #4]
 80064b6:	f845 c002 	str.w	ip, [r5, r2]
 80064ba:	9a03      	ldr	r2, [sp, #12]
 80064bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80064c0:	3304      	adds	r3, #4
 80064c2:	f1b9 0f00 	cmp.w	r9, #0
 80064c6:	d020      	beq.n	800650a <__multiply+0x142>
 80064c8:	6829      	ldr	r1, [r5, #0]
 80064ca:	f104 0c14 	add.w	ip, r4, #20
 80064ce:	46ae      	mov	lr, r5
 80064d0:	f04f 0a00 	mov.w	sl, #0
 80064d4:	f8bc b000 	ldrh.w	fp, [ip]
 80064d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80064dc:	fb09 220b 	mla	r2, r9, fp, r2
 80064e0:	4492      	add	sl, r2
 80064e2:	b289      	uxth	r1, r1
 80064e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80064e8:	f84e 1b04 	str.w	r1, [lr], #4
 80064ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80064f0:	f8be 1000 	ldrh.w	r1, [lr]
 80064f4:	0c12      	lsrs	r2, r2, #16
 80064f6:	fb09 1102 	mla	r1, r9, r2, r1
 80064fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80064fe:	4567      	cmp	r7, ip
 8006500:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006504:	d8e6      	bhi.n	80064d4 <__multiply+0x10c>
 8006506:	9a01      	ldr	r2, [sp, #4]
 8006508:	50a9      	str	r1, [r5, r2]
 800650a:	3504      	adds	r5, #4
 800650c:	e79a      	b.n	8006444 <__multiply+0x7c>
 800650e:	3e01      	subs	r6, #1
 8006510:	e79c      	b.n	800644c <__multiply+0x84>
 8006512:	bf00      	nop
 8006514:	08007c4f 	.word	0x08007c4f
 8006518:	08007c60 	.word	0x08007c60

0800651c <__pow5mult>:
 800651c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006520:	4615      	mov	r5, r2
 8006522:	f012 0203 	ands.w	r2, r2, #3
 8006526:	4606      	mov	r6, r0
 8006528:	460f      	mov	r7, r1
 800652a:	d007      	beq.n	800653c <__pow5mult+0x20>
 800652c:	4c25      	ldr	r4, [pc, #148]	; (80065c4 <__pow5mult+0xa8>)
 800652e:	3a01      	subs	r2, #1
 8006530:	2300      	movs	r3, #0
 8006532:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006536:	f7ff fe9b 	bl	8006270 <__multadd>
 800653a:	4607      	mov	r7, r0
 800653c:	10ad      	asrs	r5, r5, #2
 800653e:	d03d      	beq.n	80065bc <__pow5mult+0xa0>
 8006540:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006542:	b97c      	cbnz	r4, 8006564 <__pow5mult+0x48>
 8006544:	2010      	movs	r0, #16
 8006546:	f7ff fe29 	bl	800619c <malloc>
 800654a:	4602      	mov	r2, r0
 800654c:	6270      	str	r0, [r6, #36]	; 0x24
 800654e:	b928      	cbnz	r0, 800655c <__pow5mult+0x40>
 8006550:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <__pow5mult+0xac>)
 8006552:	481e      	ldr	r0, [pc, #120]	; (80065cc <__pow5mult+0xb0>)
 8006554:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006558:	f000 fc0e 	bl	8006d78 <__assert_func>
 800655c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006560:	6004      	str	r4, [r0, #0]
 8006562:	60c4      	str	r4, [r0, #12]
 8006564:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006568:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800656c:	b94c      	cbnz	r4, 8006582 <__pow5mult+0x66>
 800656e:	f240 2171 	movw	r1, #625	; 0x271
 8006572:	4630      	mov	r0, r6
 8006574:	f7ff ff12 	bl	800639c <__i2b>
 8006578:	2300      	movs	r3, #0
 800657a:	f8c8 0008 	str.w	r0, [r8, #8]
 800657e:	4604      	mov	r4, r0
 8006580:	6003      	str	r3, [r0, #0]
 8006582:	f04f 0900 	mov.w	r9, #0
 8006586:	07eb      	lsls	r3, r5, #31
 8006588:	d50a      	bpl.n	80065a0 <__pow5mult+0x84>
 800658a:	4639      	mov	r1, r7
 800658c:	4622      	mov	r2, r4
 800658e:	4630      	mov	r0, r6
 8006590:	f7ff ff1a 	bl	80063c8 <__multiply>
 8006594:	4639      	mov	r1, r7
 8006596:	4680      	mov	r8, r0
 8006598:	4630      	mov	r0, r6
 800659a:	f7ff fe47 	bl	800622c <_Bfree>
 800659e:	4647      	mov	r7, r8
 80065a0:	106d      	asrs	r5, r5, #1
 80065a2:	d00b      	beq.n	80065bc <__pow5mult+0xa0>
 80065a4:	6820      	ldr	r0, [r4, #0]
 80065a6:	b938      	cbnz	r0, 80065b8 <__pow5mult+0x9c>
 80065a8:	4622      	mov	r2, r4
 80065aa:	4621      	mov	r1, r4
 80065ac:	4630      	mov	r0, r6
 80065ae:	f7ff ff0b 	bl	80063c8 <__multiply>
 80065b2:	6020      	str	r0, [r4, #0]
 80065b4:	f8c0 9000 	str.w	r9, [r0]
 80065b8:	4604      	mov	r4, r0
 80065ba:	e7e4      	b.n	8006586 <__pow5mult+0x6a>
 80065bc:	4638      	mov	r0, r7
 80065be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065c2:	bf00      	nop
 80065c4:	08007db0 	.word	0x08007db0
 80065c8:	08007bdd 	.word	0x08007bdd
 80065cc:	08007c60 	.word	0x08007c60

080065d0 <__lshift>:
 80065d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065d4:	460c      	mov	r4, r1
 80065d6:	6849      	ldr	r1, [r1, #4]
 80065d8:	6923      	ldr	r3, [r4, #16]
 80065da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80065de:	68a3      	ldr	r3, [r4, #8]
 80065e0:	4607      	mov	r7, r0
 80065e2:	4691      	mov	r9, r2
 80065e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80065e8:	f108 0601 	add.w	r6, r8, #1
 80065ec:	42b3      	cmp	r3, r6
 80065ee:	db0b      	blt.n	8006608 <__lshift+0x38>
 80065f0:	4638      	mov	r0, r7
 80065f2:	f7ff fddb 	bl	80061ac <_Balloc>
 80065f6:	4605      	mov	r5, r0
 80065f8:	b948      	cbnz	r0, 800660e <__lshift+0x3e>
 80065fa:	4602      	mov	r2, r0
 80065fc:	4b2a      	ldr	r3, [pc, #168]	; (80066a8 <__lshift+0xd8>)
 80065fe:	482b      	ldr	r0, [pc, #172]	; (80066ac <__lshift+0xdc>)
 8006600:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006604:	f000 fbb8 	bl	8006d78 <__assert_func>
 8006608:	3101      	adds	r1, #1
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	e7ee      	b.n	80065ec <__lshift+0x1c>
 800660e:	2300      	movs	r3, #0
 8006610:	f100 0114 	add.w	r1, r0, #20
 8006614:	f100 0210 	add.w	r2, r0, #16
 8006618:	4618      	mov	r0, r3
 800661a:	4553      	cmp	r3, sl
 800661c:	db37      	blt.n	800668e <__lshift+0xbe>
 800661e:	6920      	ldr	r0, [r4, #16]
 8006620:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006624:	f104 0314 	add.w	r3, r4, #20
 8006628:	f019 091f 	ands.w	r9, r9, #31
 800662c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006630:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006634:	d02f      	beq.n	8006696 <__lshift+0xc6>
 8006636:	f1c9 0e20 	rsb	lr, r9, #32
 800663a:	468a      	mov	sl, r1
 800663c:	f04f 0c00 	mov.w	ip, #0
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	fa02 f209 	lsl.w	r2, r2, r9
 8006646:	ea42 020c 	orr.w	r2, r2, ip
 800664a:	f84a 2b04 	str.w	r2, [sl], #4
 800664e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006652:	4298      	cmp	r0, r3
 8006654:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006658:	d8f2      	bhi.n	8006640 <__lshift+0x70>
 800665a:	1b03      	subs	r3, r0, r4
 800665c:	3b15      	subs	r3, #21
 800665e:	f023 0303 	bic.w	r3, r3, #3
 8006662:	3304      	adds	r3, #4
 8006664:	f104 0215 	add.w	r2, r4, #21
 8006668:	4290      	cmp	r0, r2
 800666a:	bf38      	it	cc
 800666c:	2304      	movcc	r3, #4
 800666e:	f841 c003 	str.w	ip, [r1, r3]
 8006672:	f1bc 0f00 	cmp.w	ip, #0
 8006676:	d001      	beq.n	800667c <__lshift+0xac>
 8006678:	f108 0602 	add.w	r6, r8, #2
 800667c:	3e01      	subs	r6, #1
 800667e:	4638      	mov	r0, r7
 8006680:	612e      	str	r6, [r5, #16]
 8006682:	4621      	mov	r1, r4
 8006684:	f7ff fdd2 	bl	800622c <_Bfree>
 8006688:	4628      	mov	r0, r5
 800668a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800668e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006692:	3301      	adds	r3, #1
 8006694:	e7c1      	b.n	800661a <__lshift+0x4a>
 8006696:	3904      	subs	r1, #4
 8006698:	f853 2b04 	ldr.w	r2, [r3], #4
 800669c:	f841 2f04 	str.w	r2, [r1, #4]!
 80066a0:	4298      	cmp	r0, r3
 80066a2:	d8f9      	bhi.n	8006698 <__lshift+0xc8>
 80066a4:	e7ea      	b.n	800667c <__lshift+0xac>
 80066a6:	bf00      	nop
 80066a8:	08007c4f 	.word	0x08007c4f
 80066ac:	08007c60 	.word	0x08007c60

080066b0 <__mcmp>:
 80066b0:	b530      	push	{r4, r5, lr}
 80066b2:	6902      	ldr	r2, [r0, #16]
 80066b4:	690c      	ldr	r4, [r1, #16]
 80066b6:	1b12      	subs	r2, r2, r4
 80066b8:	d10e      	bne.n	80066d8 <__mcmp+0x28>
 80066ba:	f100 0314 	add.w	r3, r0, #20
 80066be:	3114      	adds	r1, #20
 80066c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80066c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80066c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80066cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80066d0:	42a5      	cmp	r5, r4
 80066d2:	d003      	beq.n	80066dc <__mcmp+0x2c>
 80066d4:	d305      	bcc.n	80066e2 <__mcmp+0x32>
 80066d6:	2201      	movs	r2, #1
 80066d8:	4610      	mov	r0, r2
 80066da:	bd30      	pop	{r4, r5, pc}
 80066dc:	4283      	cmp	r3, r0
 80066de:	d3f3      	bcc.n	80066c8 <__mcmp+0x18>
 80066e0:	e7fa      	b.n	80066d8 <__mcmp+0x28>
 80066e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066e6:	e7f7      	b.n	80066d8 <__mcmp+0x28>

080066e8 <__mdiff>:
 80066e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ec:	460c      	mov	r4, r1
 80066ee:	4606      	mov	r6, r0
 80066f0:	4611      	mov	r1, r2
 80066f2:	4620      	mov	r0, r4
 80066f4:	4690      	mov	r8, r2
 80066f6:	f7ff ffdb 	bl	80066b0 <__mcmp>
 80066fa:	1e05      	subs	r5, r0, #0
 80066fc:	d110      	bne.n	8006720 <__mdiff+0x38>
 80066fe:	4629      	mov	r1, r5
 8006700:	4630      	mov	r0, r6
 8006702:	f7ff fd53 	bl	80061ac <_Balloc>
 8006706:	b930      	cbnz	r0, 8006716 <__mdiff+0x2e>
 8006708:	4b3a      	ldr	r3, [pc, #232]	; (80067f4 <__mdiff+0x10c>)
 800670a:	4602      	mov	r2, r0
 800670c:	f240 2132 	movw	r1, #562	; 0x232
 8006710:	4839      	ldr	r0, [pc, #228]	; (80067f8 <__mdiff+0x110>)
 8006712:	f000 fb31 	bl	8006d78 <__assert_func>
 8006716:	2301      	movs	r3, #1
 8006718:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800671c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006720:	bfa4      	itt	ge
 8006722:	4643      	movge	r3, r8
 8006724:	46a0      	movge	r8, r4
 8006726:	4630      	mov	r0, r6
 8006728:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800672c:	bfa6      	itte	ge
 800672e:	461c      	movge	r4, r3
 8006730:	2500      	movge	r5, #0
 8006732:	2501      	movlt	r5, #1
 8006734:	f7ff fd3a 	bl	80061ac <_Balloc>
 8006738:	b920      	cbnz	r0, 8006744 <__mdiff+0x5c>
 800673a:	4b2e      	ldr	r3, [pc, #184]	; (80067f4 <__mdiff+0x10c>)
 800673c:	4602      	mov	r2, r0
 800673e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006742:	e7e5      	b.n	8006710 <__mdiff+0x28>
 8006744:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006748:	6926      	ldr	r6, [r4, #16]
 800674a:	60c5      	str	r5, [r0, #12]
 800674c:	f104 0914 	add.w	r9, r4, #20
 8006750:	f108 0514 	add.w	r5, r8, #20
 8006754:	f100 0e14 	add.w	lr, r0, #20
 8006758:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800675c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006760:	f108 0210 	add.w	r2, r8, #16
 8006764:	46f2      	mov	sl, lr
 8006766:	2100      	movs	r1, #0
 8006768:	f859 3b04 	ldr.w	r3, [r9], #4
 800676c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006770:	fa1f f883 	uxth.w	r8, r3
 8006774:	fa11 f18b 	uxtah	r1, r1, fp
 8006778:	0c1b      	lsrs	r3, r3, #16
 800677a:	eba1 0808 	sub.w	r8, r1, r8
 800677e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006782:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006786:	fa1f f888 	uxth.w	r8, r8
 800678a:	1419      	asrs	r1, r3, #16
 800678c:	454e      	cmp	r6, r9
 800678e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006792:	f84a 3b04 	str.w	r3, [sl], #4
 8006796:	d8e7      	bhi.n	8006768 <__mdiff+0x80>
 8006798:	1b33      	subs	r3, r6, r4
 800679a:	3b15      	subs	r3, #21
 800679c:	f023 0303 	bic.w	r3, r3, #3
 80067a0:	3304      	adds	r3, #4
 80067a2:	3415      	adds	r4, #21
 80067a4:	42a6      	cmp	r6, r4
 80067a6:	bf38      	it	cc
 80067a8:	2304      	movcc	r3, #4
 80067aa:	441d      	add	r5, r3
 80067ac:	4473      	add	r3, lr
 80067ae:	469e      	mov	lr, r3
 80067b0:	462e      	mov	r6, r5
 80067b2:	4566      	cmp	r6, ip
 80067b4:	d30e      	bcc.n	80067d4 <__mdiff+0xec>
 80067b6:	f10c 0203 	add.w	r2, ip, #3
 80067ba:	1b52      	subs	r2, r2, r5
 80067bc:	f022 0203 	bic.w	r2, r2, #3
 80067c0:	3d03      	subs	r5, #3
 80067c2:	45ac      	cmp	ip, r5
 80067c4:	bf38      	it	cc
 80067c6:	2200      	movcc	r2, #0
 80067c8:	441a      	add	r2, r3
 80067ca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80067ce:	b17b      	cbz	r3, 80067f0 <__mdiff+0x108>
 80067d0:	6107      	str	r7, [r0, #16]
 80067d2:	e7a3      	b.n	800671c <__mdiff+0x34>
 80067d4:	f856 8b04 	ldr.w	r8, [r6], #4
 80067d8:	fa11 f288 	uxtah	r2, r1, r8
 80067dc:	1414      	asrs	r4, r2, #16
 80067de:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80067e2:	b292      	uxth	r2, r2
 80067e4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80067e8:	f84e 2b04 	str.w	r2, [lr], #4
 80067ec:	1421      	asrs	r1, r4, #16
 80067ee:	e7e0      	b.n	80067b2 <__mdiff+0xca>
 80067f0:	3f01      	subs	r7, #1
 80067f2:	e7ea      	b.n	80067ca <__mdiff+0xe2>
 80067f4:	08007c4f 	.word	0x08007c4f
 80067f8:	08007c60 	.word	0x08007c60

080067fc <__d2b>:
 80067fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006800:	4689      	mov	r9, r1
 8006802:	2101      	movs	r1, #1
 8006804:	ec57 6b10 	vmov	r6, r7, d0
 8006808:	4690      	mov	r8, r2
 800680a:	f7ff fccf 	bl	80061ac <_Balloc>
 800680e:	4604      	mov	r4, r0
 8006810:	b930      	cbnz	r0, 8006820 <__d2b+0x24>
 8006812:	4602      	mov	r2, r0
 8006814:	4b25      	ldr	r3, [pc, #148]	; (80068ac <__d2b+0xb0>)
 8006816:	4826      	ldr	r0, [pc, #152]	; (80068b0 <__d2b+0xb4>)
 8006818:	f240 310a 	movw	r1, #778	; 0x30a
 800681c:	f000 faac 	bl	8006d78 <__assert_func>
 8006820:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006824:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006828:	bb35      	cbnz	r5, 8006878 <__d2b+0x7c>
 800682a:	2e00      	cmp	r6, #0
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	d028      	beq.n	8006882 <__d2b+0x86>
 8006830:	4668      	mov	r0, sp
 8006832:	9600      	str	r6, [sp, #0]
 8006834:	f7ff fd82 	bl	800633c <__lo0bits>
 8006838:	9900      	ldr	r1, [sp, #0]
 800683a:	b300      	cbz	r0, 800687e <__d2b+0x82>
 800683c:	9a01      	ldr	r2, [sp, #4]
 800683e:	f1c0 0320 	rsb	r3, r0, #32
 8006842:	fa02 f303 	lsl.w	r3, r2, r3
 8006846:	430b      	orrs	r3, r1
 8006848:	40c2      	lsrs	r2, r0
 800684a:	6163      	str	r3, [r4, #20]
 800684c:	9201      	str	r2, [sp, #4]
 800684e:	9b01      	ldr	r3, [sp, #4]
 8006850:	61a3      	str	r3, [r4, #24]
 8006852:	2b00      	cmp	r3, #0
 8006854:	bf14      	ite	ne
 8006856:	2202      	movne	r2, #2
 8006858:	2201      	moveq	r2, #1
 800685a:	6122      	str	r2, [r4, #16]
 800685c:	b1d5      	cbz	r5, 8006894 <__d2b+0x98>
 800685e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006862:	4405      	add	r5, r0
 8006864:	f8c9 5000 	str.w	r5, [r9]
 8006868:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800686c:	f8c8 0000 	str.w	r0, [r8]
 8006870:	4620      	mov	r0, r4
 8006872:	b003      	add	sp, #12
 8006874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006878:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800687c:	e7d5      	b.n	800682a <__d2b+0x2e>
 800687e:	6161      	str	r1, [r4, #20]
 8006880:	e7e5      	b.n	800684e <__d2b+0x52>
 8006882:	a801      	add	r0, sp, #4
 8006884:	f7ff fd5a 	bl	800633c <__lo0bits>
 8006888:	9b01      	ldr	r3, [sp, #4]
 800688a:	6163      	str	r3, [r4, #20]
 800688c:	2201      	movs	r2, #1
 800688e:	6122      	str	r2, [r4, #16]
 8006890:	3020      	adds	r0, #32
 8006892:	e7e3      	b.n	800685c <__d2b+0x60>
 8006894:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006898:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800689c:	f8c9 0000 	str.w	r0, [r9]
 80068a0:	6918      	ldr	r0, [r3, #16]
 80068a2:	f7ff fd2b 	bl	80062fc <__hi0bits>
 80068a6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80068aa:	e7df      	b.n	800686c <__d2b+0x70>
 80068ac:	08007c4f 	.word	0x08007c4f
 80068b0:	08007c60 	.word	0x08007c60

080068b4 <_calloc_r>:
 80068b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068b6:	fba1 2402 	umull	r2, r4, r1, r2
 80068ba:	b94c      	cbnz	r4, 80068d0 <_calloc_r+0x1c>
 80068bc:	4611      	mov	r1, r2
 80068be:	9201      	str	r2, [sp, #4]
 80068c0:	f000 f87a 	bl	80069b8 <_malloc_r>
 80068c4:	9a01      	ldr	r2, [sp, #4]
 80068c6:	4605      	mov	r5, r0
 80068c8:	b930      	cbnz	r0, 80068d8 <_calloc_r+0x24>
 80068ca:	4628      	mov	r0, r5
 80068cc:	b003      	add	sp, #12
 80068ce:	bd30      	pop	{r4, r5, pc}
 80068d0:	220c      	movs	r2, #12
 80068d2:	6002      	str	r2, [r0, #0]
 80068d4:	2500      	movs	r5, #0
 80068d6:	e7f8      	b.n	80068ca <_calloc_r+0x16>
 80068d8:	4621      	mov	r1, r4
 80068da:	f7fe f94f 	bl	8004b7c <memset>
 80068de:	e7f4      	b.n	80068ca <_calloc_r+0x16>

080068e0 <_free_r>:
 80068e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068e2:	2900      	cmp	r1, #0
 80068e4:	d044      	beq.n	8006970 <_free_r+0x90>
 80068e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ea:	9001      	str	r0, [sp, #4]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	f1a1 0404 	sub.w	r4, r1, #4
 80068f2:	bfb8      	it	lt
 80068f4:	18e4      	addlt	r4, r4, r3
 80068f6:	f000 fa9b 	bl	8006e30 <__malloc_lock>
 80068fa:	4a1e      	ldr	r2, [pc, #120]	; (8006974 <_free_r+0x94>)
 80068fc:	9801      	ldr	r0, [sp, #4]
 80068fe:	6813      	ldr	r3, [r2, #0]
 8006900:	b933      	cbnz	r3, 8006910 <_free_r+0x30>
 8006902:	6063      	str	r3, [r4, #4]
 8006904:	6014      	str	r4, [r2, #0]
 8006906:	b003      	add	sp, #12
 8006908:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800690c:	f000 ba96 	b.w	8006e3c <__malloc_unlock>
 8006910:	42a3      	cmp	r3, r4
 8006912:	d908      	bls.n	8006926 <_free_r+0x46>
 8006914:	6825      	ldr	r5, [r4, #0]
 8006916:	1961      	adds	r1, r4, r5
 8006918:	428b      	cmp	r3, r1
 800691a:	bf01      	itttt	eq
 800691c:	6819      	ldreq	r1, [r3, #0]
 800691e:	685b      	ldreq	r3, [r3, #4]
 8006920:	1949      	addeq	r1, r1, r5
 8006922:	6021      	streq	r1, [r4, #0]
 8006924:	e7ed      	b.n	8006902 <_free_r+0x22>
 8006926:	461a      	mov	r2, r3
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	b10b      	cbz	r3, 8006930 <_free_r+0x50>
 800692c:	42a3      	cmp	r3, r4
 800692e:	d9fa      	bls.n	8006926 <_free_r+0x46>
 8006930:	6811      	ldr	r1, [r2, #0]
 8006932:	1855      	adds	r5, r2, r1
 8006934:	42a5      	cmp	r5, r4
 8006936:	d10b      	bne.n	8006950 <_free_r+0x70>
 8006938:	6824      	ldr	r4, [r4, #0]
 800693a:	4421      	add	r1, r4
 800693c:	1854      	adds	r4, r2, r1
 800693e:	42a3      	cmp	r3, r4
 8006940:	6011      	str	r1, [r2, #0]
 8006942:	d1e0      	bne.n	8006906 <_free_r+0x26>
 8006944:	681c      	ldr	r4, [r3, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	6053      	str	r3, [r2, #4]
 800694a:	4421      	add	r1, r4
 800694c:	6011      	str	r1, [r2, #0]
 800694e:	e7da      	b.n	8006906 <_free_r+0x26>
 8006950:	d902      	bls.n	8006958 <_free_r+0x78>
 8006952:	230c      	movs	r3, #12
 8006954:	6003      	str	r3, [r0, #0]
 8006956:	e7d6      	b.n	8006906 <_free_r+0x26>
 8006958:	6825      	ldr	r5, [r4, #0]
 800695a:	1961      	adds	r1, r4, r5
 800695c:	428b      	cmp	r3, r1
 800695e:	bf04      	itt	eq
 8006960:	6819      	ldreq	r1, [r3, #0]
 8006962:	685b      	ldreq	r3, [r3, #4]
 8006964:	6063      	str	r3, [r4, #4]
 8006966:	bf04      	itt	eq
 8006968:	1949      	addeq	r1, r1, r5
 800696a:	6021      	streq	r1, [r4, #0]
 800696c:	6054      	str	r4, [r2, #4]
 800696e:	e7ca      	b.n	8006906 <_free_r+0x26>
 8006970:	b003      	add	sp, #12
 8006972:	bd30      	pop	{r4, r5, pc}
 8006974:	200002fc 	.word	0x200002fc

08006978 <sbrk_aligned>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	4e0e      	ldr	r6, [pc, #56]	; (80069b4 <sbrk_aligned+0x3c>)
 800697c:	460c      	mov	r4, r1
 800697e:	6831      	ldr	r1, [r6, #0]
 8006980:	4605      	mov	r5, r0
 8006982:	b911      	cbnz	r1, 800698a <sbrk_aligned+0x12>
 8006984:	f000 f9e8 	bl	8006d58 <_sbrk_r>
 8006988:	6030      	str	r0, [r6, #0]
 800698a:	4621      	mov	r1, r4
 800698c:	4628      	mov	r0, r5
 800698e:	f000 f9e3 	bl	8006d58 <_sbrk_r>
 8006992:	1c43      	adds	r3, r0, #1
 8006994:	d00a      	beq.n	80069ac <sbrk_aligned+0x34>
 8006996:	1cc4      	adds	r4, r0, #3
 8006998:	f024 0403 	bic.w	r4, r4, #3
 800699c:	42a0      	cmp	r0, r4
 800699e:	d007      	beq.n	80069b0 <sbrk_aligned+0x38>
 80069a0:	1a21      	subs	r1, r4, r0
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 f9d8 	bl	8006d58 <_sbrk_r>
 80069a8:	3001      	adds	r0, #1
 80069aa:	d101      	bne.n	80069b0 <sbrk_aligned+0x38>
 80069ac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80069b0:	4620      	mov	r0, r4
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	20000300 	.word	0x20000300

080069b8 <_malloc_r>:
 80069b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069bc:	1ccd      	adds	r5, r1, #3
 80069be:	f025 0503 	bic.w	r5, r5, #3
 80069c2:	3508      	adds	r5, #8
 80069c4:	2d0c      	cmp	r5, #12
 80069c6:	bf38      	it	cc
 80069c8:	250c      	movcc	r5, #12
 80069ca:	2d00      	cmp	r5, #0
 80069cc:	4607      	mov	r7, r0
 80069ce:	db01      	blt.n	80069d4 <_malloc_r+0x1c>
 80069d0:	42a9      	cmp	r1, r5
 80069d2:	d905      	bls.n	80069e0 <_malloc_r+0x28>
 80069d4:	230c      	movs	r3, #12
 80069d6:	603b      	str	r3, [r7, #0]
 80069d8:	2600      	movs	r6, #0
 80069da:	4630      	mov	r0, r6
 80069dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069e0:	4e2e      	ldr	r6, [pc, #184]	; (8006a9c <_malloc_r+0xe4>)
 80069e2:	f000 fa25 	bl	8006e30 <__malloc_lock>
 80069e6:	6833      	ldr	r3, [r6, #0]
 80069e8:	461c      	mov	r4, r3
 80069ea:	bb34      	cbnz	r4, 8006a3a <_malloc_r+0x82>
 80069ec:	4629      	mov	r1, r5
 80069ee:	4638      	mov	r0, r7
 80069f0:	f7ff ffc2 	bl	8006978 <sbrk_aligned>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	4604      	mov	r4, r0
 80069f8:	d14d      	bne.n	8006a96 <_malloc_r+0xde>
 80069fa:	6834      	ldr	r4, [r6, #0]
 80069fc:	4626      	mov	r6, r4
 80069fe:	2e00      	cmp	r6, #0
 8006a00:	d140      	bne.n	8006a84 <_malloc_r+0xcc>
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	4631      	mov	r1, r6
 8006a06:	4638      	mov	r0, r7
 8006a08:	eb04 0803 	add.w	r8, r4, r3
 8006a0c:	f000 f9a4 	bl	8006d58 <_sbrk_r>
 8006a10:	4580      	cmp	r8, r0
 8006a12:	d13a      	bne.n	8006a8a <_malloc_r+0xd2>
 8006a14:	6821      	ldr	r1, [r4, #0]
 8006a16:	3503      	adds	r5, #3
 8006a18:	1a6d      	subs	r5, r5, r1
 8006a1a:	f025 0503 	bic.w	r5, r5, #3
 8006a1e:	3508      	adds	r5, #8
 8006a20:	2d0c      	cmp	r5, #12
 8006a22:	bf38      	it	cc
 8006a24:	250c      	movcc	r5, #12
 8006a26:	4629      	mov	r1, r5
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f7ff ffa5 	bl	8006978 <sbrk_aligned>
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d02b      	beq.n	8006a8a <_malloc_r+0xd2>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	442b      	add	r3, r5
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	e00e      	b.n	8006a58 <_malloc_r+0xa0>
 8006a3a:	6822      	ldr	r2, [r4, #0]
 8006a3c:	1b52      	subs	r2, r2, r5
 8006a3e:	d41e      	bmi.n	8006a7e <_malloc_r+0xc6>
 8006a40:	2a0b      	cmp	r2, #11
 8006a42:	d916      	bls.n	8006a72 <_malloc_r+0xba>
 8006a44:	1961      	adds	r1, r4, r5
 8006a46:	42a3      	cmp	r3, r4
 8006a48:	6025      	str	r5, [r4, #0]
 8006a4a:	bf18      	it	ne
 8006a4c:	6059      	strne	r1, [r3, #4]
 8006a4e:	6863      	ldr	r3, [r4, #4]
 8006a50:	bf08      	it	eq
 8006a52:	6031      	streq	r1, [r6, #0]
 8006a54:	5162      	str	r2, [r4, r5]
 8006a56:	604b      	str	r3, [r1, #4]
 8006a58:	4638      	mov	r0, r7
 8006a5a:	f104 060b 	add.w	r6, r4, #11
 8006a5e:	f000 f9ed 	bl	8006e3c <__malloc_unlock>
 8006a62:	f026 0607 	bic.w	r6, r6, #7
 8006a66:	1d23      	adds	r3, r4, #4
 8006a68:	1af2      	subs	r2, r6, r3
 8006a6a:	d0b6      	beq.n	80069da <_malloc_r+0x22>
 8006a6c:	1b9b      	subs	r3, r3, r6
 8006a6e:	50a3      	str	r3, [r4, r2]
 8006a70:	e7b3      	b.n	80069da <_malloc_r+0x22>
 8006a72:	6862      	ldr	r2, [r4, #4]
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	bf0c      	ite	eq
 8006a78:	6032      	streq	r2, [r6, #0]
 8006a7a:	605a      	strne	r2, [r3, #4]
 8006a7c:	e7ec      	b.n	8006a58 <_malloc_r+0xa0>
 8006a7e:	4623      	mov	r3, r4
 8006a80:	6864      	ldr	r4, [r4, #4]
 8006a82:	e7b2      	b.n	80069ea <_malloc_r+0x32>
 8006a84:	4634      	mov	r4, r6
 8006a86:	6876      	ldr	r6, [r6, #4]
 8006a88:	e7b9      	b.n	80069fe <_malloc_r+0x46>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	603b      	str	r3, [r7, #0]
 8006a8e:	4638      	mov	r0, r7
 8006a90:	f000 f9d4 	bl	8006e3c <__malloc_unlock>
 8006a94:	e7a1      	b.n	80069da <_malloc_r+0x22>
 8006a96:	6025      	str	r5, [r4, #0]
 8006a98:	e7de      	b.n	8006a58 <_malloc_r+0xa0>
 8006a9a:	bf00      	nop
 8006a9c:	200002fc 	.word	0x200002fc

08006aa0 <__ssputs_r>:
 8006aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa4:	688e      	ldr	r6, [r1, #8]
 8006aa6:	429e      	cmp	r6, r3
 8006aa8:	4682      	mov	sl, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	4690      	mov	r8, r2
 8006aae:	461f      	mov	r7, r3
 8006ab0:	d838      	bhi.n	8006b24 <__ssputs_r+0x84>
 8006ab2:	898a      	ldrh	r2, [r1, #12]
 8006ab4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006ab8:	d032      	beq.n	8006b20 <__ssputs_r+0x80>
 8006aba:	6825      	ldr	r5, [r4, #0]
 8006abc:	6909      	ldr	r1, [r1, #16]
 8006abe:	eba5 0901 	sub.w	r9, r5, r1
 8006ac2:	6965      	ldr	r5, [r4, #20]
 8006ac4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ac8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006acc:	3301      	adds	r3, #1
 8006ace:	444b      	add	r3, r9
 8006ad0:	106d      	asrs	r5, r5, #1
 8006ad2:	429d      	cmp	r5, r3
 8006ad4:	bf38      	it	cc
 8006ad6:	461d      	movcc	r5, r3
 8006ad8:	0553      	lsls	r3, r2, #21
 8006ada:	d531      	bpl.n	8006b40 <__ssputs_r+0xa0>
 8006adc:	4629      	mov	r1, r5
 8006ade:	f7ff ff6b 	bl	80069b8 <_malloc_r>
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	b950      	cbnz	r0, 8006afc <__ssputs_r+0x5c>
 8006ae6:	230c      	movs	r3, #12
 8006ae8:	f8ca 3000 	str.w	r3, [sl]
 8006aec:	89a3      	ldrh	r3, [r4, #12]
 8006aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006af2:	81a3      	strh	r3, [r4, #12]
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afc:	6921      	ldr	r1, [r4, #16]
 8006afe:	464a      	mov	r2, r9
 8006b00:	f7fe f82e 	bl	8004b60 <memcpy>
 8006b04:	89a3      	ldrh	r3, [r4, #12]
 8006b06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b0e:	81a3      	strh	r3, [r4, #12]
 8006b10:	6126      	str	r6, [r4, #16]
 8006b12:	6165      	str	r5, [r4, #20]
 8006b14:	444e      	add	r6, r9
 8006b16:	eba5 0509 	sub.w	r5, r5, r9
 8006b1a:	6026      	str	r6, [r4, #0]
 8006b1c:	60a5      	str	r5, [r4, #8]
 8006b1e:	463e      	mov	r6, r7
 8006b20:	42be      	cmp	r6, r7
 8006b22:	d900      	bls.n	8006b26 <__ssputs_r+0x86>
 8006b24:	463e      	mov	r6, r7
 8006b26:	6820      	ldr	r0, [r4, #0]
 8006b28:	4632      	mov	r2, r6
 8006b2a:	4641      	mov	r1, r8
 8006b2c:	f000 f966 	bl	8006dfc <memmove>
 8006b30:	68a3      	ldr	r3, [r4, #8]
 8006b32:	1b9b      	subs	r3, r3, r6
 8006b34:	60a3      	str	r3, [r4, #8]
 8006b36:	6823      	ldr	r3, [r4, #0]
 8006b38:	4433      	add	r3, r6
 8006b3a:	6023      	str	r3, [r4, #0]
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	e7db      	b.n	8006af8 <__ssputs_r+0x58>
 8006b40:	462a      	mov	r2, r5
 8006b42:	f000 f981 	bl	8006e48 <_realloc_r>
 8006b46:	4606      	mov	r6, r0
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	d1e1      	bne.n	8006b10 <__ssputs_r+0x70>
 8006b4c:	6921      	ldr	r1, [r4, #16]
 8006b4e:	4650      	mov	r0, sl
 8006b50:	f7ff fec6 	bl	80068e0 <_free_r>
 8006b54:	e7c7      	b.n	8006ae6 <__ssputs_r+0x46>
	...

08006b58 <_svfiprintf_r>:
 8006b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b5c:	4698      	mov	r8, r3
 8006b5e:	898b      	ldrh	r3, [r1, #12]
 8006b60:	061b      	lsls	r3, r3, #24
 8006b62:	b09d      	sub	sp, #116	; 0x74
 8006b64:	4607      	mov	r7, r0
 8006b66:	460d      	mov	r5, r1
 8006b68:	4614      	mov	r4, r2
 8006b6a:	d50e      	bpl.n	8006b8a <_svfiprintf_r+0x32>
 8006b6c:	690b      	ldr	r3, [r1, #16]
 8006b6e:	b963      	cbnz	r3, 8006b8a <_svfiprintf_r+0x32>
 8006b70:	2140      	movs	r1, #64	; 0x40
 8006b72:	f7ff ff21 	bl	80069b8 <_malloc_r>
 8006b76:	6028      	str	r0, [r5, #0]
 8006b78:	6128      	str	r0, [r5, #16]
 8006b7a:	b920      	cbnz	r0, 8006b86 <_svfiprintf_r+0x2e>
 8006b7c:	230c      	movs	r3, #12
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b84:	e0d1      	b.n	8006d2a <_svfiprintf_r+0x1d2>
 8006b86:	2340      	movs	r3, #64	; 0x40
 8006b88:	616b      	str	r3, [r5, #20]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b8e:	2320      	movs	r3, #32
 8006b90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b94:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b98:	2330      	movs	r3, #48	; 0x30
 8006b9a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d44 <_svfiprintf_r+0x1ec>
 8006b9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ba2:	f04f 0901 	mov.w	r9, #1
 8006ba6:	4623      	mov	r3, r4
 8006ba8:	469a      	mov	sl, r3
 8006baa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bae:	b10a      	cbz	r2, 8006bb4 <_svfiprintf_r+0x5c>
 8006bb0:	2a25      	cmp	r2, #37	; 0x25
 8006bb2:	d1f9      	bne.n	8006ba8 <_svfiprintf_r+0x50>
 8006bb4:	ebba 0b04 	subs.w	fp, sl, r4
 8006bb8:	d00b      	beq.n	8006bd2 <_svfiprintf_r+0x7a>
 8006bba:	465b      	mov	r3, fp
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	4629      	mov	r1, r5
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f7ff ff6d 	bl	8006aa0 <__ssputs_r>
 8006bc6:	3001      	adds	r0, #1
 8006bc8:	f000 80aa 	beq.w	8006d20 <_svfiprintf_r+0x1c8>
 8006bcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bce:	445a      	add	r2, fp
 8006bd0:	9209      	str	r2, [sp, #36]	; 0x24
 8006bd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f000 80a2 	beq.w	8006d20 <_svfiprintf_r+0x1c8>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006be2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006be6:	f10a 0a01 	add.w	sl, sl, #1
 8006bea:	9304      	str	r3, [sp, #16]
 8006bec:	9307      	str	r3, [sp, #28]
 8006bee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bf2:	931a      	str	r3, [sp, #104]	; 0x68
 8006bf4:	4654      	mov	r4, sl
 8006bf6:	2205      	movs	r2, #5
 8006bf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bfc:	4851      	ldr	r0, [pc, #324]	; (8006d44 <_svfiprintf_r+0x1ec>)
 8006bfe:	f7f9 faff 	bl	8000200 <memchr>
 8006c02:	9a04      	ldr	r2, [sp, #16]
 8006c04:	b9d8      	cbnz	r0, 8006c3e <_svfiprintf_r+0xe6>
 8006c06:	06d0      	lsls	r0, r2, #27
 8006c08:	bf44      	itt	mi
 8006c0a:	2320      	movmi	r3, #32
 8006c0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c10:	0711      	lsls	r1, r2, #28
 8006c12:	bf44      	itt	mi
 8006c14:	232b      	movmi	r3, #43	; 0x2b
 8006c16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c1e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c20:	d015      	beq.n	8006c4e <_svfiprintf_r+0xf6>
 8006c22:	9a07      	ldr	r2, [sp, #28]
 8006c24:	4654      	mov	r4, sl
 8006c26:	2000      	movs	r0, #0
 8006c28:	f04f 0c0a 	mov.w	ip, #10
 8006c2c:	4621      	mov	r1, r4
 8006c2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c32:	3b30      	subs	r3, #48	; 0x30
 8006c34:	2b09      	cmp	r3, #9
 8006c36:	d94e      	bls.n	8006cd6 <_svfiprintf_r+0x17e>
 8006c38:	b1b0      	cbz	r0, 8006c68 <_svfiprintf_r+0x110>
 8006c3a:	9207      	str	r2, [sp, #28]
 8006c3c:	e014      	b.n	8006c68 <_svfiprintf_r+0x110>
 8006c3e:	eba0 0308 	sub.w	r3, r0, r8
 8006c42:	fa09 f303 	lsl.w	r3, r9, r3
 8006c46:	4313      	orrs	r3, r2
 8006c48:	9304      	str	r3, [sp, #16]
 8006c4a:	46a2      	mov	sl, r4
 8006c4c:	e7d2      	b.n	8006bf4 <_svfiprintf_r+0x9c>
 8006c4e:	9b03      	ldr	r3, [sp, #12]
 8006c50:	1d19      	adds	r1, r3, #4
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	9103      	str	r1, [sp, #12]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	bfbb      	ittet	lt
 8006c5a:	425b      	neglt	r3, r3
 8006c5c:	f042 0202 	orrlt.w	r2, r2, #2
 8006c60:	9307      	strge	r3, [sp, #28]
 8006c62:	9307      	strlt	r3, [sp, #28]
 8006c64:	bfb8      	it	lt
 8006c66:	9204      	strlt	r2, [sp, #16]
 8006c68:	7823      	ldrb	r3, [r4, #0]
 8006c6a:	2b2e      	cmp	r3, #46	; 0x2e
 8006c6c:	d10c      	bne.n	8006c88 <_svfiprintf_r+0x130>
 8006c6e:	7863      	ldrb	r3, [r4, #1]
 8006c70:	2b2a      	cmp	r3, #42	; 0x2a
 8006c72:	d135      	bne.n	8006ce0 <_svfiprintf_r+0x188>
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	1d1a      	adds	r2, r3, #4
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	9203      	str	r2, [sp, #12]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	bfb8      	it	lt
 8006c80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006c84:	3402      	adds	r4, #2
 8006c86:	9305      	str	r3, [sp, #20]
 8006c88:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d54 <_svfiprintf_r+0x1fc>
 8006c8c:	7821      	ldrb	r1, [r4, #0]
 8006c8e:	2203      	movs	r2, #3
 8006c90:	4650      	mov	r0, sl
 8006c92:	f7f9 fab5 	bl	8000200 <memchr>
 8006c96:	b140      	cbz	r0, 8006caa <_svfiprintf_r+0x152>
 8006c98:	2340      	movs	r3, #64	; 0x40
 8006c9a:	eba0 000a 	sub.w	r0, r0, sl
 8006c9e:	fa03 f000 	lsl.w	r0, r3, r0
 8006ca2:	9b04      	ldr	r3, [sp, #16]
 8006ca4:	4303      	orrs	r3, r0
 8006ca6:	3401      	adds	r4, #1
 8006ca8:	9304      	str	r3, [sp, #16]
 8006caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cae:	4826      	ldr	r0, [pc, #152]	; (8006d48 <_svfiprintf_r+0x1f0>)
 8006cb0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cb4:	2206      	movs	r2, #6
 8006cb6:	f7f9 faa3 	bl	8000200 <memchr>
 8006cba:	2800      	cmp	r0, #0
 8006cbc:	d038      	beq.n	8006d30 <_svfiprintf_r+0x1d8>
 8006cbe:	4b23      	ldr	r3, [pc, #140]	; (8006d4c <_svfiprintf_r+0x1f4>)
 8006cc0:	bb1b      	cbnz	r3, 8006d0a <_svfiprintf_r+0x1b2>
 8006cc2:	9b03      	ldr	r3, [sp, #12]
 8006cc4:	3307      	adds	r3, #7
 8006cc6:	f023 0307 	bic.w	r3, r3, #7
 8006cca:	3308      	adds	r3, #8
 8006ccc:	9303      	str	r3, [sp, #12]
 8006cce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cd0:	4433      	add	r3, r6
 8006cd2:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd4:	e767      	b.n	8006ba6 <_svfiprintf_r+0x4e>
 8006cd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cda:	460c      	mov	r4, r1
 8006cdc:	2001      	movs	r0, #1
 8006cde:	e7a5      	b.n	8006c2c <_svfiprintf_r+0xd4>
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	3401      	adds	r4, #1
 8006ce4:	9305      	str	r3, [sp, #20]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f04f 0c0a 	mov.w	ip, #10
 8006cec:	4620      	mov	r0, r4
 8006cee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cf2:	3a30      	subs	r2, #48	; 0x30
 8006cf4:	2a09      	cmp	r2, #9
 8006cf6:	d903      	bls.n	8006d00 <_svfiprintf_r+0x1a8>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d0c5      	beq.n	8006c88 <_svfiprintf_r+0x130>
 8006cfc:	9105      	str	r1, [sp, #20]
 8006cfe:	e7c3      	b.n	8006c88 <_svfiprintf_r+0x130>
 8006d00:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d04:	4604      	mov	r4, r0
 8006d06:	2301      	movs	r3, #1
 8006d08:	e7f0      	b.n	8006cec <_svfiprintf_r+0x194>
 8006d0a:	ab03      	add	r3, sp, #12
 8006d0c:	9300      	str	r3, [sp, #0]
 8006d0e:	462a      	mov	r2, r5
 8006d10:	4b0f      	ldr	r3, [pc, #60]	; (8006d50 <_svfiprintf_r+0x1f8>)
 8006d12:	a904      	add	r1, sp, #16
 8006d14:	4638      	mov	r0, r7
 8006d16:	f7fd ffd9 	bl	8004ccc <_printf_float>
 8006d1a:	1c42      	adds	r2, r0, #1
 8006d1c:	4606      	mov	r6, r0
 8006d1e:	d1d6      	bne.n	8006cce <_svfiprintf_r+0x176>
 8006d20:	89ab      	ldrh	r3, [r5, #12]
 8006d22:	065b      	lsls	r3, r3, #25
 8006d24:	f53f af2c 	bmi.w	8006b80 <_svfiprintf_r+0x28>
 8006d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d2a:	b01d      	add	sp, #116	; 0x74
 8006d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d30:	ab03      	add	r3, sp, #12
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	462a      	mov	r2, r5
 8006d36:	4b06      	ldr	r3, [pc, #24]	; (8006d50 <_svfiprintf_r+0x1f8>)
 8006d38:	a904      	add	r1, sp, #16
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	f7fe fa6a 	bl	8005214 <_printf_i>
 8006d40:	e7eb      	b.n	8006d1a <_svfiprintf_r+0x1c2>
 8006d42:	bf00      	nop
 8006d44:	08007dbc 	.word	0x08007dbc
 8006d48:	08007dc6 	.word	0x08007dc6
 8006d4c:	08004ccd 	.word	0x08004ccd
 8006d50:	08006aa1 	.word	0x08006aa1
 8006d54:	08007dc2 	.word	0x08007dc2

08006d58 <_sbrk_r>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4d06      	ldr	r5, [pc, #24]	; (8006d74 <_sbrk_r+0x1c>)
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	4604      	mov	r4, r0
 8006d60:	4608      	mov	r0, r1
 8006d62:	602b      	str	r3, [r5, #0]
 8006d64:	f7fa ffae 	bl	8001cc4 <_sbrk>
 8006d68:	1c43      	adds	r3, r0, #1
 8006d6a:	d102      	bne.n	8006d72 <_sbrk_r+0x1a>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	b103      	cbz	r3, 8006d72 <_sbrk_r+0x1a>
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	bd38      	pop	{r3, r4, r5, pc}
 8006d74:	20000304 	.word	0x20000304

08006d78 <__assert_func>:
 8006d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006d7a:	4614      	mov	r4, r2
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	4b09      	ldr	r3, [pc, #36]	; (8006da4 <__assert_func+0x2c>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4605      	mov	r5, r0
 8006d84:	68d8      	ldr	r0, [r3, #12]
 8006d86:	b14c      	cbz	r4, 8006d9c <__assert_func+0x24>
 8006d88:	4b07      	ldr	r3, [pc, #28]	; (8006da8 <__assert_func+0x30>)
 8006d8a:	9100      	str	r1, [sp, #0]
 8006d8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006d90:	4906      	ldr	r1, [pc, #24]	; (8006dac <__assert_func+0x34>)
 8006d92:	462b      	mov	r3, r5
 8006d94:	f000 f80e 	bl	8006db4 <fiprintf>
 8006d98:	f000 faac 	bl	80072f4 <abort>
 8006d9c:	4b04      	ldr	r3, [pc, #16]	; (8006db0 <__assert_func+0x38>)
 8006d9e:	461c      	mov	r4, r3
 8006da0:	e7f3      	b.n	8006d8a <__assert_func+0x12>
 8006da2:	bf00      	nop
 8006da4:	2000001c 	.word	0x2000001c
 8006da8:	08007dcd 	.word	0x08007dcd
 8006dac:	08007dda 	.word	0x08007dda
 8006db0:	08007e08 	.word	0x08007e08

08006db4 <fiprintf>:
 8006db4:	b40e      	push	{r1, r2, r3}
 8006db6:	b503      	push	{r0, r1, lr}
 8006db8:	4601      	mov	r1, r0
 8006dba:	ab03      	add	r3, sp, #12
 8006dbc:	4805      	ldr	r0, [pc, #20]	; (8006dd4 <fiprintf+0x20>)
 8006dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8006dc2:	6800      	ldr	r0, [r0, #0]
 8006dc4:	9301      	str	r3, [sp, #4]
 8006dc6:	f000 f897 	bl	8006ef8 <_vfiprintf_r>
 8006dca:	b002      	add	sp, #8
 8006dcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dd0:	b003      	add	sp, #12
 8006dd2:	4770      	bx	lr
 8006dd4:	2000001c 	.word	0x2000001c

08006dd8 <__ascii_mbtowc>:
 8006dd8:	b082      	sub	sp, #8
 8006dda:	b901      	cbnz	r1, 8006dde <__ascii_mbtowc+0x6>
 8006ddc:	a901      	add	r1, sp, #4
 8006dde:	b142      	cbz	r2, 8006df2 <__ascii_mbtowc+0x1a>
 8006de0:	b14b      	cbz	r3, 8006df6 <__ascii_mbtowc+0x1e>
 8006de2:	7813      	ldrb	r3, [r2, #0]
 8006de4:	600b      	str	r3, [r1, #0]
 8006de6:	7812      	ldrb	r2, [r2, #0]
 8006de8:	1e10      	subs	r0, r2, #0
 8006dea:	bf18      	it	ne
 8006dec:	2001      	movne	r0, #1
 8006dee:	b002      	add	sp, #8
 8006df0:	4770      	bx	lr
 8006df2:	4610      	mov	r0, r2
 8006df4:	e7fb      	b.n	8006dee <__ascii_mbtowc+0x16>
 8006df6:	f06f 0001 	mvn.w	r0, #1
 8006dfa:	e7f8      	b.n	8006dee <__ascii_mbtowc+0x16>

08006dfc <memmove>:
 8006dfc:	4288      	cmp	r0, r1
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	eb01 0402 	add.w	r4, r1, r2
 8006e04:	d902      	bls.n	8006e0c <memmove+0x10>
 8006e06:	4284      	cmp	r4, r0
 8006e08:	4623      	mov	r3, r4
 8006e0a:	d807      	bhi.n	8006e1c <memmove+0x20>
 8006e0c:	1e43      	subs	r3, r0, #1
 8006e0e:	42a1      	cmp	r1, r4
 8006e10:	d008      	beq.n	8006e24 <memmove+0x28>
 8006e12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e1a:	e7f8      	b.n	8006e0e <memmove+0x12>
 8006e1c:	4402      	add	r2, r0
 8006e1e:	4601      	mov	r1, r0
 8006e20:	428a      	cmp	r2, r1
 8006e22:	d100      	bne.n	8006e26 <memmove+0x2a>
 8006e24:	bd10      	pop	{r4, pc}
 8006e26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e2e:	e7f7      	b.n	8006e20 <memmove+0x24>

08006e30 <__malloc_lock>:
 8006e30:	4801      	ldr	r0, [pc, #4]	; (8006e38 <__malloc_lock+0x8>)
 8006e32:	f000 bc1f 	b.w	8007674 <__retarget_lock_acquire_recursive>
 8006e36:	bf00      	nop
 8006e38:	20000308 	.word	0x20000308

08006e3c <__malloc_unlock>:
 8006e3c:	4801      	ldr	r0, [pc, #4]	; (8006e44 <__malloc_unlock+0x8>)
 8006e3e:	f000 bc1a 	b.w	8007676 <__retarget_lock_release_recursive>
 8006e42:	bf00      	nop
 8006e44:	20000308 	.word	0x20000308

08006e48 <_realloc_r>:
 8006e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e4c:	4680      	mov	r8, r0
 8006e4e:	4614      	mov	r4, r2
 8006e50:	460e      	mov	r6, r1
 8006e52:	b921      	cbnz	r1, 8006e5e <_realloc_r+0x16>
 8006e54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e58:	4611      	mov	r1, r2
 8006e5a:	f7ff bdad 	b.w	80069b8 <_malloc_r>
 8006e5e:	b92a      	cbnz	r2, 8006e6c <_realloc_r+0x24>
 8006e60:	f7ff fd3e 	bl	80068e0 <_free_r>
 8006e64:	4625      	mov	r5, r4
 8006e66:	4628      	mov	r0, r5
 8006e68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e6c:	f000 fc6a 	bl	8007744 <_malloc_usable_size_r>
 8006e70:	4284      	cmp	r4, r0
 8006e72:	4607      	mov	r7, r0
 8006e74:	d802      	bhi.n	8006e7c <_realloc_r+0x34>
 8006e76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006e7a:	d812      	bhi.n	8006ea2 <_realloc_r+0x5a>
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4640      	mov	r0, r8
 8006e80:	f7ff fd9a 	bl	80069b8 <_malloc_r>
 8006e84:	4605      	mov	r5, r0
 8006e86:	2800      	cmp	r0, #0
 8006e88:	d0ed      	beq.n	8006e66 <_realloc_r+0x1e>
 8006e8a:	42bc      	cmp	r4, r7
 8006e8c:	4622      	mov	r2, r4
 8006e8e:	4631      	mov	r1, r6
 8006e90:	bf28      	it	cs
 8006e92:	463a      	movcs	r2, r7
 8006e94:	f7fd fe64 	bl	8004b60 <memcpy>
 8006e98:	4631      	mov	r1, r6
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	f7ff fd20 	bl	80068e0 <_free_r>
 8006ea0:	e7e1      	b.n	8006e66 <_realloc_r+0x1e>
 8006ea2:	4635      	mov	r5, r6
 8006ea4:	e7df      	b.n	8006e66 <_realloc_r+0x1e>

08006ea6 <__sfputc_r>:
 8006ea6:	6893      	ldr	r3, [r2, #8]
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	b410      	push	{r4}
 8006eae:	6093      	str	r3, [r2, #8]
 8006eb0:	da08      	bge.n	8006ec4 <__sfputc_r+0x1e>
 8006eb2:	6994      	ldr	r4, [r2, #24]
 8006eb4:	42a3      	cmp	r3, r4
 8006eb6:	db01      	blt.n	8006ebc <__sfputc_r+0x16>
 8006eb8:	290a      	cmp	r1, #10
 8006eba:	d103      	bne.n	8006ec4 <__sfputc_r+0x1e>
 8006ebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ec0:	f000 b94a 	b.w	8007158 <__swbuf_r>
 8006ec4:	6813      	ldr	r3, [r2, #0]
 8006ec6:	1c58      	adds	r0, r3, #1
 8006ec8:	6010      	str	r0, [r2, #0]
 8006eca:	7019      	strb	r1, [r3, #0]
 8006ecc:	4608      	mov	r0, r1
 8006ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <__sfputs_r>:
 8006ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ed6:	4606      	mov	r6, r0
 8006ed8:	460f      	mov	r7, r1
 8006eda:	4614      	mov	r4, r2
 8006edc:	18d5      	adds	r5, r2, r3
 8006ede:	42ac      	cmp	r4, r5
 8006ee0:	d101      	bne.n	8006ee6 <__sfputs_r+0x12>
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	e007      	b.n	8006ef6 <__sfputs_r+0x22>
 8006ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eea:	463a      	mov	r2, r7
 8006eec:	4630      	mov	r0, r6
 8006eee:	f7ff ffda 	bl	8006ea6 <__sfputc_r>
 8006ef2:	1c43      	adds	r3, r0, #1
 8006ef4:	d1f3      	bne.n	8006ede <__sfputs_r+0xa>
 8006ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006ef8 <_vfiprintf_r>:
 8006ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efc:	460d      	mov	r5, r1
 8006efe:	b09d      	sub	sp, #116	; 0x74
 8006f00:	4614      	mov	r4, r2
 8006f02:	4698      	mov	r8, r3
 8006f04:	4606      	mov	r6, r0
 8006f06:	b118      	cbz	r0, 8006f10 <_vfiprintf_r+0x18>
 8006f08:	6983      	ldr	r3, [r0, #24]
 8006f0a:	b90b      	cbnz	r3, 8006f10 <_vfiprintf_r+0x18>
 8006f0c:	f000 fb14 	bl	8007538 <__sinit>
 8006f10:	4b89      	ldr	r3, [pc, #548]	; (8007138 <_vfiprintf_r+0x240>)
 8006f12:	429d      	cmp	r5, r3
 8006f14:	d11b      	bne.n	8006f4e <_vfiprintf_r+0x56>
 8006f16:	6875      	ldr	r5, [r6, #4]
 8006f18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f1a:	07d9      	lsls	r1, r3, #31
 8006f1c:	d405      	bmi.n	8006f2a <_vfiprintf_r+0x32>
 8006f1e:	89ab      	ldrh	r3, [r5, #12]
 8006f20:	059a      	lsls	r2, r3, #22
 8006f22:	d402      	bmi.n	8006f2a <_vfiprintf_r+0x32>
 8006f24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f26:	f000 fba5 	bl	8007674 <__retarget_lock_acquire_recursive>
 8006f2a:	89ab      	ldrh	r3, [r5, #12]
 8006f2c:	071b      	lsls	r3, r3, #28
 8006f2e:	d501      	bpl.n	8006f34 <_vfiprintf_r+0x3c>
 8006f30:	692b      	ldr	r3, [r5, #16]
 8006f32:	b9eb      	cbnz	r3, 8006f70 <_vfiprintf_r+0x78>
 8006f34:	4629      	mov	r1, r5
 8006f36:	4630      	mov	r0, r6
 8006f38:	f000 f96e 	bl	8007218 <__swsetup_r>
 8006f3c:	b1c0      	cbz	r0, 8006f70 <_vfiprintf_r+0x78>
 8006f3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f40:	07dc      	lsls	r4, r3, #31
 8006f42:	d50e      	bpl.n	8006f62 <_vfiprintf_r+0x6a>
 8006f44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f48:	b01d      	add	sp, #116	; 0x74
 8006f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4e:	4b7b      	ldr	r3, [pc, #492]	; (800713c <_vfiprintf_r+0x244>)
 8006f50:	429d      	cmp	r5, r3
 8006f52:	d101      	bne.n	8006f58 <_vfiprintf_r+0x60>
 8006f54:	68b5      	ldr	r5, [r6, #8]
 8006f56:	e7df      	b.n	8006f18 <_vfiprintf_r+0x20>
 8006f58:	4b79      	ldr	r3, [pc, #484]	; (8007140 <_vfiprintf_r+0x248>)
 8006f5a:	429d      	cmp	r5, r3
 8006f5c:	bf08      	it	eq
 8006f5e:	68f5      	ldreq	r5, [r6, #12]
 8006f60:	e7da      	b.n	8006f18 <_vfiprintf_r+0x20>
 8006f62:	89ab      	ldrh	r3, [r5, #12]
 8006f64:	0598      	lsls	r0, r3, #22
 8006f66:	d4ed      	bmi.n	8006f44 <_vfiprintf_r+0x4c>
 8006f68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f6a:	f000 fb84 	bl	8007676 <__retarget_lock_release_recursive>
 8006f6e:	e7e9      	b.n	8006f44 <_vfiprintf_r+0x4c>
 8006f70:	2300      	movs	r3, #0
 8006f72:	9309      	str	r3, [sp, #36]	; 0x24
 8006f74:	2320      	movs	r3, #32
 8006f76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f7e:	2330      	movs	r3, #48	; 0x30
 8006f80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007144 <_vfiprintf_r+0x24c>
 8006f84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f88:	f04f 0901 	mov.w	r9, #1
 8006f8c:	4623      	mov	r3, r4
 8006f8e:	469a      	mov	sl, r3
 8006f90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f94:	b10a      	cbz	r2, 8006f9a <_vfiprintf_r+0xa2>
 8006f96:	2a25      	cmp	r2, #37	; 0x25
 8006f98:	d1f9      	bne.n	8006f8e <_vfiprintf_r+0x96>
 8006f9a:	ebba 0b04 	subs.w	fp, sl, r4
 8006f9e:	d00b      	beq.n	8006fb8 <_vfiprintf_r+0xc0>
 8006fa0:	465b      	mov	r3, fp
 8006fa2:	4622      	mov	r2, r4
 8006fa4:	4629      	mov	r1, r5
 8006fa6:	4630      	mov	r0, r6
 8006fa8:	f7ff ff94 	bl	8006ed4 <__sfputs_r>
 8006fac:	3001      	adds	r0, #1
 8006fae:	f000 80aa 	beq.w	8007106 <_vfiprintf_r+0x20e>
 8006fb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fb4:	445a      	add	r2, fp
 8006fb6:	9209      	str	r2, [sp, #36]	; 0x24
 8006fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f000 80a2 	beq.w	8007106 <_vfiprintf_r+0x20e>
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fcc:	f10a 0a01 	add.w	sl, sl, #1
 8006fd0:	9304      	str	r3, [sp, #16]
 8006fd2:	9307      	str	r3, [sp, #28]
 8006fd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fd8:	931a      	str	r3, [sp, #104]	; 0x68
 8006fda:	4654      	mov	r4, sl
 8006fdc:	2205      	movs	r2, #5
 8006fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fe2:	4858      	ldr	r0, [pc, #352]	; (8007144 <_vfiprintf_r+0x24c>)
 8006fe4:	f7f9 f90c 	bl	8000200 <memchr>
 8006fe8:	9a04      	ldr	r2, [sp, #16]
 8006fea:	b9d8      	cbnz	r0, 8007024 <_vfiprintf_r+0x12c>
 8006fec:	06d1      	lsls	r1, r2, #27
 8006fee:	bf44      	itt	mi
 8006ff0:	2320      	movmi	r3, #32
 8006ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ff6:	0713      	lsls	r3, r2, #28
 8006ff8:	bf44      	itt	mi
 8006ffa:	232b      	movmi	r3, #43	; 0x2b
 8006ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007000:	f89a 3000 	ldrb.w	r3, [sl]
 8007004:	2b2a      	cmp	r3, #42	; 0x2a
 8007006:	d015      	beq.n	8007034 <_vfiprintf_r+0x13c>
 8007008:	9a07      	ldr	r2, [sp, #28]
 800700a:	4654      	mov	r4, sl
 800700c:	2000      	movs	r0, #0
 800700e:	f04f 0c0a 	mov.w	ip, #10
 8007012:	4621      	mov	r1, r4
 8007014:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007018:	3b30      	subs	r3, #48	; 0x30
 800701a:	2b09      	cmp	r3, #9
 800701c:	d94e      	bls.n	80070bc <_vfiprintf_r+0x1c4>
 800701e:	b1b0      	cbz	r0, 800704e <_vfiprintf_r+0x156>
 8007020:	9207      	str	r2, [sp, #28]
 8007022:	e014      	b.n	800704e <_vfiprintf_r+0x156>
 8007024:	eba0 0308 	sub.w	r3, r0, r8
 8007028:	fa09 f303 	lsl.w	r3, r9, r3
 800702c:	4313      	orrs	r3, r2
 800702e:	9304      	str	r3, [sp, #16]
 8007030:	46a2      	mov	sl, r4
 8007032:	e7d2      	b.n	8006fda <_vfiprintf_r+0xe2>
 8007034:	9b03      	ldr	r3, [sp, #12]
 8007036:	1d19      	adds	r1, r3, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	9103      	str	r1, [sp, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	bfbb      	ittet	lt
 8007040:	425b      	neglt	r3, r3
 8007042:	f042 0202 	orrlt.w	r2, r2, #2
 8007046:	9307      	strge	r3, [sp, #28]
 8007048:	9307      	strlt	r3, [sp, #28]
 800704a:	bfb8      	it	lt
 800704c:	9204      	strlt	r2, [sp, #16]
 800704e:	7823      	ldrb	r3, [r4, #0]
 8007050:	2b2e      	cmp	r3, #46	; 0x2e
 8007052:	d10c      	bne.n	800706e <_vfiprintf_r+0x176>
 8007054:	7863      	ldrb	r3, [r4, #1]
 8007056:	2b2a      	cmp	r3, #42	; 0x2a
 8007058:	d135      	bne.n	80070c6 <_vfiprintf_r+0x1ce>
 800705a:	9b03      	ldr	r3, [sp, #12]
 800705c:	1d1a      	adds	r2, r3, #4
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	9203      	str	r2, [sp, #12]
 8007062:	2b00      	cmp	r3, #0
 8007064:	bfb8      	it	lt
 8007066:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800706a:	3402      	adds	r4, #2
 800706c:	9305      	str	r3, [sp, #20]
 800706e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007154 <_vfiprintf_r+0x25c>
 8007072:	7821      	ldrb	r1, [r4, #0]
 8007074:	2203      	movs	r2, #3
 8007076:	4650      	mov	r0, sl
 8007078:	f7f9 f8c2 	bl	8000200 <memchr>
 800707c:	b140      	cbz	r0, 8007090 <_vfiprintf_r+0x198>
 800707e:	2340      	movs	r3, #64	; 0x40
 8007080:	eba0 000a 	sub.w	r0, r0, sl
 8007084:	fa03 f000 	lsl.w	r0, r3, r0
 8007088:	9b04      	ldr	r3, [sp, #16]
 800708a:	4303      	orrs	r3, r0
 800708c:	3401      	adds	r4, #1
 800708e:	9304      	str	r3, [sp, #16]
 8007090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007094:	482c      	ldr	r0, [pc, #176]	; (8007148 <_vfiprintf_r+0x250>)
 8007096:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800709a:	2206      	movs	r2, #6
 800709c:	f7f9 f8b0 	bl	8000200 <memchr>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d03f      	beq.n	8007124 <_vfiprintf_r+0x22c>
 80070a4:	4b29      	ldr	r3, [pc, #164]	; (800714c <_vfiprintf_r+0x254>)
 80070a6:	bb1b      	cbnz	r3, 80070f0 <_vfiprintf_r+0x1f8>
 80070a8:	9b03      	ldr	r3, [sp, #12]
 80070aa:	3307      	adds	r3, #7
 80070ac:	f023 0307 	bic.w	r3, r3, #7
 80070b0:	3308      	adds	r3, #8
 80070b2:	9303      	str	r3, [sp, #12]
 80070b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b6:	443b      	add	r3, r7
 80070b8:	9309      	str	r3, [sp, #36]	; 0x24
 80070ba:	e767      	b.n	8006f8c <_vfiprintf_r+0x94>
 80070bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80070c0:	460c      	mov	r4, r1
 80070c2:	2001      	movs	r0, #1
 80070c4:	e7a5      	b.n	8007012 <_vfiprintf_r+0x11a>
 80070c6:	2300      	movs	r3, #0
 80070c8:	3401      	adds	r4, #1
 80070ca:	9305      	str	r3, [sp, #20]
 80070cc:	4619      	mov	r1, r3
 80070ce:	f04f 0c0a 	mov.w	ip, #10
 80070d2:	4620      	mov	r0, r4
 80070d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070d8:	3a30      	subs	r2, #48	; 0x30
 80070da:	2a09      	cmp	r2, #9
 80070dc:	d903      	bls.n	80070e6 <_vfiprintf_r+0x1ee>
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0c5      	beq.n	800706e <_vfiprintf_r+0x176>
 80070e2:	9105      	str	r1, [sp, #20]
 80070e4:	e7c3      	b.n	800706e <_vfiprintf_r+0x176>
 80070e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80070ea:	4604      	mov	r4, r0
 80070ec:	2301      	movs	r3, #1
 80070ee:	e7f0      	b.n	80070d2 <_vfiprintf_r+0x1da>
 80070f0:	ab03      	add	r3, sp, #12
 80070f2:	9300      	str	r3, [sp, #0]
 80070f4:	462a      	mov	r2, r5
 80070f6:	4b16      	ldr	r3, [pc, #88]	; (8007150 <_vfiprintf_r+0x258>)
 80070f8:	a904      	add	r1, sp, #16
 80070fa:	4630      	mov	r0, r6
 80070fc:	f7fd fde6 	bl	8004ccc <_printf_float>
 8007100:	4607      	mov	r7, r0
 8007102:	1c78      	adds	r0, r7, #1
 8007104:	d1d6      	bne.n	80070b4 <_vfiprintf_r+0x1bc>
 8007106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007108:	07d9      	lsls	r1, r3, #31
 800710a:	d405      	bmi.n	8007118 <_vfiprintf_r+0x220>
 800710c:	89ab      	ldrh	r3, [r5, #12]
 800710e:	059a      	lsls	r2, r3, #22
 8007110:	d402      	bmi.n	8007118 <_vfiprintf_r+0x220>
 8007112:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007114:	f000 faaf 	bl	8007676 <__retarget_lock_release_recursive>
 8007118:	89ab      	ldrh	r3, [r5, #12]
 800711a:	065b      	lsls	r3, r3, #25
 800711c:	f53f af12 	bmi.w	8006f44 <_vfiprintf_r+0x4c>
 8007120:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007122:	e711      	b.n	8006f48 <_vfiprintf_r+0x50>
 8007124:	ab03      	add	r3, sp, #12
 8007126:	9300      	str	r3, [sp, #0]
 8007128:	462a      	mov	r2, r5
 800712a:	4b09      	ldr	r3, [pc, #36]	; (8007150 <_vfiprintf_r+0x258>)
 800712c:	a904      	add	r1, sp, #16
 800712e:	4630      	mov	r0, r6
 8007130:	f7fe f870 	bl	8005214 <_printf_i>
 8007134:	e7e4      	b.n	8007100 <_vfiprintf_r+0x208>
 8007136:	bf00      	nop
 8007138:	08007f34 	.word	0x08007f34
 800713c:	08007f54 	.word	0x08007f54
 8007140:	08007f14 	.word	0x08007f14
 8007144:	08007dbc 	.word	0x08007dbc
 8007148:	08007dc6 	.word	0x08007dc6
 800714c:	08004ccd 	.word	0x08004ccd
 8007150:	08006ed5 	.word	0x08006ed5
 8007154:	08007dc2 	.word	0x08007dc2

08007158 <__swbuf_r>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	460e      	mov	r6, r1
 800715c:	4614      	mov	r4, r2
 800715e:	4605      	mov	r5, r0
 8007160:	b118      	cbz	r0, 800716a <__swbuf_r+0x12>
 8007162:	6983      	ldr	r3, [r0, #24]
 8007164:	b90b      	cbnz	r3, 800716a <__swbuf_r+0x12>
 8007166:	f000 f9e7 	bl	8007538 <__sinit>
 800716a:	4b21      	ldr	r3, [pc, #132]	; (80071f0 <__swbuf_r+0x98>)
 800716c:	429c      	cmp	r4, r3
 800716e:	d12b      	bne.n	80071c8 <__swbuf_r+0x70>
 8007170:	686c      	ldr	r4, [r5, #4]
 8007172:	69a3      	ldr	r3, [r4, #24]
 8007174:	60a3      	str	r3, [r4, #8]
 8007176:	89a3      	ldrh	r3, [r4, #12]
 8007178:	071a      	lsls	r2, r3, #28
 800717a:	d52f      	bpl.n	80071dc <__swbuf_r+0x84>
 800717c:	6923      	ldr	r3, [r4, #16]
 800717e:	b36b      	cbz	r3, 80071dc <__swbuf_r+0x84>
 8007180:	6923      	ldr	r3, [r4, #16]
 8007182:	6820      	ldr	r0, [r4, #0]
 8007184:	1ac0      	subs	r0, r0, r3
 8007186:	6963      	ldr	r3, [r4, #20]
 8007188:	b2f6      	uxtb	r6, r6
 800718a:	4283      	cmp	r3, r0
 800718c:	4637      	mov	r7, r6
 800718e:	dc04      	bgt.n	800719a <__swbuf_r+0x42>
 8007190:	4621      	mov	r1, r4
 8007192:	4628      	mov	r0, r5
 8007194:	f000 f93c 	bl	8007410 <_fflush_r>
 8007198:	bb30      	cbnz	r0, 80071e8 <__swbuf_r+0x90>
 800719a:	68a3      	ldr	r3, [r4, #8]
 800719c:	3b01      	subs	r3, #1
 800719e:	60a3      	str	r3, [r4, #8]
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	6022      	str	r2, [r4, #0]
 80071a6:	701e      	strb	r6, [r3, #0]
 80071a8:	6963      	ldr	r3, [r4, #20]
 80071aa:	3001      	adds	r0, #1
 80071ac:	4283      	cmp	r3, r0
 80071ae:	d004      	beq.n	80071ba <__swbuf_r+0x62>
 80071b0:	89a3      	ldrh	r3, [r4, #12]
 80071b2:	07db      	lsls	r3, r3, #31
 80071b4:	d506      	bpl.n	80071c4 <__swbuf_r+0x6c>
 80071b6:	2e0a      	cmp	r6, #10
 80071b8:	d104      	bne.n	80071c4 <__swbuf_r+0x6c>
 80071ba:	4621      	mov	r1, r4
 80071bc:	4628      	mov	r0, r5
 80071be:	f000 f927 	bl	8007410 <_fflush_r>
 80071c2:	b988      	cbnz	r0, 80071e8 <__swbuf_r+0x90>
 80071c4:	4638      	mov	r0, r7
 80071c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c8:	4b0a      	ldr	r3, [pc, #40]	; (80071f4 <__swbuf_r+0x9c>)
 80071ca:	429c      	cmp	r4, r3
 80071cc:	d101      	bne.n	80071d2 <__swbuf_r+0x7a>
 80071ce:	68ac      	ldr	r4, [r5, #8]
 80071d0:	e7cf      	b.n	8007172 <__swbuf_r+0x1a>
 80071d2:	4b09      	ldr	r3, [pc, #36]	; (80071f8 <__swbuf_r+0xa0>)
 80071d4:	429c      	cmp	r4, r3
 80071d6:	bf08      	it	eq
 80071d8:	68ec      	ldreq	r4, [r5, #12]
 80071da:	e7ca      	b.n	8007172 <__swbuf_r+0x1a>
 80071dc:	4621      	mov	r1, r4
 80071de:	4628      	mov	r0, r5
 80071e0:	f000 f81a 	bl	8007218 <__swsetup_r>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d0cb      	beq.n	8007180 <__swbuf_r+0x28>
 80071e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80071ec:	e7ea      	b.n	80071c4 <__swbuf_r+0x6c>
 80071ee:	bf00      	nop
 80071f0:	08007f34 	.word	0x08007f34
 80071f4:	08007f54 	.word	0x08007f54
 80071f8:	08007f14 	.word	0x08007f14

080071fc <__ascii_wctomb>:
 80071fc:	b149      	cbz	r1, 8007212 <__ascii_wctomb+0x16>
 80071fe:	2aff      	cmp	r2, #255	; 0xff
 8007200:	bf85      	ittet	hi
 8007202:	238a      	movhi	r3, #138	; 0x8a
 8007204:	6003      	strhi	r3, [r0, #0]
 8007206:	700a      	strbls	r2, [r1, #0]
 8007208:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800720c:	bf98      	it	ls
 800720e:	2001      	movls	r0, #1
 8007210:	4770      	bx	lr
 8007212:	4608      	mov	r0, r1
 8007214:	4770      	bx	lr
	...

08007218 <__swsetup_r>:
 8007218:	4b32      	ldr	r3, [pc, #200]	; (80072e4 <__swsetup_r+0xcc>)
 800721a:	b570      	push	{r4, r5, r6, lr}
 800721c:	681d      	ldr	r5, [r3, #0]
 800721e:	4606      	mov	r6, r0
 8007220:	460c      	mov	r4, r1
 8007222:	b125      	cbz	r5, 800722e <__swsetup_r+0x16>
 8007224:	69ab      	ldr	r3, [r5, #24]
 8007226:	b913      	cbnz	r3, 800722e <__swsetup_r+0x16>
 8007228:	4628      	mov	r0, r5
 800722a:	f000 f985 	bl	8007538 <__sinit>
 800722e:	4b2e      	ldr	r3, [pc, #184]	; (80072e8 <__swsetup_r+0xd0>)
 8007230:	429c      	cmp	r4, r3
 8007232:	d10f      	bne.n	8007254 <__swsetup_r+0x3c>
 8007234:	686c      	ldr	r4, [r5, #4]
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800723c:	0719      	lsls	r1, r3, #28
 800723e:	d42c      	bmi.n	800729a <__swsetup_r+0x82>
 8007240:	06dd      	lsls	r5, r3, #27
 8007242:	d411      	bmi.n	8007268 <__swsetup_r+0x50>
 8007244:	2309      	movs	r3, #9
 8007246:	6033      	str	r3, [r6, #0]
 8007248:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800724c:	81a3      	strh	r3, [r4, #12]
 800724e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007252:	e03e      	b.n	80072d2 <__swsetup_r+0xba>
 8007254:	4b25      	ldr	r3, [pc, #148]	; (80072ec <__swsetup_r+0xd4>)
 8007256:	429c      	cmp	r4, r3
 8007258:	d101      	bne.n	800725e <__swsetup_r+0x46>
 800725a:	68ac      	ldr	r4, [r5, #8]
 800725c:	e7eb      	b.n	8007236 <__swsetup_r+0x1e>
 800725e:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <__swsetup_r+0xd8>)
 8007260:	429c      	cmp	r4, r3
 8007262:	bf08      	it	eq
 8007264:	68ec      	ldreq	r4, [r5, #12]
 8007266:	e7e6      	b.n	8007236 <__swsetup_r+0x1e>
 8007268:	0758      	lsls	r0, r3, #29
 800726a:	d512      	bpl.n	8007292 <__swsetup_r+0x7a>
 800726c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800726e:	b141      	cbz	r1, 8007282 <__swsetup_r+0x6a>
 8007270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007274:	4299      	cmp	r1, r3
 8007276:	d002      	beq.n	800727e <__swsetup_r+0x66>
 8007278:	4630      	mov	r0, r6
 800727a:	f7ff fb31 	bl	80068e0 <_free_r>
 800727e:	2300      	movs	r3, #0
 8007280:	6363      	str	r3, [r4, #52]	; 0x34
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007288:	81a3      	strh	r3, [r4, #12]
 800728a:	2300      	movs	r3, #0
 800728c:	6063      	str	r3, [r4, #4]
 800728e:	6923      	ldr	r3, [r4, #16]
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	f043 0308 	orr.w	r3, r3, #8
 8007298:	81a3      	strh	r3, [r4, #12]
 800729a:	6923      	ldr	r3, [r4, #16]
 800729c:	b94b      	cbnz	r3, 80072b2 <__swsetup_r+0x9a>
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a8:	d003      	beq.n	80072b2 <__swsetup_r+0x9a>
 80072aa:	4621      	mov	r1, r4
 80072ac:	4630      	mov	r0, r6
 80072ae:	f000 fa09 	bl	80076c4 <__smakebuf_r>
 80072b2:	89a0      	ldrh	r0, [r4, #12]
 80072b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072b8:	f010 0301 	ands.w	r3, r0, #1
 80072bc:	d00a      	beq.n	80072d4 <__swsetup_r+0xbc>
 80072be:	2300      	movs	r3, #0
 80072c0:	60a3      	str	r3, [r4, #8]
 80072c2:	6963      	ldr	r3, [r4, #20]
 80072c4:	425b      	negs	r3, r3
 80072c6:	61a3      	str	r3, [r4, #24]
 80072c8:	6923      	ldr	r3, [r4, #16]
 80072ca:	b943      	cbnz	r3, 80072de <__swsetup_r+0xc6>
 80072cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072d0:	d1ba      	bne.n	8007248 <__swsetup_r+0x30>
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	0781      	lsls	r1, r0, #30
 80072d6:	bf58      	it	pl
 80072d8:	6963      	ldrpl	r3, [r4, #20]
 80072da:	60a3      	str	r3, [r4, #8]
 80072dc:	e7f4      	b.n	80072c8 <__swsetup_r+0xb0>
 80072de:	2000      	movs	r0, #0
 80072e0:	e7f7      	b.n	80072d2 <__swsetup_r+0xba>
 80072e2:	bf00      	nop
 80072e4:	2000001c 	.word	0x2000001c
 80072e8:	08007f34 	.word	0x08007f34
 80072ec:	08007f54 	.word	0x08007f54
 80072f0:	08007f14 	.word	0x08007f14

080072f4 <abort>:
 80072f4:	b508      	push	{r3, lr}
 80072f6:	2006      	movs	r0, #6
 80072f8:	f000 fa54 	bl	80077a4 <raise>
 80072fc:	2001      	movs	r0, #1
 80072fe:	f7fa fc69 	bl	8001bd4 <_exit>
	...

08007304 <__sflush_r>:
 8007304:	898a      	ldrh	r2, [r1, #12]
 8007306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800730a:	4605      	mov	r5, r0
 800730c:	0710      	lsls	r0, r2, #28
 800730e:	460c      	mov	r4, r1
 8007310:	d458      	bmi.n	80073c4 <__sflush_r+0xc0>
 8007312:	684b      	ldr	r3, [r1, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	dc05      	bgt.n	8007324 <__sflush_r+0x20>
 8007318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800731a:	2b00      	cmp	r3, #0
 800731c:	dc02      	bgt.n	8007324 <__sflush_r+0x20>
 800731e:	2000      	movs	r0, #0
 8007320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007326:	2e00      	cmp	r6, #0
 8007328:	d0f9      	beq.n	800731e <__sflush_r+0x1a>
 800732a:	2300      	movs	r3, #0
 800732c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007330:	682f      	ldr	r7, [r5, #0]
 8007332:	602b      	str	r3, [r5, #0]
 8007334:	d032      	beq.n	800739c <__sflush_r+0x98>
 8007336:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	075a      	lsls	r2, r3, #29
 800733c:	d505      	bpl.n	800734a <__sflush_r+0x46>
 800733e:	6863      	ldr	r3, [r4, #4]
 8007340:	1ac0      	subs	r0, r0, r3
 8007342:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007344:	b10b      	cbz	r3, 800734a <__sflush_r+0x46>
 8007346:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007348:	1ac0      	subs	r0, r0, r3
 800734a:	2300      	movs	r3, #0
 800734c:	4602      	mov	r2, r0
 800734e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007350:	6a21      	ldr	r1, [r4, #32]
 8007352:	4628      	mov	r0, r5
 8007354:	47b0      	blx	r6
 8007356:	1c43      	adds	r3, r0, #1
 8007358:	89a3      	ldrh	r3, [r4, #12]
 800735a:	d106      	bne.n	800736a <__sflush_r+0x66>
 800735c:	6829      	ldr	r1, [r5, #0]
 800735e:	291d      	cmp	r1, #29
 8007360:	d82c      	bhi.n	80073bc <__sflush_r+0xb8>
 8007362:	4a2a      	ldr	r2, [pc, #168]	; (800740c <__sflush_r+0x108>)
 8007364:	40ca      	lsrs	r2, r1
 8007366:	07d6      	lsls	r6, r2, #31
 8007368:	d528      	bpl.n	80073bc <__sflush_r+0xb8>
 800736a:	2200      	movs	r2, #0
 800736c:	6062      	str	r2, [r4, #4]
 800736e:	04d9      	lsls	r1, r3, #19
 8007370:	6922      	ldr	r2, [r4, #16]
 8007372:	6022      	str	r2, [r4, #0]
 8007374:	d504      	bpl.n	8007380 <__sflush_r+0x7c>
 8007376:	1c42      	adds	r2, r0, #1
 8007378:	d101      	bne.n	800737e <__sflush_r+0x7a>
 800737a:	682b      	ldr	r3, [r5, #0]
 800737c:	b903      	cbnz	r3, 8007380 <__sflush_r+0x7c>
 800737e:	6560      	str	r0, [r4, #84]	; 0x54
 8007380:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007382:	602f      	str	r7, [r5, #0]
 8007384:	2900      	cmp	r1, #0
 8007386:	d0ca      	beq.n	800731e <__sflush_r+0x1a>
 8007388:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800738c:	4299      	cmp	r1, r3
 800738e:	d002      	beq.n	8007396 <__sflush_r+0x92>
 8007390:	4628      	mov	r0, r5
 8007392:	f7ff faa5 	bl	80068e0 <_free_r>
 8007396:	2000      	movs	r0, #0
 8007398:	6360      	str	r0, [r4, #52]	; 0x34
 800739a:	e7c1      	b.n	8007320 <__sflush_r+0x1c>
 800739c:	6a21      	ldr	r1, [r4, #32]
 800739e:	2301      	movs	r3, #1
 80073a0:	4628      	mov	r0, r5
 80073a2:	47b0      	blx	r6
 80073a4:	1c41      	adds	r1, r0, #1
 80073a6:	d1c7      	bne.n	8007338 <__sflush_r+0x34>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d0c4      	beq.n	8007338 <__sflush_r+0x34>
 80073ae:	2b1d      	cmp	r3, #29
 80073b0:	d001      	beq.n	80073b6 <__sflush_r+0xb2>
 80073b2:	2b16      	cmp	r3, #22
 80073b4:	d101      	bne.n	80073ba <__sflush_r+0xb6>
 80073b6:	602f      	str	r7, [r5, #0]
 80073b8:	e7b1      	b.n	800731e <__sflush_r+0x1a>
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073c0:	81a3      	strh	r3, [r4, #12]
 80073c2:	e7ad      	b.n	8007320 <__sflush_r+0x1c>
 80073c4:	690f      	ldr	r7, [r1, #16]
 80073c6:	2f00      	cmp	r7, #0
 80073c8:	d0a9      	beq.n	800731e <__sflush_r+0x1a>
 80073ca:	0793      	lsls	r3, r2, #30
 80073cc:	680e      	ldr	r6, [r1, #0]
 80073ce:	bf08      	it	eq
 80073d0:	694b      	ldreq	r3, [r1, #20]
 80073d2:	600f      	str	r7, [r1, #0]
 80073d4:	bf18      	it	ne
 80073d6:	2300      	movne	r3, #0
 80073d8:	eba6 0807 	sub.w	r8, r6, r7
 80073dc:	608b      	str	r3, [r1, #8]
 80073de:	f1b8 0f00 	cmp.w	r8, #0
 80073e2:	dd9c      	ble.n	800731e <__sflush_r+0x1a>
 80073e4:	6a21      	ldr	r1, [r4, #32]
 80073e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073e8:	4643      	mov	r3, r8
 80073ea:	463a      	mov	r2, r7
 80073ec:	4628      	mov	r0, r5
 80073ee:	47b0      	blx	r6
 80073f0:	2800      	cmp	r0, #0
 80073f2:	dc06      	bgt.n	8007402 <__sflush_r+0xfe>
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007400:	e78e      	b.n	8007320 <__sflush_r+0x1c>
 8007402:	4407      	add	r7, r0
 8007404:	eba8 0800 	sub.w	r8, r8, r0
 8007408:	e7e9      	b.n	80073de <__sflush_r+0xda>
 800740a:	bf00      	nop
 800740c:	20400001 	.word	0x20400001

08007410 <_fflush_r>:
 8007410:	b538      	push	{r3, r4, r5, lr}
 8007412:	690b      	ldr	r3, [r1, #16]
 8007414:	4605      	mov	r5, r0
 8007416:	460c      	mov	r4, r1
 8007418:	b913      	cbnz	r3, 8007420 <_fflush_r+0x10>
 800741a:	2500      	movs	r5, #0
 800741c:	4628      	mov	r0, r5
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	b118      	cbz	r0, 800742a <_fflush_r+0x1a>
 8007422:	6983      	ldr	r3, [r0, #24]
 8007424:	b90b      	cbnz	r3, 800742a <_fflush_r+0x1a>
 8007426:	f000 f887 	bl	8007538 <__sinit>
 800742a:	4b14      	ldr	r3, [pc, #80]	; (800747c <_fflush_r+0x6c>)
 800742c:	429c      	cmp	r4, r3
 800742e:	d11b      	bne.n	8007468 <_fflush_r+0x58>
 8007430:	686c      	ldr	r4, [r5, #4]
 8007432:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0ef      	beq.n	800741a <_fflush_r+0xa>
 800743a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800743c:	07d0      	lsls	r0, r2, #31
 800743e:	d404      	bmi.n	800744a <_fflush_r+0x3a>
 8007440:	0599      	lsls	r1, r3, #22
 8007442:	d402      	bmi.n	800744a <_fflush_r+0x3a>
 8007444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007446:	f000 f915 	bl	8007674 <__retarget_lock_acquire_recursive>
 800744a:	4628      	mov	r0, r5
 800744c:	4621      	mov	r1, r4
 800744e:	f7ff ff59 	bl	8007304 <__sflush_r>
 8007452:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007454:	07da      	lsls	r2, r3, #31
 8007456:	4605      	mov	r5, r0
 8007458:	d4e0      	bmi.n	800741c <_fflush_r+0xc>
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	059b      	lsls	r3, r3, #22
 800745e:	d4dd      	bmi.n	800741c <_fflush_r+0xc>
 8007460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007462:	f000 f908 	bl	8007676 <__retarget_lock_release_recursive>
 8007466:	e7d9      	b.n	800741c <_fflush_r+0xc>
 8007468:	4b05      	ldr	r3, [pc, #20]	; (8007480 <_fflush_r+0x70>)
 800746a:	429c      	cmp	r4, r3
 800746c:	d101      	bne.n	8007472 <_fflush_r+0x62>
 800746e:	68ac      	ldr	r4, [r5, #8]
 8007470:	e7df      	b.n	8007432 <_fflush_r+0x22>
 8007472:	4b04      	ldr	r3, [pc, #16]	; (8007484 <_fflush_r+0x74>)
 8007474:	429c      	cmp	r4, r3
 8007476:	bf08      	it	eq
 8007478:	68ec      	ldreq	r4, [r5, #12]
 800747a:	e7da      	b.n	8007432 <_fflush_r+0x22>
 800747c:	08007f34 	.word	0x08007f34
 8007480:	08007f54 	.word	0x08007f54
 8007484:	08007f14 	.word	0x08007f14

08007488 <std>:
 8007488:	2300      	movs	r3, #0
 800748a:	b510      	push	{r4, lr}
 800748c:	4604      	mov	r4, r0
 800748e:	e9c0 3300 	strd	r3, r3, [r0]
 8007492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007496:	6083      	str	r3, [r0, #8]
 8007498:	8181      	strh	r1, [r0, #12]
 800749a:	6643      	str	r3, [r0, #100]	; 0x64
 800749c:	81c2      	strh	r2, [r0, #14]
 800749e:	6183      	str	r3, [r0, #24]
 80074a0:	4619      	mov	r1, r3
 80074a2:	2208      	movs	r2, #8
 80074a4:	305c      	adds	r0, #92	; 0x5c
 80074a6:	f7fd fb69 	bl	8004b7c <memset>
 80074aa:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <std+0x38>)
 80074ac:	6263      	str	r3, [r4, #36]	; 0x24
 80074ae:	4b05      	ldr	r3, [pc, #20]	; (80074c4 <std+0x3c>)
 80074b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80074b2:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <std+0x40>)
 80074b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074b6:	4b05      	ldr	r3, [pc, #20]	; (80074cc <std+0x44>)
 80074b8:	6224      	str	r4, [r4, #32]
 80074ba:	6323      	str	r3, [r4, #48]	; 0x30
 80074bc:	bd10      	pop	{r4, pc}
 80074be:	bf00      	nop
 80074c0:	080077dd 	.word	0x080077dd
 80074c4:	080077ff 	.word	0x080077ff
 80074c8:	08007837 	.word	0x08007837
 80074cc:	0800785b 	.word	0x0800785b

080074d0 <_cleanup_r>:
 80074d0:	4901      	ldr	r1, [pc, #4]	; (80074d8 <_cleanup_r+0x8>)
 80074d2:	f000 b8af 	b.w	8007634 <_fwalk_reent>
 80074d6:	bf00      	nop
 80074d8:	08007411 	.word	0x08007411

080074dc <__sfmoreglue>:
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	2268      	movs	r2, #104	; 0x68
 80074e0:	1e4d      	subs	r5, r1, #1
 80074e2:	4355      	muls	r5, r2
 80074e4:	460e      	mov	r6, r1
 80074e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074ea:	f7ff fa65 	bl	80069b8 <_malloc_r>
 80074ee:	4604      	mov	r4, r0
 80074f0:	b140      	cbz	r0, 8007504 <__sfmoreglue+0x28>
 80074f2:	2100      	movs	r1, #0
 80074f4:	e9c0 1600 	strd	r1, r6, [r0]
 80074f8:	300c      	adds	r0, #12
 80074fa:	60a0      	str	r0, [r4, #8]
 80074fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007500:	f7fd fb3c 	bl	8004b7c <memset>
 8007504:	4620      	mov	r0, r4
 8007506:	bd70      	pop	{r4, r5, r6, pc}

08007508 <__sfp_lock_acquire>:
 8007508:	4801      	ldr	r0, [pc, #4]	; (8007510 <__sfp_lock_acquire+0x8>)
 800750a:	f000 b8b3 	b.w	8007674 <__retarget_lock_acquire_recursive>
 800750e:	bf00      	nop
 8007510:	20000309 	.word	0x20000309

08007514 <__sfp_lock_release>:
 8007514:	4801      	ldr	r0, [pc, #4]	; (800751c <__sfp_lock_release+0x8>)
 8007516:	f000 b8ae 	b.w	8007676 <__retarget_lock_release_recursive>
 800751a:	bf00      	nop
 800751c:	20000309 	.word	0x20000309

08007520 <__sinit_lock_acquire>:
 8007520:	4801      	ldr	r0, [pc, #4]	; (8007528 <__sinit_lock_acquire+0x8>)
 8007522:	f000 b8a7 	b.w	8007674 <__retarget_lock_acquire_recursive>
 8007526:	bf00      	nop
 8007528:	2000030a 	.word	0x2000030a

0800752c <__sinit_lock_release>:
 800752c:	4801      	ldr	r0, [pc, #4]	; (8007534 <__sinit_lock_release+0x8>)
 800752e:	f000 b8a2 	b.w	8007676 <__retarget_lock_release_recursive>
 8007532:	bf00      	nop
 8007534:	2000030a 	.word	0x2000030a

08007538 <__sinit>:
 8007538:	b510      	push	{r4, lr}
 800753a:	4604      	mov	r4, r0
 800753c:	f7ff fff0 	bl	8007520 <__sinit_lock_acquire>
 8007540:	69a3      	ldr	r3, [r4, #24]
 8007542:	b11b      	cbz	r3, 800754c <__sinit+0x14>
 8007544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007548:	f7ff bff0 	b.w	800752c <__sinit_lock_release>
 800754c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007550:	6523      	str	r3, [r4, #80]	; 0x50
 8007552:	4b13      	ldr	r3, [pc, #76]	; (80075a0 <__sinit+0x68>)
 8007554:	4a13      	ldr	r2, [pc, #76]	; (80075a4 <__sinit+0x6c>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	62a2      	str	r2, [r4, #40]	; 0x28
 800755a:	42a3      	cmp	r3, r4
 800755c:	bf04      	itt	eq
 800755e:	2301      	moveq	r3, #1
 8007560:	61a3      	streq	r3, [r4, #24]
 8007562:	4620      	mov	r0, r4
 8007564:	f000 f820 	bl	80075a8 <__sfp>
 8007568:	6060      	str	r0, [r4, #4]
 800756a:	4620      	mov	r0, r4
 800756c:	f000 f81c 	bl	80075a8 <__sfp>
 8007570:	60a0      	str	r0, [r4, #8]
 8007572:	4620      	mov	r0, r4
 8007574:	f000 f818 	bl	80075a8 <__sfp>
 8007578:	2200      	movs	r2, #0
 800757a:	60e0      	str	r0, [r4, #12]
 800757c:	2104      	movs	r1, #4
 800757e:	6860      	ldr	r0, [r4, #4]
 8007580:	f7ff ff82 	bl	8007488 <std>
 8007584:	68a0      	ldr	r0, [r4, #8]
 8007586:	2201      	movs	r2, #1
 8007588:	2109      	movs	r1, #9
 800758a:	f7ff ff7d 	bl	8007488 <std>
 800758e:	68e0      	ldr	r0, [r4, #12]
 8007590:	2202      	movs	r2, #2
 8007592:	2112      	movs	r1, #18
 8007594:	f7ff ff78 	bl	8007488 <std>
 8007598:	2301      	movs	r3, #1
 800759a:	61a3      	str	r3, [r4, #24]
 800759c:	e7d2      	b.n	8007544 <__sinit+0xc>
 800759e:	bf00      	nop
 80075a0:	08007b98 	.word	0x08007b98
 80075a4:	080074d1 	.word	0x080074d1

080075a8 <__sfp>:
 80075a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075aa:	4607      	mov	r7, r0
 80075ac:	f7ff ffac 	bl	8007508 <__sfp_lock_acquire>
 80075b0:	4b1e      	ldr	r3, [pc, #120]	; (800762c <__sfp+0x84>)
 80075b2:	681e      	ldr	r6, [r3, #0]
 80075b4:	69b3      	ldr	r3, [r6, #24]
 80075b6:	b913      	cbnz	r3, 80075be <__sfp+0x16>
 80075b8:	4630      	mov	r0, r6
 80075ba:	f7ff ffbd 	bl	8007538 <__sinit>
 80075be:	3648      	adds	r6, #72	; 0x48
 80075c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	d503      	bpl.n	80075d0 <__sfp+0x28>
 80075c8:	6833      	ldr	r3, [r6, #0]
 80075ca:	b30b      	cbz	r3, 8007610 <__sfp+0x68>
 80075cc:	6836      	ldr	r6, [r6, #0]
 80075ce:	e7f7      	b.n	80075c0 <__sfp+0x18>
 80075d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075d4:	b9d5      	cbnz	r5, 800760c <__sfp+0x64>
 80075d6:	4b16      	ldr	r3, [pc, #88]	; (8007630 <__sfp+0x88>)
 80075d8:	60e3      	str	r3, [r4, #12]
 80075da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075de:	6665      	str	r5, [r4, #100]	; 0x64
 80075e0:	f000 f847 	bl	8007672 <__retarget_lock_init_recursive>
 80075e4:	f7ff ff96 	bl	8007514 <__sfp_lock_release>
 80075e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075f0:	6025      	str	r5, [r4, #0]
 80075f2:	61a5      	str	r5, [r4, #24]
 80075f4:	2208      	movs	r2, #8
 80075f6:	4629      	mov	r1, r5
 80075f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075fc:	f7fd fabe 	bl	8004b7c <memset>
 8007600:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007604:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007608:	4620      	mov	r0, r4
 800760a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800760c:	3468      	adds	r4, #104	; 0x68
 800760e:	e7d9      	b.n	80075c4 <__sfp+0x1c>
 8007610:	2104      	movs	r1, #4
 8007612:	4638      	mov	r0, r7
 8007614:	f7ff ff62 	bl	80074dc <__sfmoreglue>
 8007618:	4604      	mov	r4, r0
 800761a:	6030      	str	r0, [r6, #0]
 800761c:	2800      	cmp	r0, #0
 800761e:	d1d5      	bne.n	80075cc <__sfp+0x24>
 8007620:	f7ff ff78 	bl	8007514 <__sfp_lock_release>
 8007624:	230c      	movs	r3, #12
 8007626:	603b      	str	r3, [r7, #0]
 8007628:	e7ee      	b.n	8007608 <__sfp+0x60>
 800762a:	bf00      	nop
 800762c:	08007b98 	.word	0x08007b98
 8007630:	ffff0001 	.word	0xffff0001

08007634 <_fwalk_reent>:
 8007634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007638:	4606      	mov	r6, r0
 800763a:	4688      	mov	r8, r1
 800763c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007640:	2700      	movs	r7, #0
 8007642:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007646:	f1b9 0901 	subs.w	r9, r9, #1
 800764a:	d505      	bpl.n	8007658 <_fwalk_reent+0x24>
 800764c:	6824      	ldr	r4, [r4, #0]
 800764e:	2c00      	cmp	r4, #0
 8007650:	d1f7      	bne.n	8007642 <_fwalk_reent+0xe>
 8007652:	4638      	mov	r0, r7
 8007654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007658:	89ab      	ldrh	r3, [r5, #12]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d907      	bls.n	800766e <_fwalk_reent+0x3a>
 800765e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007662:	3301      	adds	r3, #1
 8007664:	d003      	beq.n	800766e <_fwalk_reent+0x3a>
 8007666:	4629      	mov	r1, r5
 8007668:	4630      	mov	r0, r6
 800766a:	47c0      	blx	r8
 800766c:	4307      	orrs	r7, r0
 800766e:	3568      	adds	r5, #104	; 0x68
 8007670:	e7e9      	b.n	8007646 <_fwalk_reent+0x12>

08007672 <__retarget_lock_init_recursive>:
 8007672:	4770      	bx	lr

08007674 <__retarget_lock_acquire_recursive>:
 8007674:	4770      	bx	lr

08007676 <__retarget_lock_release_recursive>:
 8007676:	4770      	bx	lr

08007678 <__swhatbuf_r>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	460e      	mov	r6, r1
 800767c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007680:	2900      	cmp	r1, #0
 8007682:	b096      	sub	sp, #88	; 0x58
 8007684:	4614      	mov	r4, r2
 8007686:	461d      	mov	r5, r3
 8007688:	da08      	bge.n	800769c <__swhatbuf_r+0x24>
 800768a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	602a      	str	r2, [r5, #0]
 8007692:	061a      	lsls	r2, r3, #24
 8007694:	d410      	bmi.n	80076b8 <__swhatbuf_r+0x40>
 8007696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800769a:	e00e      	b.n	80076ba <__swhatbuf_r+0x42>
 800769c:	466a      	mov	r2, sp
 800769e:	f000 f903 	bl	80078a8 <_fstat_r>
 80076a2:	2800      	cmp	r0, #0
 80076a4:	dbf1      	blt.n	800768a <__swhatbuf_r+0x12>
 80076a6:	9a01      	ldr	r2, [sp, #4]
 80076a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80076ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076b0:	425a      	negs	r2, r3
 80076b2:	415a      	adcs	r2, r3
 80076b4:	602a      	str	r2, [r5, #0]
 80076b6:	e7ee      	b.n	8007696 <__swhatbuf_r+0x1e>
 80076b8:	2340      	movs	r3, #64	; 0x40
 80076ba:	2000      	movs	r0, #0
 80076bc:	6023      	str	r3, [r4, #0]
 80076be:	b016      	add	sp, #88	; 0x58
 80076c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080076c4 <__smakebuf_r>:
 80076c4:	898b      	ldrh	r3, [r1, #12]
 80076c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076c8:	079d      	lsls	r5, r3, #30
 80076ca:	4606      	mov	r6, r0
 80076cc:	460c      	mov	r4, r1
 80076ce:	d507      	bpl.n	80076e0 <__smakebuf_r+0x1c>
 80076d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	6123      	str	r3, [r4, #16]
 80076d8:	2301      	movs	r3, #1
 80076da:	6163      	str	r3, [r4, #20]
 80076dc:	b002      	add	sp, #8
 80076de:	bd70      	pop	{r4, r5, r6, pc}
 80076e0:	ab01      	add	r3, sp, #4
 80076e2:	466a      	mov	r2, sp
 80076e4:	f7ff ffc8 	bl	8007678 <__swhatbuf_r>
 80076e8:	9900      	ldr	r1, [sp, #0]
 80076ea:	4605      	mov	r5, r0
 80076ec:	4630      	mov	r0, r6
 80076ee:	f7ff f963 	bl	80069b8 <_malloc_r>
 80076f2:	b948      	cbnz	r0, 8007708 <__smakebuf_r+0x44>
 80076f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076f8:	059a      	lsls	r2, r3, #22
 80076fa:	d4ef      	bmi.n	80076dc <__smakebuf_r+0x18>
 80076fc:	f023 0303 	bic.w	r3, r3, #3
 8007700:	f043 0302 	orr.w	r3, r3, #2
 8007704:	81a3      	strh	r3, [r4, #12]
 8007706:	e7e3      	b.n	80076d0 <__smakebuf_r+0xc>
 8007708:	4b0d      	ldr	r3, [pc, #52]	; (8007740 <__smakebuf_r+0x7c>)
 800770a:	62b3      	str	r3, [r6, #40]	; 0x28
 800770c:	89a3      	ldrh	r3, [r4, #12]
 800770e:	6020      	str	r0, [r4, #0]
 8007710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007714:	81a3      	strh	r3, [r4, #12]
 8007716:	9b00      	ldr	r3, [sp, #0]
 8007718:	6163      	str	r3, [r4, #20]
 800771a:	9b01      	ldr	r3, [sp, #4]
 800771c:	6120      	str	r0, [r4, #16]
 800771e:	b15b      	cbz	r3, 8007738 <__smakebuf_r+0x74>
 8007720:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007724:	4630      	mov	r0, r6
 8007726:	f000 f8d1 	bl	80078cc <_isatty_r>
 800772a:	b128      	cbz	r0, 8007738 <__smakebuf_r+0x74>
 800772c:	89a3      	ldrh	r3, [r4, #12]
 800772e:	f023 0303 	bic.w	r3, r3, #3
 8007732:	f043 0301 	orr.w	r3, r3, #1
 8007736:	81a3      	strh	r3, [r4, #12]
 8007738:	89a0      	ldrh	r0, [r4, #12]
 800773a:	4305      	orrs	r5, r0
 800773c:	81a5      	strh	r5, [r4, #12]
 800773e:	e7cd      	b.n	80076dc <__smakebuf_r+0x18>
 8007740:	080074d1 	.word	0x080074d1

08007744 <_malloc_usable_size_r>:
 8007744:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007748:	1f18      	subs	r0, r3, #4
 800774a:	2b00      	cmp	r3, #0
 800774c:	bfbc      	itt	lt
 800774e:	580b      	ldrlt	r3, [r1, r0]
 8007750:	18c0      	addlt	r0, r0, r3
 8007752:	4770      	bx	lr

08007754 <_raise_r>:
 8007754:	291f      	cmp	r1, #31
 8007756:	b538      	push	{r3, r4, r5, lr}
 8007758:	4604      	mov	r4, r0
 800775a:	460d      	mov	r5, r1
 800775c:	d904      	bls.n	8007768 <_raise_r+0x14>
 800775e:	2316      	movs	r3, #22
 8007760:	6003      	str	r3, [r0, #0]
 8007762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800776a:	b112      	cbz	r2, 8007772 <_raise_r+0x1e>
 800776c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007770:	b94b      	cbnz	r3, 8007786 <_raise_r+0x32>
 8007772:	4620      	mov	r0, r4
 8007774:	f000 f830 	bl	80077d8 <_getpid_r>
 8007778:	462a      	mov	r2, r5
 800777a:	4601      	mov	r1, r0
 800777c:	4620      	mov	r0, r4
 800777e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007782:	f000 b817 	b.w	80077b4 <_kill_r>
 8007786:	2b01      	cmp	r3, #1
 8007788:	d00a      	beq.n	80077a0 <_raise_r+0x4c>
 800778a:	1c59      	adds	r1, r3, #1
 800778c:	d103      	bne.n	8007796 <_raise_r+0x42>
 800778e:	2316      	movs	r3, #22
 8007790:	6003      	str	r3, [r0, #0]
 8007792:	2001      	movs	r0, #1
 8007794:	e7e7      	b.n	8007766 <_raise_r+0x12>
 8007796:	2400      	movs	r4, #0
 8007798:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800779c:	4628      	mov	r0, r5
 800779e:	4798      	blx	r3
 80077a0:	2000      	movs	r0, #0
 80077a2:	e7e0      	b.n	8007766 <_raise_r+0x12>

080077a4 <raise>:
 80077a4:	4b02      	ldr	r3, [pc, #8]	; (80077b0 <raise+0xc>)
 80077a6:	4601      	mov	r1, r0
 80077a8:	6818      	ldr	r0, [r3, #0]
 80077aa:	f7ff bfd3 	b.w	8007754 <_raise_r>
 80077ae:	bf00      	nop
 80077b0:	2000001c 	.word	0x2000001c

080077b4 <_kill_r>:
 80077b4:	b538      	push	{r3, r4, r5, lr}
 80077b6:	4d07      	ldr	r5, [pc, #28]	; (80077d4 <_kill_r+0x20>)
 80077b8:	2300      	movs	r3, #0
 80077ba:	4604      	mov	r4, r0
 80077bc:	4608      	mov	r0, r1
 80077be:	4611      	mov	r1, r2
 80077c0:	602b      	str	r3, [r5, #0]
 80077c2:	f7fa f9f7 	bl	8001bb4 <_kill>
 80077c6:	1c43      	adds	r3, r0, #1
 80077c8:	d102      	bne.n	80077d0 <_kill_r+0x1c>
 80077ca:	682b      	ldr	r3, [r5, #0]
 80077cc:	b103      	cbz	r3, 80077d0 <_kill_r+0x1c>
 80077ce:	6023      	str	r3, [r4, #0]
 80077d0:	bd38      	pop	{r3, r4, r5, pc}
 80077d2:	bf00      	nop
 80077d4:	20000304 	.word	0x20000304

080077d8 <_getpid_r>:
 80077d8:	f7fa b9e4 	b.w	8001ba4 <_getpid>

080077dc <__sread>:
 80077dc:	b510      	push	{r4, lr}
 80077de:	460c      	mov	r4, r1
 80077e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e4:	f000 f894 	bl	8007910 <_read_r>
 80077e8:	2800      	cmp	r0, #0
 80077ea:	bfab      	itete	ge
 80077ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077ee:	89a3      	ldrhlt	r3, [r4, #12]
 80077f0:	181b      	addge	r3, r3, r0
 80077f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077f6:	bfac      	ite	ge
 80077f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80077fa:	81a3      	strhlt	r3, [r4, #12]
 80077fc:	bd10      	pop	{r4, pc}

080077fe <__swrite>:
 80077fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007802:	461f      	mov	r7, r3
 8007804:	898b      	ldrh	r3, [r1, #12]
 8007806:	05db      	lsls	r3, r3, #23
 8007808:	4605      	mov	r5, r0
 800780a:	460c      	mov	r4, r1
 800780c:	4616      	mov	r6, r2
 800780e:	d505      	bpl.n	800781c <__swrite+0x1e>
 8007810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007814:	2302      	movs	r3, #2
 8007816:	2200      	movs	r2, #0
 8007818:	f000 f868 	bl	80078ec <_lseek_r>
 800781c:	89a3      	ldrh	r3, [r4, #12]
 800781e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007826:	81a3      	strh	r3, [r4, #12]
 8007828:	4632      	mov	r2, r6
 800782a:	463b      	mov	r3, r7
 800782c:	4628      	mov	r0, r5
 800782e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007832:	f000 b817 	b.w	8007864 <_write_r>

08007836 <__sseek>:
 8007836:	b510      	push	{r4, lr}
 8007838:	460c      	mov	r4, r1
 800783a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783e:	f000 f855 	bl	80078ec <_lseek_r>
 8007842:	1c43      	adds	r3, r0, #1
 8007844:	89a3      	ldrh	r3, [r4, #12]
 8007846:	bf15      	itete	ne
 8007848:	6560      	strne	r0, [r4, #84]	; 0x54
 800784a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800784e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007852:	81a3      	strheq	r3, [r4, #12]
 8007854:	bf18      	it	ne
 8007856:	81a3      	strhne	r3, [r4, #12]
 8007858:	bd10      	pop	{r4, pc}

0800785a <__sclose>:
 800785a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800785e:	f000 b813 	b.w	8007888 <_close_r>
	...

08007864 <_write_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4d07      	ldr	r5, [pc, #28]	; (8007884 <_write_r+0x20>)
 8007868:	4604      	mov	r4, r0
 800786a:	4608      	mov	r0, r1
 800786c:	4611      	mov	r1, r2
 800786e:	2200      	movs	r2, #0
 8007870:	602a      	str	r2, [r5, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	f7fa f9d5 	bl	8001c22 <_write>
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	d102      	bne.n	8007882 <_write_r+0x1e>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	b103      	cbz	r3, 8007882 <_write_r+0x1e>
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	20000304 	.word	0x20000304

08007888 <_close_r>:
 8007888:	b538      	push	{r3, r4, r5, lr}
 800788a:	4d06      	ldr	r5, [pc, #24]	; (80078a4 <_close_r+0x1c>)
 800788c:	2300      	movs	r3, #0
 800788e:	4604      	mov	r4, r0
 8007890:	4608      	mov	r0, r1
 8007892:	602b      	str	r3, [r5, #0]
 8007894:	f7fa f9e1 	bl	8001c5a <_close>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d102      	bne.n	80078a2 <_close_r+0x1a>
 800789c:	682b      	ldr	r3, [r5, #0]
 800789e:	b103      	cbz	r3, 80078a2 <_close_r+0x1a>
 80078a0:	6023      	str	r3, [r4, #0]
 80078a2:	bd38      	pop	{r3, r4, r5, pc}
 80078a4:	20000304 	.word	0x20000304

080078a8 <_fstat_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4d07      	ldr	r5, [pc, #28]	; (80078c8 <_fstat_r+0x20>)
 80078ac:	2300      	movs	r3, #0
 80078ae:	4604      	mov	r4, r0
 80078b0:	4608      	mov	r0, r1
 80078b2:	4611      	mov	r1, r2
 80078b4:	602b      	str	r3, [r5, #0]
 80078b6:	f7fa f9dc 	bl	8001c72 <_fstat>
 80078ba:	1c43      	adds	r3, r0, #1
 80078bc:	d102      	bne.n	80078c4 <_fstat_r+0x1c>
 80078be:	682b      	ldr	r3, [r5, #0]
 80078c0:	b103      	cbz	r3, 80078c4 <_fstat_r+0x1c>
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	bd38      	pop	{r3, r4, r5, pc}
 80078c6:	bf00      	nop
 80078c8:	20000304 	.word	0x20000304

080078cc <_isatty_r>:
 80078cc:	b538      	push	{r3, r4, r5, lr}
 80078ce:	4d06      	ldr	r5, [pc, #24]	; (80078e8 <_isatty_r+0x1c>)
 80078d0:	2300      	movs	r3, #0
 80078d2:	4604      	mov	r4, r0
 80078d4:	4608      	mov	r0, r1
 80078d6:	602b      	str	r3, [r5, #0]
 80078d8:	f7fa f9db 	bl	8001c92 <_isatty>
 80078dc:	1c43      	adds	r3, r0, #1
 80078de:	d102      	bne.n	80078e6 <_isatty_r+0x1a>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	b103      	cbz	r3, 80078e6 <_isatty_r+0x1a>
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	20000304 	.word	0x20000304

080078ec <_lseek_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	4d07      	ldr	r5, [pc, #28]	; (800790c <_lseek_r+0x20>)
 80078f0:	4604      	mov	r4, r0
 80078f2:	4608      	mov	r0, r1
 80078f4:	4611      	mov	r1, r2
 80078f6:	2200      	movs	r2, #0
 80078f8:	602a      	str	r2, [r5, #0]
 80078fa:	461a      	mov	r2, r3
 80078fc:	f7fa f9d4 	bl	8001ca8 <_lseek>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_lseek_r+0x1e>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b103      	cbz	r3, 800790a <_lseek_r+0x1e>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	20000304 	.word	0x20000304

08007910 <_read_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4d07      	ldr	r5, [pc, #28]	; (8007930 <_read_r+0x20>)
 8007914:	4604      	mov	r4, r0
 8007916:	4608      	mov	r0, r1
 8007918:	4611      	mov	r1, r2
 800791a:	2200      	movs	r2, #0
 800791c:	602a      	str	r2, [r5, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	f7fa f962 	bl	8001be8 <_read>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_read_r+0x1e>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_read_r+0x1e>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	20000304 	.word	0x20000304

08007934 <_init>:
 8007934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007936:	bf00      	nop
 8007938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800793a:	bc08      	pop	{r3}
 800793c:	469e      	mov	lr, r3
 800793e:	4770      	bx	lr

08007940 <_fini>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	bf00      	nop
 8007944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007946:	bc08      	pop	{r3}
 8007948:	469e      	mov	lr, r3
 800794a:	4770      	bx	lr
